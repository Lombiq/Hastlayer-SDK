-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- When put on variables and signals this attribute instructs Vivado not to merge them, thus allowing us to define multi-cycle paths properly.
    attribute dont_touch: string;


    -- Custom inter-dependent type declarations start
    type \Lombiq.Arithmetics.Posit32\ is record 
        \IsNull\: boolean;
        \PositBits\: unsigned(31 downto 0);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._States\ is (
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_0\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_1\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_2\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_3\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_4\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_5\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_6\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_7\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_8\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_9\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_10\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_11\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_12\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_13\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_14\, 
        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_15\);
    -- Signals:
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Finished\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).left.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).right.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Started.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Started\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Finished.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).return.0\: \Lombiq.Arithmetics.Posit32\;
    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._States\ is (
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_0\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_1\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_2\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_3\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_4\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_5\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_6\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_7\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_8\, 
        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_9\);
    -- Signals:
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Finished\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32).number.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Started.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Started\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Finished.0\: boolean := false;
    Signal \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32).return.0\: \Lombiq.Arithmetics.Posit32\;
    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(UInt32,Boolean).0._States\ is (
        \Posit32::.ctor(UInt32,Boolean).0._State_0\, 
        \Posit32::.ctor(UInt32,Boolean).0._State_1\, 
        \Posit32::.ctor(UInt32,Boolean).0._State_2\);
    -- Signals:
    Signal \Posit32::.ctor(UInt32,Boolean).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32,Boolean).0._Started\: boolean := false;
    Signal \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\: boolean := false;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(UInt32).0._States\ is (
        \Posit32::.ctor(UInt32).0._State_0\, 
        \Posit32::.ctor(UInt32).0._State_1\, 
        \Posit32::.ctor(UInt32).0._State_2\);
    -- Signals:
    Signal \Posit32::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(UInt32).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32).0._Started\: boolean := false;
    Signal \Posit32::.ctor(UInt32).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32).0.value.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(Int32).0._States\ is (
        \Posit32::.ctor(Int32).0._State_0\, 
        \Posit32::.ctor(Int32).0._State_1\, 
        \Posit32::.ctor(Int32).0._State_2\, 
        \Posit32::.ctor(Int32).0._State_3\);
    -- Signals:
    Signal \Posit32::.ctor(Int32).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(Int32).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Int32).0._Started\: boolean := false;
    Signal \Posit32::.ctor(Int32).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\: boolean := false;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 declarations end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().0 declarations start
    -- State machine states:
    type \Posit32::IsPositive().0._States\ is (
        \Posit32::IsPositive().0._State_0\, 
        \Posit32::IsPositive().0._State_1\, 
        \Posit32::IsPositive().0._State_2\);
    -- Signals:
    Signal \Posit32::IsPositive().0._Finished\: boolean := false;
    Signal \Posit32::IsPositive().0.return\: boolean := false;
    Signal \Posit32::IsPositive().0._Started\: boolean := false;
    Signal \Posit32::IsPositive().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().0 declarations end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 declarations start
    -- State machine states:
    type \Posit32::IsNaN().0._States\ is (
        \Posit32::IsNaN().0._State_0\, 
        \Posit32::IsNaN().0._State_1\, 
        \Posit32::IsNaN().0._State_2\);
    -- Signals:
    Signal \Posit32::IsNaN().0._Finished\: boolean := false;
    Signal \Posit32::IsNaN().0.return\: boolean := false;
    Signal \Posit32::IsNaN().0._Started\: boolean := false;
    Signal \Posit32::IsNaN().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 declarations end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsZero().0 declarations start
    -- State machine states:
    type \Posit32::IsZero().0._States\ is (
        \Posit32::IsZero().0._State_0\, 
        \Posit32::IsZero().0._State_1\, 
        \Posit32::IsZero().0._State_2\);
    -- Signals:
    Signal \Posit32::IsZero().0._Finished\: boolean := false;
    Signal \Posit32::IsZero().0.return\: boolean := false;
    Signal \Posit32::IsZero().0._Started\: boolean := false;
    Signal \Posit32::IsZero().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsZero().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 declarations start
    -- State machine states:
    type \Posit32::EncodeRegimeBits(Int32).0._States\ is (
        \Posit32::EncodeRegimeBits(Int32).0._State_0\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_1\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_2\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_3\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_4\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_5\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_6\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_7\);
    -- Signals:
    Signal \Posit32::EncodeRegimeBits(Int32).0._Finished\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0._Started\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0.regimeKValue.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._States\ is (
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\);
    -- Signals:
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 declarations end


    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 declarations start
    -- State machine states:
    type \Posit32::GetRegimeKValue().0._States\ is (
        \Posit32::GetRegimeKValue().0._State_0\, 
        \Posit32::GetRegimeKValue().0._State_1\, 
        \Posit32::GetRegimeKValue().0._State_2\, 
        \Posit32::GetRegimeKValue().0._State_3\, 
        \Posit32::GetRegimeKValue().0._State_4\, 
        \Posit32::GetRegimeKValue().0._State_5\, 
        \Posit32::GetRegimeKValue().0._State_6\, 
        \Posit32::GetRegimeKValue().0._State_7\, 
        \Posit32::GetRegimeKValue().0._State_8\, 
        \Posit32::GetRegimeKValue().0._State_9\, 
        \Posit32::GetRegimeKValue().0._State_10\);
    -- Signals:
    Signal \Posit32::GetRegimeKValue().0._Finished\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.return\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32::GetRegimeKValue().0.Posit32::IsPositive().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0._Started\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Finished.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::IsPositive().return.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 declarations end


    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 declarations start
    -- State machine states:
    type \Posit32::CalculateScaleFactor().0._States\ is (
        \Posit32::CalculateScaleFactor().0._State_0\, 
        \Posit32::CalculateScaleFactor().0._State_1\, 
        \Posit32::CalculateScaleFactor().0._State_2\, 
        \Posit32::CalculateScaleFactor().0._State_3\, 
        \Posit32::CalculateScaleFactor().0._State_4\, 
        \Posit32::CalculateScaleFactor().0._State_5\, 
        \Posit32::CalculateScaleFactor().0._State_6\);
    -- Signals:
    Signal \Posit32::CalculateScaleFactor().0._Finished\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.return\: signed(15 downto 0) := to_signed(0, 16);
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0._Started\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().return.0\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 declarations start
    -- State machine states:
    type \Posit32::ExponentSize().0._States\ is (
        \Posit32::ExponentSize().0._State_0\, 
        \Posit32::ExponentSize().0._State_1\, 
        \Posit32::ExponentSize().0._State_2\, 
        \Posit32::ExponentSize().0._State_3\, 
        \Posit32::ExponentSize().0._State_4\, 
        \Posit32::ExponentSize().0._State_5\, 
        \Posit32::ExponentSize().0._State_6\, 
        \Posit32::ExponentSize().0._State_7\, 
        \Posit32::ExponentSize().0._State_8\, 
        \Posit32::ExponentSize().0._State_9\, 
        \Posit32::ExponentSize().0._State_10\, 
        \Posit32::ExponentSize().0._State_11\, 
        \Posit32::ExponentSize().0._State_12\, 
        \Posit32::ExponentSize().0._State_13\, 
        \Posit32::ExponentSize().0._State_14\);
    -- Signals:
    Signal \Posit32::ExponentSize().0._Finished\: boolean := false;
    Signal \Posit32::ExponentSize().0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::ExponentSize().0.Posit32::IsPositive().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::ExponentSize().0._Started\: boolean := false;
    Signal \Posit32::ExponentSize().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::ExponentSize().0.Posit32::IsPositive()._Finished.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::IsPositive().return.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 declarations start
    -- State machine states:
    type \Posit32::GetExponentValue().0._States\ is (
        \Posit32::GetExponentValue().0._State_0\, 
        \Posit32::GetExponentValue().0._State_1\, 
        \Posit32::GetExponentValue().0._State_2\, 
        \Posit32::GetExponentValue().0._State_3\, 
        \Posit32::GetExponentValue().0._State_4\, 
        \Posit32::GetExponentValue().0._State_5\, 
        \Posit32::GetExponentValue().0._State_6\, 
        \Posit32::GetExponentValue().0._State_7\, 
        \Posit32::GetExponentValue().0._State_8\, 
        \Posit32::GetExponentValue().0._State_9\, 
        \Posit32::GetExponentValue().0._State_10\, 
        \Posit32::GetExponentValue().0._State_11\, 
        \Posit32::GetExponentValue().0._State_12\, 
        \Posit32::GetExponentValue().0._State_13\);
    -- Signals:
    Signal \Posit32::GetExponentValue().0._Finished\: boolean := false;
    Signal \Posit32::GetExponentValue().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetExponentValue().0.Posit32::IsPositive().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0._Started\: boolean := false;
    Signal \Posit32::GetExponentValue().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::IsPositive()._Finished.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::IsPositive().return.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Finished.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize().return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 declarations start
    -- State machine states:
    type \Posit32::FractionSize().0._States\ is (
        \Posit32::FractionSize().0._State_0\, 
        \Posit32::FractionSize().0._State_1\, 
        \Posit32::FractionSize().0._State_2\, 
        \Posit32::FractionSize().0._State_3\, 
        \Posit32::FractionSize().0._State_4\, 
        \Posit32::FractionSize().0._State_5\, 
        \Posit32::FractionSize().0._State_6\, 
        \Posit32::FractionSize().0._State_7\, 
        \Posit32::FractionSize().0._State_8\, 
        \Posit32::FractionSize().0._State_9\, 
        \Posit32::FractionSize().0._State_10\, 
        \Posit32::FractionSize().0._State_11\);
    -- Signals:
    Signal \Posit32::FractionSize().0._Finished\: boolean := false;
    Signal \Posit32::FractionSize().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSize().0.Posit32::IsPositive().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::FractionSize().0._Started\: boolean := false;
    Signal \Posit32::FractionSize().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionSize().0.Posit32::IsPositive()._Finished.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::IsPositive().return.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck().0 declarations start
    -- State machine states:
    type \Posit32::FractionSizeWithoutSignCheck().0._States\ is (
        \Posit32::FractionSizeWithoutSignCheck().0._State_0\, 
        \Posit32::FractionSizeWithoutSignCheck().0._State_1\, 
        \Posit32::FractionSizeWithoutSignCheck().0._State_2\, 
        \Posit32::FractionSizeWithoutSignCheck().0._State_3\, 
        \Posit32::FractionSizeWithoutSignCheck().0._State_4\, 
        \Posit32::FractionSizeWithoutSignCheck().0._State_5\, 
        \Posit32::FractionSizeWithoutSignCheck().0._State_6\);
    -- Signals:
    Signal \Posit32::FractionSizeWithoutSignCheck().0._Finished\: boolean := false;
    Signal \Posit32::FractionSizeWithoutSignCheck().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::FractionSizeWithoutSignCheck().0._Started\: boolean := false;
    Signal \Posit32::FractionSizeWithoutSignCheck().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck().0 declarations start
    -- State machine states:
    type \Posit32::FractionWithHiddenBitWithoutSignCheck().0._States\ is (
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_0\, 
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_1\, 
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_2\, 
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_3\, 
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_4\, 
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_5\, 
        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_6\);
    -- Signals:
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Finished\: boolean := false;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\: boolean := false;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck().0 declarations end


    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte).0 declarations start
    -- State machine states:
    type \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._States\ is (
        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_0\, 
        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_1\, 
        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_2\);
    -- Signals:
    Signal \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Finished\: boolean := false;
    Signal \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.return\: signed(15 downto 0) := to_signed(0, 16);
    Signal \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Started\: boolean := false;
    Signal \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue.parameter.In\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.maximumExponentSize.parameter.In\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte).0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::GetMostSignificantOnePosition(UInt32).0._States\ is (
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_1\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_3\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_4\);
    -- Signals:
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\: boolean := false;
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64).0 declarations start
    -- State machine states:
    type \Posit32::GetMostSignificantOnePosition(UInt64).0._States\ is (
        \Posit32::GetMostSignificantOnePosition(UInt64).0._State_0\, 
        \Posit32::GetMostSignificantOnePosition(UInt64).0._State_1\, 
        \Posit32::GetMostSignificantOnePosition(UInt64).0._State_2\, 
        \Posit32::GetMostSignificantOnePosition(UInt64).0._State_3\, 
        \Posit32::GetMostSignificantOnePosition(UInt64).0._State_4\);
    -- Signals:
    Signal \Posit32::GetMostSignificantOnePosition(UInt64).0._Finished\: boolean := false;
    Signal \Posit32::GetMostSignificantOnePosition(UInt64).0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetMostSignificantOnePosition(UInt64).0._Started\: boolean := false;
    Signal \Posit32::GetMostSignificantOnePosition(UInt64).0.bits.parameter.In\: unsigned(63 downto 0) := to_unsigned(0, 64);
    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64).0 declarations end


    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32).0 declarations start
    -- State machine states:
    type \Posit32::Abs(Posit32).0._States\ is (
        \Posit32::Abs(Posit32).0._State_0\, 
        \Posit32::Abs(Posit32).0._State_1\, 
        \Posit32::Abs(Posit32).0._State_2\, 
        \Posit32::Abs(Posit32).0._State_3\, 
        \Posit32::Abs(Posit32).0._State_4\);
    -- Signals:
    Signal \Posit32::Abs(Posit32).0._Finished\: boolean := false;
    Signal \Posit32::Abs(Posit32).0.return\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32::Abs(Posit32).0._Started\: boolean := false;
    Signal \Posit32::Abs(Posit32).0.input.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 declarations start
    -- State machine states:
    type \Posit32::SetOne(UInt32,UInt16).0._States\ is (
        \Posit32::SetOne(UInt32,UInt16).0._State_0\, 
        \Posit32::SetOne(UInt32,UInt16).0._State_1\, 
        \Posit32::SetOne(UInt32,UInt16).0._State_2\);
    -- Signals:
    Signal \Posit32::SetOne(UInt32,UInt16).0._Finished\: boolean := false;
    Signal \Posit32::SetOne(UInt32,UInt16).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetOne(UInt32,UInt16).0._Started\: boolean := false;
    Signal \Posit32::SetOne(UInt32,UInt16).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetOne(UInt32,UInt16).0.index.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 declarations start
    -- State machine states:
    type \Posit32::SetZero(UInt32,UInt16).0._States\ is (
        \Posit32::SetZero(UInt32,UInt16).0._State_0\, 
        \Posit32::SetZero(UInt32,UInt16).0._State_1\, 
        \Posit32::SetZero(UInt32,UInt16).0._State_2\);
    -- Signals:
    Signal \Posit32::SetZero(UInt32,UInt16).0._Finished\: boolean := false;
    Signal \Posit32::SetZero(UInt32,UInt16).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetZero(UInt32,UInt16).0._Started\: boolean := false;
    Signal \Posit32::SetZero(UInt32,UInt16).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetZero(UInt32,UInt16).0.index.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 declarations start
    -- State machine states:
    type \Posit32::LengthOfRunOfBits(UInt32,Byte).0._States\ is (
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_1\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_4\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\);
    -- Signals:
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\: boolean := false;
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\: boolean := false;
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::GetTwosComplement(UInt32).0._States\ is (
        \Posit32::GetTwosComplement(UInt32).0._State_0\, 
        \Posit32::GetTwosComplement(UInt32).0._State_1\, 
        \Posit32::GetTwosComplement(UInt32).0._State_2\);
    -- Signals:
    Signal \Posit32::GetTwosComplement(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::GetTwosComplement(UInt32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetTwosComplement(UInt32).0._Started\: boolean := false;
    Signal \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 declarations end


    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0 declarations start
    -- State machine states:
    type \Posit32::Sqrt(Posit32).0._States\ is (
        \Posit32::Sqrt(Posit32).0._State_0\, 
        \Posit32::Sqrt(Posit32).0._State_1\, 
        \Posit32::Sqrt(Posit32).0._State_2\, 
        \Posit32::Sqrt(Posit32).0._State_3\, 
        \Posit32::Sqrt(Posit32).0._State_4\, 
        \Posit32::Sqrt(Posit32).0._State_5\, 
        \Posit32::Sqrt(Posit32).0._State_6\, 
        \Posit32::Sqrt(Posit32).0._State_7\, 
        \Posit32::Sqrt(Posit32).0._State_8\, 
        \Posit32::Sqrt(Posit32).0._State_9\, 
        \Posit32::Sqrt(Posit32).0._State_10\, 
        \Posit32::Sqrt(Posit32).0._State_11\, 
        \Posit32::Sqrt(Posit32).0._State_12\, 
        \Posit32::Sqrt(Posit32).0._State_13\, 
        \Posit32::Sqrt(Posit32).0._State_14\, 
        \Posit32::Sqrt(Posit32).0._State_15\, 
        \Posit32::Sqrt(Posit32).0._State_16\, 
        \Posit32::Sqrt(Posit32).0._State_17\, 
        \Posit32::Sqrt(Posit32).0._State_18\, 
        \Posit32::Sqrt(Posit32).0._State_19\, 
        \Posit32::Sqrt(Posit32).0._State_20\, 
        \Posit32::Sqrt(Posit32).0._State_21\, 
        \Posit32::Sqrt(Posit32).0._State_22\, 
        \Posit32::Sqrt(Posit32).0._State_23\, 
        \Posit32::Sqrt(Posit32).0._State_24\, 
        \Posit32::Sqrt(Posit32).0._State_25\);
    -- Signals:
    Signal \Posit32::Sqrt(Posit32).0._Finished\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.return\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsNaN().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsZero().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsPositive().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0._Started\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.number.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsNaN().return.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsZero().return.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::IsPositive().return.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor().return.0\: signed(15 downto 0) := to_signed(0, 16);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0 declarations end


    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 declarations start
    -- State machine states:
    type \Posit32 Posit32::op_Division(Posit32,Posit32).0._States\ is (
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_0\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_1\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_2\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_3\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_4\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_5\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_6\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_7\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_8\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_9\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_10\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_11\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_12\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_13\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_14\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_15\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_16\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_17\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_18\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_19\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_20\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_21\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_22\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_23\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_24\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_25\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_26\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_27\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_28\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_29\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_30\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_31\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_32\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_33\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_34\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_35\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_36\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_37\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_38\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_39\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_41\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_42\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_43\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_44\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_45\, 
        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_46\);
    -- Signals:
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0._Finished\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.return\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).input.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).bits.parameter.Out.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).regimeKValue.parameter.Out.0\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).exponentValue.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).maximumExponentSize.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0._Started\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.left.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.right.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().return.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().return.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).return.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().return.0\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).return.0\: signed(15 downto 0) := to_signed(0, 16);
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\: boolean := false;
    Signal \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\: \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._States\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_0\;
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.2\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit2\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.return.0\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.positBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Finished\ <= false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Started.0\ <= false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_0\;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num\ := to_signed(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.0\ := (others => '0');
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits\ := to_unsigned(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.1\ := (others => '0');
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits2\ := to_unsigned(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.2\ := (others => '0');
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num2\ := to_unsigned(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.0\ := false;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.positBits\ := to_unsigned(0, 32);
            else 
                case \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ is 
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Started\ = true) then 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Started\ = true) then 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Finished\ <= true;
                        else 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Finished\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint bits;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = memory.ReadUInt32 (1);
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits\ := ConvertStdLogicVectorToUInt32(\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint bits2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits2 = memory.ReadUInt32 (2);
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_6\ => 
                        -- Begin SimpleMemory read.
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(2, 32);
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_7\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.2\ := \DataIn\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits2\ := ConvertStdLogicVectorToUInt32(\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.dataIn.2\);
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 posit;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- posit = new Posit32 (bits, true);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\.\IsNull\ := false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\.\PositBits\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 posit2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- posit2 = new Posit32 (bits2, true);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit2\.\IsNull\ := false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit2\.\PositBits\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_9\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_10\ => 
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit2\;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.bits2\;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_11\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit2\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0u;
                            -- 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num2\ := to_unsigned(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((long)(num2) < (long)(num)) {
                            -- 	posit = Posit32.op_Division (posit, posit2);
                            -- 	num2 = (uint)((long)(num2) + 1L);
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_12\ => 
                        -- Repeated state of the while loop which was started in state \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_11\.
                        -- The while loop's condition:
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.0\ := signed(SmartResize((\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num2\), 64)) < SmartResize((\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num\), 64);
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	posit = Posit32.op_Division (posit, posit2);
                            -- 	num2 = (uint)((long)(num2) + 1L);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- posit = Posit32.op_Division (posit, posit2);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32)
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).left.parameter.Out.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).right.parameter.Out.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit2\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Started.0\ <= true;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_14\;
                        else 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_13\ => 
                        -- State after the while loop which was started in state \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint positBits;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- positBits = posit.PositBits;
                        -- 
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.positBits\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteUInt32 (0, positBits);
                        -- 
                        -- Begin SimpleMemory write.
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.positBits\);
                        \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32)
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Started.0\ = \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Finished.0\) then 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Started.0\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.return.0\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).return.0\;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.posit\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (uint)((long)(num2) + 1L);
                            -- 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num2\), 64)) + to_signed(1, 64)), 32);
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.num2\ := (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.binaryOperationResult.1\);
                            -- Returning to the repeated state of the while loop which was started in state \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_11\ if the loop wasn't exited with a state change.
                            if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ = \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_14\) then 
                                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_12\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_15\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\: \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._States\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_0\;
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.return.0\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Finished\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Started.0\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_0\;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num\ := to_unsigned(0, 32);
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.0\ := (others => '0');
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\ := to_signed(0, 32);
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.0\ := false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.1\ := (others => '0');
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
            else 
                case \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ is 
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Started\ = true) then 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Started\ = true) then 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Finished\ <= true;
                        else 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Finished\ <= false;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadUInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num\ := ConvertStdLogicVectorToUInt32(\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((long)(num2) < (long)(num)) {
                            -- 	Posit32 object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1;
                            -- 	object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1 = new Posit32 (memory.ReadUInt32 (1 + num2), true);
                            -- 	memory.WriteUInt32 (num2, Posit32.Sqrt (object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1).PositBits);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_4\ => 
                        -- Repeated state of the while loop which was started in state \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.0\ := SmartResize((\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\), 64) < signed(SmartResize((\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num\), 64));
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Posit32 object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1;
                            -- 	object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1 = new Posit32 (memory.ReadUInt32 (1 + num2), true);
                            -- 	memory.WriteUInt32 (num2, Posit32.Sqrt (object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1).PositBits);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1 = new Posit32 (memory.ReadUInt32 (1 + num2), true);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1\.\IsNull\ := false;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1\.\PositBits\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.1\ := to_signed(1, 32) + \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\;
                            -- Begin SimpleMemory read.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.1\;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_6\;
                        else 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.616
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_5\ => 
                        -- State after the while loop which was started in state \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_3\.
                        \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_6\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1\;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= ConvertStdLogicVectorToUInt32(\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.dataIn.1\);
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (num2, Posit32.Sqrt (object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1).PositBits);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32)
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32).number.parameter.Out.0\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.object6434d21195412ae158987bd9cdccfe493d44c74595a9237f23e28b251068c3c1\;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Started.0\ <= true;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32)
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Started.0\ = \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Finished.0\) then 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Started.0\ <= false;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.return.0\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32).return.0\;
                            -- Begin SimpleMemory write.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.return.0\.\PositBits\);
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_9\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.2\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\ + to_signed(1, 32);
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.num2\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.binaryOperationResult.2\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ = \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_9\) then 
                                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State\ := \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 state machine start
    \Posit32::.ctor(UInt32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(UInt32,Boolean).0._State\: \Posit32::.ctor(UInt32,Boolean).0._States\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
        Variable \Posit32::.ctor(UInt32,Boolean).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(UInt32,Boolean).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\: boolean := false;
        Variable \Posit32::.ctor(UInt32,Boolean).0.conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= false;
                \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
                \Posit32::.ctor(UInt32,Boolean).0.bits\ := to_unsigned(0, 32);
                \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\ := false;
                \Posit32::.ctor(UInt32,Boolean).0.conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(UInt32,Boolean).0._State\ is 
                    when \Posit32::.ctor(UInt32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(UInt32,Boolean).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(UInt32,Boolean).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= false;
                            \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\ <= \Posit32::.ctor(UInt32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32,Boolean).0._State_2\ => 
                        \Posit32::.ctor(UInt32,Boolean).0.this\ := \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\;
                        \Posit32::.ctor(UInt32,Boolean).0.bits\ := \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\;
                        \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\ := \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6 = bits;
                        -- 
                        \Posit32::.ctor(UInt32,Boolean).0.conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6\ := \Posit32::.ctor(UInt32,Boolean).0.bits\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = (conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6);
                        -- 
                        \Posit32::.ctor(UInt32,Boolean).0.this\.\PositBits\ := (\Posit32::.ctor(UInt32,Boolean).0.conditional07306ef17ce6eacdbdd521687c7db8bbabd2dc9ca02b65fce7cdbd581ebb7be6\);
                        \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 state machine start
    \Posit32::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(UInt32).0._State\: \Posit32::.ctor(UInt32).0._States\ := \Posit32::.ctor(UInt32).0._State_0\;
        Variable \Posit32::.ctor(UInt32).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(UInt32).0.value\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(UInt32).0._Finished\ <= false;
                \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_0\;
                \Posit32::.ctor(UInt32).0.value\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(UInt32).0._State\ is 
                    when \Posit32::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(UInt32).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(UInt32).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(UInt32).0._Finished\ <= false;
                            \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(UInt32).0.this.parameter.Out\ <= \Posit32::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32).0._State_2\ => 
                        \Posit32::.ctor(UInt32).0.this\ := \Posit32::.ctor(UInt32).0.this.parameter.In\;
                        \Posit32::.ctor(UInt32).0.value\ := \Posit32::.ctor(UInt32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 0u;
                        -- 
                        \Posit32::.ctor(UInt32).0.this\.\PositBits\ := to_unsigned(0, 32);
                        \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 state machine start
    \Posit32::.ctor(Int32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(Int32).0._State\: \Posit32::.ctor(Int32).0._States\ := \Posit32::.ctor(Int32).0._State_0\;
        Variable \Posit32::.ctor(Int32).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(Int32).0.value\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Int32).0.conditional68968a9a6392defd6e5a3b182fa4434bc81f526716f6e55de1b9cb4711133f48\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Int32).0.object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2\: \Lombiq.Arithmetics.Posit32\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(Int32).0._Finished\ <= false;
                \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_0\;
                \Posit32::.ctor(Int32).0.value\ := to_signed(0, 32);
                \Posit32::.ctor(Int32).0.conditional68968a9a6392defd6e5a3b182fa4434bc81f526716f6e55de1b9cb4711133f48\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(Int32).0._State\ is 
                    when \Posit32::.ctor(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(Int32).0._Started\ = true) then 
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(Int32).0._Started\ = true) then 
                            \Posit32::.ctor(Int32).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(Int32).0._Finished\ <= false;
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(Int32).0.this.parameter.Out\ <= \Posit32::.ctor(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_2\ => 
                        \Posit32::.ctor(Int32).0.this\ := \Posit32::.ctor(Int32).0.this.parameter.In\;
                        \Posit32::.ctor(Int32).0.value\ := \Posit32::.ctor(Int32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional68968a9a6392defd6e5a3b182fa4434bc81f526716f6e55de1b9cb4711133f48;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2 = new Posit32 (0u);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::.ctor(Int32).0.object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2\.\IsNull\ := false;
                        \Posit32::.ctor(Int32).0.object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32)
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\ <= \Posit32::.ctor(Int32).0.object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2\;
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\ <= to_unsigned(0, 32);
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= true;
                        \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32)
                        if (\Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ = \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Int32).0.object333ff0d0dd85e50d2c95be675373bf374482e68f690fd047fd1bd29354833ec2\ := \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- conditional68968a9a6392defd6e5a3b182fa4434bc81f526716f6e55de1b9cb4711133f48 = 0u;
                            -- 
                            \Posit32::.ctor(Int32).0.conditional68968a9a6392defd6e5a3b182fa4434bc81f526716f6e55de1b9cb4711133f48\ := to_unsigned(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- @this.PositBits = 0u;
                            -- 
                            \Posit32::.ctor(Int32).0.this\.\PositBits\ := to_unsigned(0, 32);
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 state machine end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().0 state machine start
    \Posit32::IsPositive().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::IsPositive().0._State\: \Posit32::IsPositive().0._States\ := \Posit32::IsPositive().0._State_0\;
        Variable \Posit32::IsPositive().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::IsPositive().0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::IsPositive().0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::IsPositive().0._Finished\ <= false;
                \Posit32::IsPositive().0.return\ <= false;
                \Posit32::IsPositive().0._State\ := \Posit32::IsPositive().0._State_0\;
                \Posit32::IsPositive().0.binaryOperationResult.0\ := to_signed(0, 64);
                \Posit32::IsPositive().0.binaryOperationResult.1\ := false;
            else 
                case \Posit32::IsPositive().0._State\ is 
                    when \Posit32::IsPositive().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::IsPositive().0._Started\ = true) then 
                            \Posit32::IsPositive().0._State\ := \Posit32::IsPositive().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsPositive().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::IsPositive().0._Started\ = true) then 
                            \Posit32::IsPositive().0._Finished\ <= true;
                        else 
                            \Posit32::IsPositive().0._Finished\ <= false;
                            \Posit32::IsPositive().0._State\ := \Posit32::IsPositive().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsPositive().0._State_2\ => 
                        \Posit32::IsPositive().0.this\ := \Posit32::IsPositive().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)((@this.PositBits & 0x80000000u)) == 0L;
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::IsPositive().0.binaryOperationResult.0\ := signed(SmartResize(\Posit32::IsPositive().0.this\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Posit32::IsPositive().0.binaryOperationResult.1\ := signed(SmartResize(((\Posit32::IsPositive().0.binaryOperationResult.0\)), 64)) = to_signed(0, 64);
                        \Posit32::IsPositive().0.return\ <= \Posit32::IsPositive().0.binaryOperationResult.1\;
                        \Posit32::IsPositive().0._State\ := \Posit32::IsPositive().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().0 state machine end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 state machine start
    \Posit32::IsNaN().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::IsNaN().0._State\: \Posit32::IsNaN().0._States\ := \Posit32::IsNaN().0._State_0\;
        Variable \Posit32::IsNaN().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::IsNaN().0.binaryOperationResult.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::IsNaN().0._Finished\ <= false;
                \Posit32::IsNaN().0.return\ <= false;
                \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_0\;
                \Posit32::IsNaN().0.binaryOperationResult.0\ := false;
            else 
                case \Posit32::IsNaN().0._State\ is 
                    when \Posit32::IsNaN().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::IsNaN().0._Started\ = true) then 
                            \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsNaN().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::IsNaN().0._Started\ = true) then 
                            \Posit32::IsNaN().0._Finished\ <= true;
                        else 
                            \Posit32::IsNaN().0._Finished\ <= false;
                            \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsNaN().0._State_2\ => 
                        \Posit32::IsNaN().0.this\ := \Posit32::IsNaN().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return @this.PositBits == 2147483648u;
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::IsNaN().0.binaryOperationResult.0\ := \Posit32::IsNaN().0.this\.\PositBits\ = "10000000000000000000000000000000";
                        \Posit32::IsNaN().0.return\ <= \Posit32::IsNaN().0.binaryOperationResult.0\;
                        \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 state machine end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsZero().0 state machine start
    \Posit32::IsZero().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::IsZero().0._State\: \Posit32::IsZero().0._States\ := \Posit32::IsZero().0._State_0\;
        Variable \Posit32::IsZero().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::IsZero().0.binaryOperationResult.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::IsZero().0._Finished\ <= false;
                \Posit32::IsZero().0.return\ <= false;
                \Posit32::IsZero().0._State\ := \Posit32::IsZero().0._State_0\;
                \Posit32::IsZero().0.binaryOperationResult.0\ := false;
            else 
                case \Posit32::IsZero().0._State\ is 
                    when \Posit32::IsZero().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::IsZero().0._Started\ = true) then 
                            \Posit32::IsZero().0._State\ := \Posit32::IsZero().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsZero().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::IsZero().0._Started\ = true) then 
                            \Posit32::IsZero().0._Finished\ <= true;
                        else 
                            \Posit32::IsZero().0._Finished\ <= false;
                            \Posit32::IsZero().0._State\ := \Posit32::IsZero().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsZero().0._State_2\ => 
                        \Posit32::IsZero().0.this\ := \Posit32::IsZero().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(@this.PositBits) == 0L;
                        -- 
                        \Posit32::IsZero().0.binaryOperationResult.0\ := signed(SmartResize((\Posit32::IsZero().0.this\.\PositBits\), 64)) = to_signed(0, 64);
                        \Posit32::IsZero().0.return\ <= \Posit32::IsZero().0.binaryOperationResult.0\;
                        \Posit32::IsZero().0._State\ := \Posit32::IsZero().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsZero().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 state machine start
    \Posit32::EncodeRegimeBits(Int32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::EncodeRegimeBits(Int32).0._State\: \Posit32::EncodeRegimeBits(Int32).0._States\ := \Posit32::EncodeRegimeBits(Int32).0._State_0\;
        Variable \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::EncodeRegimeBits(Int32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::EncodeRegimeBits(Int32).0._Finished\ <= false;
                \Posit32::EncodeRegimeBits(Int32).0.return\ <= to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_0\;
                \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\ := false;
                \Posit32::EncodeRegimeBits(Int32).0.num\ := to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.return.0\ := to_unsigned(0, 8);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\ := to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\ := to_unsigned(0, 32);
            else 
                case \Posit32::EncodeRegimeBits(Int32).0._State\ is 
                    when \Posit32::EncodeRegimeBits(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::EncodeRegimeBits(Int32).0._Started\ = true) then 
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::EncodeRegimeBits(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::EncodeRegimeBits(Int32).0._Started\ = true) then 
                            \Posit32::EncodeRegimeBits(Int32).0._Finished\ <= true;
                        else 
                            \Posit32::EncodeRegimeBits(Int32).0._Finished\ <= false;
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::EncodeRegimeBits(Int32).0._State_2\ => 
                        \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ := \Posit32::EncodeRegimeBits(Int32).0.regimeKValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (regimeKValue > 0) {
                        -- 	uint num;
                        -- 	num = (uint)((1 << regimeKValue + 1) - 1);
                        -- 	return num << 32 - (int)(Posit32.GetMostSignificantOnePosition (num)) - 1;
                        -- }
                        -- 
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\ := \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::EncodeRegimeBits(Int32).0._State_4\ and ends in state \Posit32::EncodeRegimeBits(Int32).0._State_7\.
                        --     * Execution after either branch will continue in the following state: \Posit32::EncodeRegimeBits(Int32).0._State_3\.

                        if (\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\) then 
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::EncodeRegimeBits(Int32).0._State_3\ => 
                        -- State after the if-else which was started in state \Posit32::EncodeRegimeBits(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return 1073741824u >> -regimeKValue;
                        -- 
                        \Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\ := -\Posit32::EncodeRegimeBits(Int32).0.regimeKValue\;
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\ := shift_right(to_unsigned(1073741824, 32), to_integer(unsigned(SmartResize(\Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\, 5) and "11111")));
                        \Posit32::EncodeRegimeBits(Int32).0.return\ <= \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\;
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::EncodeRegimeBits(Int32).0._State_4\ => 
                        -- True branch of the if-else started in state \Posit32::EncodeRegimeBits(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint num;
                        -- 	num = (uint)((1 << regimeKValue + 1) - 1);
                        -- 	return num << 32 - (int)(Posit32.GetMostSignificantOnePosition (num)) - 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)((1 << regimeKValue + 1) - 1);
                        -- 
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\ := \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ + to_signed(1, 32);
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\, 5))));
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::EncodeRegimeBits(Int32).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\ := unsigned((\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\) - to_signed(1, 32));
                        \Posit32::EncodeRegimeBits(Int32).0.num\ := (\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num << 32 - (int)(Posit32.GetMostSignificantOnePosition (num)) - 1;
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= \Posit32::EncodeRegimeBits(Int32).0.num\;
                        \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= true;
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::EncodeRegimeBits(Int32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        if (\Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\) then 
                            \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                            \Posit32::EncodeRegimeBits(Int32).0.return.0\ := \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\;
                            \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\ := to_signed(32, 32) - signed(SmartResize((\Posit32::EncodeRegimeBits(Int32).0.return.0\), 32));
                            \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\ := \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\ - to_signed(1, 32);
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32::EncodeRegimeBits(Int32).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\ := shift_left(\Posit32::EncodeRegimeBits(Int32).0.num\, to_integer(unsigned(SmartResize(\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\, 5))));
                        \Posit32::EncodeRegimeBits(Int32).0.return\ <= \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\;
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::EncodeRegimeBits(Int32).0._State_2\.
                        if (\Posit32::EncodeRegimeBits(Int32).0._State\ = \Posit32::EncodeRegimeBits(Int32).0._State_7\) then 
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 state machine start
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._States\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\ <= to_unsigned(0, 16);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\ := to_signed(0, 64);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\ := to_unsigned(0, 32);
            else 
                case \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ is 
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ = true) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ = true) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\ => 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Posit32.EncodeRegimeBits (regimeKValue);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = Posit32.LengthOfRunOfBits (num, 31);
                            -- 
                            -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (int)(28 - (int)(b));
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\ := to_signed(28, 32) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\), 32));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if ((num2 >= 0)) {
                            -- 	conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd = (exponentBits << num2);
                            -- } else {
                            -- 	conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd = (exponentBits >> -num2);
                            -- }
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ >= to_signed(0, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\.
                            --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.

                            if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\)) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\;
                            else 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num2 < 0) {
                        -- 	uint conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8;
                        -- 	if ((num2 > 28)) {
                        -- 		conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits >> 32 + num2);
                        -- 	} else {
                        -- 		conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits << 32 + num2);
                        -- 	}
                        -- 	exponentBits = (conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8);
                        -- 	if (exponentBits < 2147483648u) {
                        -- 		if (!signBit) {
                        -- 			return num;
                        -- 		}
                        -- 		return Posit32.GetTwosComplement (num);
                        -- 	}
                        -- 	uint conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17;
                        -- 	if ((exponentBits != 2147483648u)) {
                        -- 		conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + 1L));
                        -- 	} else {
                        -- 		conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 	}
                        -- 	num = (conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17);
                        -- 	if (!signBit) {
                        -- 		return num;
                        -- 	}
                        -- 	return Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd = (exponentBits << num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd = (exponentBits << num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd = (exponentBits >> -num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd = (exponentBits >> -num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional868563b4180708b9660d6d32f38c8cc9cb67d3e19896d031f2cf10d5f9ca87fd\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (int)((int)(Posit32.GetMostSignificantOnePosition (fractionBits)) - 1);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8;
                        -- 	if ((num2 > 28)) {
                        -- 		conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits >> 32 + num2);
                        -- 	} else {
                        -- 		conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits << 32 + num2);
                        -- 	}
                        -- 	exponentBits = (conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8);
                        -- 	if (exponentBits < 2147483648u) {
                        -- 		if (!signBit) {
                        -- 			return num;
                        -- 		}
                        -- 		return Posit32.GetTwosComplement (num);
                        -- 	}
                        -- 	uint conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17;
                        -- 	if ((exponentBits != 2147483648u)) {
                        -- 		conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + 1L));
                        -- 	} else {
                        -- 		conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 	}
                        -- 	num = (conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17);
                        -- 	if (!signBit) {
                        -- 		return num;
                        -- 	}
                        -- 	return Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num2 > 28)) {
                        -- 	conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits >> 32 + num2);
                        -- } else {
                        -- 	conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits << 32 + num2);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ > to_signed(28, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- exponentBits = (conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (exponentBits < 2147483648u) {
                        -- 	if (!signBit) {
                        -- 		return num;
                        -- 	}
                        -- 	return Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ < "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits >> 32 + num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits >> 32 + num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits << 32 + num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8 = (exponentBits << 32 + num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8295bca3ac0923e1a3dda84b20deb6e6bbc1c9d2803e0ca14d28f4e730736ee8\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((exponentBits != 2147483648u)) {
                        -- 	conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + 1L));
                        -- } else {
                        -- 	conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ /= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	if (!signBit) {
                        -- 		return num;
                        -- 	}
                        -- 	return Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (!signBit) {
                        -- 	return num;
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\ := not(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- return Posit32.GetTwosComplement (num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                            -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                            if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (!signBit) {
                        -- 	return num;
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\ := not(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + 1L));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + 1L));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) and to_signed(1, 64);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional19aae053b436c08c51a53f1b13657324aeef7836cb9dec5c6a1289a93ee0cb17\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5632
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.
                        -- The following section was transformed from the .NET statement below:
                        -- return Posit32.GetTwosComplement (num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                            -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.
                            if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\), 32)) - to_signed(1, 32);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\);
                            -- The following section was transformed from the .NET statement below:
                            -- fractionBits = Posit32.SetZero (fractionBits, (ushort)num3);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16)
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\ <= SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\), 16);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ <= true;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (int)((int)(28 - num3) - (int)(b));
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ := to_signed(28, 32) - \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\), 32));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if ((num4 >= 0)) {
                            -- 	conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e = (fractionBits << num4);
                            -- } else {
                            -- 	conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e = (fractionBits >> -num4);
                            -- }
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ >= to_signed(0, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                            --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                            --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\.

                            if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\)) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\;
                            else 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 0) {
                        -- 	uint conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262;
                        -- 	if ((32 + num4 < 0)) {
                        -- 		conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits >> -(32 - num4));
                        -- 	} else {
                        -- 		conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits << 32 + num4);
                        -- 	}
                        -- 	fractionBits = (conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262);
                        -- 	if (fractionBits >= 2147483648u) {
                        -- 		uint conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3;
                        -- 		if ((fractionBits != 2147483648u)) {
                        -- 			conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- 		} else {
                        -- 			conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- 		}
                        -- 		num = num + (conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3);
                        -- 	}
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e = (fractionBits << num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e = (fractionBits << num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e = (fractionBits >> -num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e = (fractionBits >> -num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional56a5222293f255f5cc8a9d39f8a013c7a78fa63482ef9941b5abe8c37a72618e\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\.
                        -- The following section was transformed from the .NET statement below:
                        -- if (!signBit) {
                        -- 	return num;
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\ := not(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262;
                        -- 	if ((32 + num4 < 0)) {
                        -- 		conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits >> -(32 - num4));
                        -- 	} else {
                        -- 		conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits << 32 + num4);
                        -- 	}
                        -- 	fractionBits = (conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262);
                        -- 	if (fractionBits >= 2147483648u) {
                        -- 		uint conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3;
                        -- 		if ((fractionBits != 2147483648u)) {
                        -- 			conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- 		} else {
                        -- 			conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- 		}
                        -- 		num = num + (conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3);
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((32 + num4 < 0)) {
                        -- 	conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits >> -(32 - num4));
                        -- } else {
                        -- 	conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits << 32 + num4);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                        -- The following section was transformed from the .NET statement below:
                        -- fractionBits = (conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (fractionBits >= 2147483648u) {
                        -- 	uint conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3;
                        -- 	if ((fractionBits != 2147483648u)) {
                        -- 		conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- 	} else {
                        -- 		conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- 	}
                        -- 	num = num + (conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3);
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ >= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits >> -(32 - num4));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits >> -(32 - num4));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\ := to_signed(32, 32) - \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\ := -(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0.6382
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits << 32 + num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262 = (fractionBits << 32 + num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional20ff3688b380494ade4e88816f628236a3f23549f4e214d4192840cc97b94262\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3;
                        -- 	if ((fractionBits != 2147483648u)) {
                        -- 		conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- 	} else {
                        -- 		conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- 	}
                        -- 	num = num + (conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((fractionBits != 2147483648u)) {
                        -- 	conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- } else {
                        -- 	conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ /= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = 1;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3\ := unsigned(to_signed(1, 32));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3 = ((uint)((long)(num) & 1L));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) and to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditionala17c4216599b51f534dd4b55c109c0bbf654ea2802c8c0d903f2ddee49c561e3\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\.
                        -- The following section was transformed from the .NET statement below:
                        -- return Posit32.GetTwosComplement (num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 state machine end


    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 state machine start
    \Posit32::GetRegimeKValue().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetRegimeKValue().0._State\: \Posit32::GetRegimeKValue().0._States\ := \Posit32::GetRegimeKValue().0._State_0\;
        Variable \Posit32::GetRegimeKValue().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::GetRegimeKValue().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetRegimeKValue().0.conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetRegimeKValue().0.return.0\: boolean := false;
        Variable \Posit32::GetRegimeKValue().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetRegimeKValue().0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetRegimeKValue().0.return.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetRegimeKValue().0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::GetRegimeKValue().0.binaryOperationResult.1\: boolean := false;
        Variable \Posit32::GetRegimeKValue().0.binaryOperationResult.2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::GetRegimeKValue().0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetRegimeKValue().0._Finished\ <= false;
                \Posit32::GetRegimeKValue().0.return\ <= to_signed(0, 8);
                \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\ <= false;
                \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_0\;
                \Posit32::GetRegimeKValue().0.num\ := to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37\ := to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.return.0\ := false;
                \Posit32::GetRegimeKValue().0.return.1\ := to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.b\ := to_unsigned(0, 8);
                \Posit32::GetRegimeKValue().0.return.2\ := to_unsigned(0, 8);
                \Posit32::GetRegimeKValue().0.binaryOperationResult.0\ := to_signed(0, 64);
                \Posit32::GetRegimeKValue().0.binaryOperationResult.1\ := false;
                \Posit32::GetRegimeKValue().0.binaryOperationResult.2\ := to_signed(0, 8);
                \Posit32::GetRegimeKValue().0.unaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \Posit32::GetRegimeKValue().0._State\ is 
                    when \Posit32::GetRegimeKValue().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetRegimeKValue().0._Started\ = true) then 
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetRegimeKValue().0._Started\ = true) then 
                            \Posit32::GetRegimeKValue().0._Finished\ <= true;
                        else 
                            \Posit32::GetRegimeKValue().0._Finished\ <= false;
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_2\ => 
                        \Posit32::GetRegimeKValue().0.this\ := \Posit32::GetRegimeKValue().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsPositive (@this)) {
                        -- 	conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37 = @this.PositBits;
                        -- } else {
                        -- 	conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32::GetRegimeKValue().0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32::GetRegimeKValue().0.this\;
                        \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\ = \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32::GetRegimeKValue().0.return.0\ := \Posit32::GetRegimeKValue().0.Posit32::IsPositive().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::GetRegimeKValue().0._State_5\ and ends in state \Posit32::GetRegimeKValue().0._State_5\.
                            --     * The false branch starts in state \Posit32::GetRegimeKValue().0._State_6\ and ends in state \Posit32::GetRegimeKValue().0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::GetRegimeKValue().0._State_4\.

                            if (\Posit32::GetRegimeKValue().0.return.0\) then 
                                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_5\;
                            else 
                                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::GetRegimeKValue().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37);
                        -- 
                        \Posit32::GetRegimeKValue().0.num\ := (\Posit32::GetRegimeKValue().0.conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37\);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = Posit32.LengthOfRunOfBits (num, 31);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= \Posit32::GetRegimeKValue().0.num\;
                        \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::GetRegimeKValue().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37 = @this.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37 = @this.PositBits;
                        -- 
                        \Posit32::GetRegimeKValue().0.conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37\ := \Posit32::GetRegimeKValue().0.this\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Posit32::GetRegimeKValue().0._State_3\.
                        if (\Posit32::GetRegimeKValue().0._State\ = \Posit32::GetRegimeKValue().0._State_5\) then 
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_6\ => 
                        -- False branch of the if-else started in state \Posit32::GetRegimeKValue().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37 = Posit32.GetTwosComplement (@this.PositBits);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::GetRegimeKValue().0.this\.\PositBits\;
                        \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::GetRegimeKValue().0.return.1\ := \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::GetRegimeKValue().0.conditional061ed0434b424f6c3ba9530616823fbf2bde27b067c7ed59284d03a092cade37\ := \Posit32::GetRegimeKValue().0.return.1\;
                            -- Going to the state after the if-else which was started in state \Posit32::GetRegimeKValue().0._State_3\.
                            if (\Posit32::GetRegimeKValue().0._State\ = \Posit32::GetRegimeKValue().0._State_7\) then 
                                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::GetRegimeKValue().0.return.2\ := \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::GetRegimeKValue().0.b\ := \Posit32::GetRegimeKValue().0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- if ((long)((num & 0x40000000u)) != 0L) {
                            -- 	return (sbyte)((int)(b) - 1);
                            -- }
                            -- 
                            \Posit32::GetRegimeKValue().0.binaryOperationResult.0\ := signed(SmartResize(\Posit32::GetRegimeKValue().0.num\ and to_unsigned(1073741824, 32), 64));
                            \Posit32::GetRegimeKValue().0.binaryOperationResult.1\ := signed(SmartResize(((\Posit32::GetRegimeKValue().0.binaryOperationResult.0\)), 64)) /= to_signed(0, 64);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::GetRegimeKValue().0._State_10\ and ends in state \Posit32::GetRegimeKValue().0._State_10\.
                            --     * Execution after either branch will continue in the following state: \Posit32::GetRegimeKValue().0._State_9\.

                            if (\Posit32::GetRegimeKValue().0.binaryOperationResult.1\) then 
                                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_10\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_9\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Posit32::GetRegimeKValue().0._State_9\ => 
                        -- State after the if-else which was started in state \Posit32::GetRegimeKValue().0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- return (sbyte)(-(int)(b));
                        -- 
                        \Posit32::GetRegimeKValue().0.unaryOperationResult.0\ := -signed(SmartResize((\Posit32::GetRegimeKValue().0.b\), 32));
                        \Posit32::GetRegimeKValue().0.return\ <= SmartResize((\Posit32::GetRegimeKValue().0.unaryOperationResult.0\), 8);
                        \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \Posit32::GetRegimeKValue().0._State_10\ => 
                        -- True branch of the if-else started in state \Posit32::GetRegimeKValue().0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return (sbyte)((int)(b) - 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return (sbyte)((int)(b) - 1);
                        -- 
                        \Posit32::GetRegimeKValue().0.binaryOperationResult.2\ := SmartResize(signed(SmartResize((\Posit32::GetRegimeKValue().0.b\), 32)) - to_signed(1, 32), 8);
                        \Posit32::GetRegimeKValue().0.return\ <= (\Posit32::GetRegimeKValue().0.binaryOperationResult.2\);
                        \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::GetRegimeKValue().0._State_8\.
                        if (\Posit32::GetRegimeKValue().0._State\ = \Posit32::GetRegimeKValue().0._State_10\) then 
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 state machine end


    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 state machine start
    \Posit32::CalculateScaleFactor().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::CalculateScaleFactor().0._State\: \Posit32::CalculateScaleFactor().0._States\ := \Posit32::CalculateScaleFactor().0._State_0\;
        Variable \Posit32::CalculateScaleFactor().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::CalculateScaleFactor().0.regimeKValue\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::CalculateScaleFactor().0.return.0\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::CalculateScaleFactor().0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::CalculateScaleFactor().0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::CalculateScaleFactor().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::CalculateScaleFactor().0.binaryOperationResult.2\: signed(15 downto 0) := to_signed(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::CalculateScaleFactor().0._Finished\ <= false;
                \Posit32::CalculateScaleFactor().0.return\ <= to_signed(0, 16);
                \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ <= false;
                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_0\;
                \Posit32::CalculateScaleFactor().0.regimeKValue\ := to_signed(0, 8);
                \Posit32::CalculateScaleFactor().0.return.0\ := to_signed(0, 8);
                \Posit32::CalculateScaleFactor().0.binaryOperationResult.0\ := false;
                \Posit32::CalculateScaleFactor().0.binaryOperationResult.1\ := to_signed(0, 64);
                \Posit32::CalculateScaleFactor().0.return.1\ := to_unsigned(0, 32);
                \Posit32::CalculateScaleFactor().0.binaryOperationResult.2\ := to_signed(0, 16);
            else 
                case \Posit32::CalculateScaleFactor().0._State\ is 
                    when \Posit32::CalculateScaleFactor().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::CalculateScaleFactor().0._Started\ = true) then 
                            \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::CalculateScaleFactor().0._Started\ = true) then 
                            \Posit32::CalculateScaleFactor().0._Finished\ <= true;
                        else 
                            \Posit32::CalculateScaleFactor().0._Finished\ <= false;
                            \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_2\ => 
                        \Posit32::CalculateScaleFactor().0.this\ := \Posit32::CalculateScaleFactor().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte regimeKValue;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- regimeKValue = Lombiq.Arithmetics.Posit32.GetRegimeKValue (@this);
                        -- 
                        -- Starting state machine invocation for the following method: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                        \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().this.parameter.Out.0\ <= \Posit32::CalculateScaleFactor().0.this\;
                        \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ <= true;
                        \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ = \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\) then 
                            \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                            \Posit32::CalculateScaleFactor().0.return.0\ := \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().return.0\;
                            \Posit32::CalculateScaleFactor().0.regimeKValue\ := \Posit32::CalculateScaleFactor().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- if ((int)(regimeKValue) != -31) {
                            -- 	return (short)((long)((int)(regimeKValue) * 4) + (long)(Lombiq.Arithmetics.Posit32.GetExponentValue (@this)));
                            -- }
                            -- 
                            \Posit32::CalculateScaleFactor().0.binaryOperationResult.0\ := SmartResize((\Posit32::CalculateScaleFactor().0.regimeKValue\), 32) /= to_signed(-31, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::CalculateScaleFactor().0._State_5\ and ends in state \Posit32::CalculateScaleFactor().0._State_6\.
                            --     * Execution after either branch will continue in the following state: \Posit32::CalculateScaleFactor().0._State_4\.

                            if (\Posit32::CalculateScaleFactor().0.binaryOperationResult.0\) then 
                                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_5\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::CalculateScaleFactor().0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::CalculateScaleFactor().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- return 0;
                        -- 
                        \Posit32::CalculateScaleFactor().0.return\ <= SmartResize(to_signed(0, 32), 16);
                        \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::CalculateScaleFactor().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return (short)((long)((int)(regimeKValue) * 4) + (long)(Lombiq.Arithmetics.Posit32.GetExponentValue (@this)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return (short)((long)((int)(regimeKValue) * 4) + (long)(Lombiq.Arithmetics.Posit32.GetExponentValue (@this)));
                        -- 
                        \Posit32::CalculateScaleFactor().0.binaryOperationResult.1\ := SmartResize(SmartResize((\Posit32::CalculateScaleFactor().0.regimeKValue\), 32) * to_signed(4, 32), 64);
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                        \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().this.parameter.Out.0\ <= \Posit32::CalculateScaleFactor().0.this\;
                        \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ <= true;
                        \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.1221
                    when \Posit32::CalculateScaleFactor().0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ = \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\) then 
                            \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ <= false;
                            \Posit32::CalculateScaleFactor().0.return.1\ := \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().return.0\;
                            \Posit32::CalculateScaleFactor().0.binaryOperationResult.2\ := SmartResize((\Posit32::CalculateScaleFactor().0.binaryOperationResult.1\) + signed(SmartResize((\Posit32::CalculateScaleFactor().0.return.1\), 64)), 16);
                            \Posit32::CalculateScaleFactor().0.return\ <= (\Posit32::CalculateScaleFactor().0.binaryOperationResult.2\);
                            \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_1\;
                            -- Going to the state after the if-else which was started in state \Posit32::CalculateScaleFactor().0._State_3\.
                            if (\Posit32::CalculateScaleFactor().0._State\ = \Posit32::CalculateScaleFactor().0._State_6\) then 
                                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                end case;
            end if;
        end if;
    end process;
    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 state machine start
    \Posit32::ExponentSize().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::ExponentSize().0._State\: \Posit32::ExponentSize().0._States\ := \Posit32::ExponentSize().0._State_0\;
        Variable \Posit32::ExponentSize().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::ExponentSize().0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::ExponentSize().0.return.0\: boolean := false;
        Variable \Posit32::ExponentSize().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::ExponentSize().0.return.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.result\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.1\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.3\: boolean := false;
        Variable \Posit32::ExponentSize().0.conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32::ExponentSize().0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.8\: unsigned(7 downto 0) := to_unsigned(0, 8);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::ExponentSize().0._Finished\ <= false;
                \Posit32::ExponentSize().0.return\ <= to_unsigned(0, 8);
                \Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\ <= false;
                \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_0\;
                \Posit32::ExponentSize().0.b\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8\ := to_unsigned(0, 32);
                \Posit32::ExponentSize().0.return.0\ := false;
                \Posit32::ExponentSize().0.return.1\ := to_unsigned(0, 32);
                \Posit32::ExponentSize().0.return.2\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.result\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.1\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.3\ := false;
                \Posit32::ExponentSize().0.conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.4\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.6\ := false;
                \Posit32::ExponentSize().0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.8\ := to_unsigned(0, 8);
            else 
                case \Posit32::ExponentSize().0._State\ is 
                    when \Posit32::ExponentSize().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::ExponentSize().0._Started\ = true) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::ExponentSize().0._Started\ = true) then 
                            \Posit32::ExponentSize().0._Finished\ <= true;
                        else 
                            \Posit32::ExponentSize().0._Finished\ <= false;
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_2\ => 
                        \Posit32::ExponentSize().0.this\ := \Posit32::ExponentSize().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsPositive (@this)) {
                        -- 	conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8 = @this.PositBits;
                        -- } else {
                        -- 	conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32::ExponentSize().0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32::ExponentSize().0.this\;
                        \Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\ = \Posit32::ExponentSize().0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32::ExponentSize().0.return.0\ := \Posit32::ExponentSize().0.Posit32::IsPositive().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::ExponentSize().0._State_5\ and ends in state \Posit32::ExponentSize().0._State_5\.
                            --     * The false branch starts in state \Posit32::ExponentSize().0._State_6\ and ends in state \Posit32::ExponentSize().0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::ExponentSize().0._State_4\.

                            if (\Posit32::ExponentSize().0.return.0\) then 
                                \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_5\;
                            else 
                                \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::ExponentSize().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- b = Posit32.LengthOfRunOfBits (conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8, 31);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= \Posit32::ExponentSize().0.conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8\;
                        \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::ExponentSize().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8 = @this.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8 = @this.PositBits;
                        -- 
                        \Posit32::ExponentSize().0.conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8\ := \Posit32::ExponentSize().0.this\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_3\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_5\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_6\ => 
                        -- False branch of the if-else started in state \Posit32::ExponentSize().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8 = Posit32.GetTwosComplement (@this.PositBits);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::ExponentSize().0.this\.\PositBits\;
                        \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::ExponentSize().0.return.1\ := \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::ExponentSize().0.conditional467396ff97f9ede014a75b3c27a4702c8a22fcb58695884fa249a60a39eedea8\ := \Posit32::ExponentSize().0.return.1\;
                            -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_3\.
                            if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_7\) then 
                                \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::ExponentSize().0.return.2\ := \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::ExponentSize().0.b\ := \Posit32::ExponentSize().0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte result;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- result = (byte)(32 - (int)(b) - 1);
                            -- 
                            \Posit32::ExponentSize().0.binaryOperationResult.0\ := to_signed(32, 32) - signed(SmartResize((\Posit32::ExponentSize().0.b\), 32));
                            \Posit32::ExponentSize().0.binaryOperationResult.1\ := SmartResize(unsigned(\Posit32::ExponentSize().0.binaryOperationResult.0\ - to_signed(1, 32)), 8);
                            \Posit32::ExponentSize().0.result\ := (\Posit32::ExponentSize().0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- if ((int)(b) + 2 <= 32) {
                            -- 	int conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f;
                            -- 	if ((32 - ((int)(b) + 2) > 2)) {
                            -- 		conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = 2;
                            -- 	} else {
                            -- 		conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = ((byte)(32 - ((int)(b) + 2)));
                            -- 	}
                            -- 	result = (byte)(conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f);
                            -- }
                            -- 
                            \Posit32::ExponentSize().0.binaryOperationResult.2\ := signed(SmartResize((\Posit32::ExponentSize().0.b\), 32)) + to_signed(2, 32);
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Posit32::ExponentSize().0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::ExponentSize().0.binaryOperationResult.3\ := \Posit32::ExponentSize().0.binaryOperationResult.2\ <= to_signed(32, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::ExponentSize().0._State_11\ and ends in state \Posit32::ExponentSize().0._State_12\.
                        --     * Execution after either branch will continue in the following state: \Posit32::ExponentSize().0._State_10\.

                        if (\Posit32::ExponentSize().0.binaryOperationResult.3\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_11\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::ExponentSize().0._State_10\ => 
                        -- State after the if-else which was started in state \Posit32::ExponentSize().0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- return result;
                        -- 
                        \Posit32::ExponentSize().0.return\ <= \Posit32::ExponentSize().0.result\;
                        \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_11\ => 
                        -- True branch of the if-else started in state \Posit32::ExponentSize().0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f;
                        -- 	if ((32 - ((int)(b) + 2) > 2)) {
                        -- 		conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = 2;
                        -- 	} else {
                        -- 		conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = ((byte)(32 - ((int)(b) + 2)));
                        -- 	}
                        -- 	result = (byte)(conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((32 - ((int)(b) + 2) > 2)) {
                        -- 	conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = 2;
                        -- } else {
                        -- 	conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = ((byte)(32 - ((int)(b) + 2)));
                        -- }
                        -- 
                        \Posit32::ExponentSize().0.binaryOperationResult.4\ := signed(SmartResize((\Posit32::ExponentSize().0.b\), 32)) + to_signed(2, 32);
                        \Posit32::ExponentSize().0.binaryOperationResult.5\ := to_signed(32, 32) - (\Posit32::ExponentSize().0.binaryOperationResult.4\);
                        \Posit32::ExponentSize().0.binaryOperationResult.6\ := \Posit32::ExponentSize().0.binaryOperationResult.5\ > to_signed(2, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::ExponentSize().0._State_13\ and ends in state \Posit32::ExponentSize().0._State_13\.
                        --     * The false branch starts in state \Posit32::ExponentSize().0._State_14\ and ends in state \Posit32::ExponentSize().0._State_14\.
                        --     * Execution after either branch will continue in the following state: \Posit32::ExponentSize().0._State_12\.

                        if ((\Posit32::ExponentSize().0.binaryOperationResult.6\)) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_13\;
                        else 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \Posit32::ExponentSize().0._State_12\ => 
                        -- State after the if-else which was started in state \Posit32::ExponentSize().0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- result = (byte)(conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f);
                        -- 
                        \Posit32::ExponentSize().0.result\ := SmartResize(unsigned((\Posit32::ExponentSize().0.conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f\)), 8);
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_9\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_12\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_13\ => 
                        -- True branch of the if-else started in state \Posit32::ExponentSize().0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = 2;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = 2;
                        -- 
                        \Posit32::ExponentSize().0.conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f\ := to_signed(2, 32);
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_11\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_13\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_14\ => 
                        -- False branch of the if-else started in state \Posit32::ExponentSize().0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = ((byte)(32 - ((int)(b) + 2)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f = ((byte)(32 - ((int)(b) + 2)));
                        -- 
                        \Posit32::ExponentSize().0.binaryOperationResult.7\ := signed(SmartResize((\Posit32::ExponentSize().0.b\), 32)) + to_signed(2, 32);
                        \Posit32::ExponentSize().0.binaryOperationResult.8\ := SmartResize(unsigned(to_signed(32, 32) - (\Posit32::ExponentSize().0.binaryOperationResult.7\)), 8);
                        \Posit32::ExponentSize().0.conditional84650a5e99ff12def24300bfb6c83992df6e05c8ab55cef802c1df614d6cae4f\ := signed(SmartResize(((\Posit32::ExponentSize().0.binaryOperationResult.8\)), 32));
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_11\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_14\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 state machine start
    \Posit32::GetExponentValue().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetExponentValue().0._State\: \Posit32::GetExponentValue().0._States\ := \Posit32::GetExponentValue().0._State_0\;
        Variable \Posit32::GetExponentValue().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::GetExponentValue().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.return.0\: boolean := false;
        Variable \Posit32::GetExponentValue().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetExponentValue().0.return.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetExponentValue().0.return.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetExponentValue().0._Finished\ <= false;
                \Posit32::GetExponentValue().0.return\ <= to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\ <= false;
                \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ <= false;
                \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ <= false;
                \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_0\;
                \Posit32::GetExponentValue().0.num\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.return.0\ := false;
                \Posit32::GetExponentValue().0.return.1\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.b\ := to_unsigned(0, 8);
                \Posit32::GetExponentValue().0.return.2\ := to_unsigned(0, 8);
                \Posit32::GetExponentValue().0.return.3\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.4\ := false;
            else 
                case \Posit32::GetExponentValue().0._State\ is 
                    when \Posit32::GetExponentValue().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetExponentValue().0._Started\ = true) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetExponentValue().0._Started\ = true) then 
                            \Posit32::GetExponentValue().0._Finished\ <= true;
                        else 
                            \Posit32::GetExponentValue().0._Finished\ <= false;
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_2\ => 
                        \Posit32::GetExponentValue().0.this\ := \Posit32::GetExponentValue().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsPositive (@this)) {
                        -- 	conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8 = @this.PositBits;
                        -- } else {
                        -- 	conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32::GetExponentValue().0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32::GetExponentValue().0.this\;
                        \Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\ = \Posit32::GetExponentValue().0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32::GetExponentValue().0.return.0\ := \Posit32::GetExponentValue().0.Posit32::IsPositive().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::GetExponentValue().0._State_5\ and ends in state \Posit32::GetExponentValue().0._State_5\.
                            --     * The false branch starts in state \Posit32::GetExponentValue().0._State_6\ and ends in state \Posit32::GetExponentValue().0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::GetExponentValue().0._State_4\.

                            if (\Posit32::GetExponentValue().0.return.0\) then 
                                \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_5\;
                            else 
                                \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::GetExponentValue().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8);
                        -- 
                        \Posit32::GetExponentValue().0.num\ := (\Posit32::GetExponentValue().0.conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8\);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = Lombiq.Arithmetics.Posit32.ExponentSize (@this);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::ExponentSize()
                        \Posit32::GetExponentValue().0.Posit32::ExponentSize().this.parameter.Out.0\ <= \Posit32::GetExponentValue().0.this\;
                        \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ <= true;
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::GetExponentValue().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8 = @this.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8 = @this.PositBits;
                        -- 
                        \Posit32::GetExponentValue().0.conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8\ := \Posit32::GetExponentValue().0.this\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Posit32::GetExponentValue().0._State_3\.
                        if (\Posit32::GetExponentValue().0._State\ = \Posit32::GetExponentValue().0._State_5\) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_6\ => 
                        -- False branch of the if-else started in state \Posit32::GetExponentValue().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8 = Posit32.GetTwosComplement (@this.PositBits);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::GetExponentValue().0.this\.\PositBits\;
                        \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::GetExponentValue().0.return.1\ := \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::GetExponentValue().0.conditional7d612ad547af6630468af14d3093beb234163d4eef2ba78327f7d01f25b40cf8\ := \Posit32::GetExponentValue().0.return.1\;
                            -- Going to the state after the if-else which was started in state \Posit32::GetExponentValue().0._State_3\.
                            if (\Posit32::GetExponentValue().0._State\ = \Posit32::GetExponentValue().0._State_7\) then 
                                \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::ExponentSize()
                        if (\Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ = \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Finished.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ <= false;
                            \Posit32::GetExponentValue().0.return.2\ := \Posit32::GetExponentValue().0.Posit32::ExponentSize().return.0\;
                            \Posit32::GetExponentValue().0.b\ := \Posit32::GetExponentValue().0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num >> (int)Lombiq.Arithmetics.Posit32.FractionSize (@this) << 32 - (int)(b) >> 30;
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                            \Posit32::GetExponentValue().0.Posit32::FractionSize().this.parameter.Out.0\ <= \Posit32::GetExponentValue().0.this\;
                            \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ <= true;
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                        if (\Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ = \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ <= false;
                            \Posit32::GetExponentValue().0.return.3\ := \Posit32::GetExponentValue().0.Posit32::FractionSize().return.0\;
                            \Posit32::GetExponentValue().0.binaryOperationResult.0\ := shift_right(\Posit32::GetExponentValue().0.num\, to_integer(unsigned(SmartResize(signed(\Posit32::GetExponentValue().0.return.3\), 5) and "11111")));
                            \Posit32::GetExponentValue().0.binaryOperationResult.1\ := to_signed(32, 32) - signed(SmartResize((\Posit32::GetExponentValue().0.b\), 32));
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \Posit32::GetExponentValue().0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::GetExponentValue().0.binaryOperationResult.2\ := shift_left(\Posit32::GetExponentValue().0.binaryOperationResult.0\, to_integer(unsigned(SmartResize(\Posit32::GetExponentValue().0.binaryOperationResult.1\, 5))));
                        \Posit32::GetExponentValue().0.binaryOperationResult.3\ := shift_right(\Posit32::GetExponentValue().0.binaryOperationResult.2\, to_integer(unsigned(SmartResize(to_signed(30, 32), 5) and "11111")));
                        \Posit32::GetExponentValue().0.num\ := \Posit32::GetExponentValue().0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(b) != 0) {
                        -- 	return num;
                        -- }
                        -- 
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.9522
                    when \Posit32::GetExponentValue().0._State_11\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::GetExponentValue().0.binaryOperationResult.4\ := signed(SmartResize((\Posit32::GetExponentValue().0.b\), 32)) /= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::GetExponentValue().0._State_13\ and ends in state \Posit32::GetExponentValue().0._State_13\.
                        --     * Execution after either branch will continue in the following state: \Posit32::GetExponentValue().0._State_12\.

                        if (\Posit32::GetExponentValue().0.binaryOperationResult.4\) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_13\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::GetExponentValue().0._State_12\ => 
                        -- State after the if-else which was started in state \Posit32::GetExponentValue().0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- return 0u;
                        -- 
                        \Posit32::GetExponentValue().0.return\ <= to_unsigned(0, 32);
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_13\ => 
                        -- True branch of the if-else started in state \Posit32::GetExponentValue().0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return num;
                        -- 
                        \Posit32::GetExponentValue().0.return\ <= \Posit32::GetExponentValue().0.num\;
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::GetExponentValue().0._State_11\.
                        if (\Posit32::GetExponentValue().0._State\ = \Posit32::GetExponentValue().0._State_13\) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 state machine start
    \Posit32::FractionSize().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FractionSize().0._State\: \Posit32::FractionSize().0._States\ := \Posit32::FractionSize().0._State_0\;
        Variable \Posit32::FractionSize().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::FractionSize().0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionSize().0.conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionSize().0.return.0\: boolean := false;
        Variable \Posit32::FractionSize().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionSize().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.return.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::FractionSize().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FractionSize().0._Finished\ <= false;
                \Posit32::FractionSize().0.return\ <= to_unsigned(0, 32);
                \Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\ <= false;
                \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_0\;
                \Posit32::FractionSize().0.bits\ := to_unsigned(0, 32);
                \Posit32::FractionSize().0.conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5\ := to_unsigned(0, 32);
                \Posit32::FractionSize().0.return.0\ := false;
                \Posit32::FractionSize().0.return.1\ := to_unsigned(0, 32);
                \Posit32::FractionSize().0.num\ := to_signed(0, 32);
                \Posit32::FractionSize().0.return.2\ := to_unsigned(0, 8);
                \Posit32::FractionSize().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::FractionSize().0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::FractionSize().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::FractionSize().0.binaryOperationResult.3\ := false;
            else 
                case \Posit32::FractionSize().0._State\ is 
                    when \Posit32::FractionSize().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FractionSize().0._Started\ = true) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FractionSize().0._Started\ = true) then 
                            \Posit32::FractionSize().0._Finished\ <= true;
                        else 
                            \Posit32::FractionSize().0._Finished\ <= false;
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_2\ => 
                        \Posit32::FractionSize().0.this\ := \Posit32::FractionSize().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsPositive (@this)) {
                        -- 	conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5 = @this.PositBits;
                        -- } else {
                        -- 	conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32::FractionSize().0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32::FractionSize().0.this\;
                        \Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\ = \Posit32::FractionSize().0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32::FractionSize().0.return.0\ := \Posit32::FractionSize().0.Posit32::IsPositive().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::FractionSize().0._State_5\ and ends in state \Posit32::FractionSize().0._State_5\.
                            --     * The false branch starts in state \Posit32::FractionSize().0._State_6\ and ends in state \Posit32::FractionSize().0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::FractionSize().0._State_4\.

                            if (\Posit32::FractionSize().0.return.0\) then 
                                \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_5\;
                            else 
                                \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::FractionSize().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- bits = (conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5);
                        -- 
                        \Posit32::FractionSize().0.bits\ := (\Posit32::FractionSize().0.conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 32 - ((int)(Posit32.LengthOfRunOfBits (bits, 31)) + 2 + 2);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= \Posit32::FractionSize().0.bits\;
                        \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::FractionSize().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5 = @this.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5 = @this.PositBits;
                        -- 
                        \Posit32::FractionSize().0.conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5\ := \Posit32::FractionSize().0.this\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Posit32::FractionSize().0._State_3\.
                        if (\Posit32::FractionSize().0._State\ = \Posit32::FractionSize().0._State_5\) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_6\ => 
                        -- False branch of the if-else started in state \Posit32::FractionSize().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5 = Posit32.GetTwosComplement (@this.PositBits);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5 = Posit32.GetTwosComplement (@this.PositBits);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::FractionSize().0.this\.\PositBits\;
                        \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::FractionSize().0.return.1\ := \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::FractionSize().0.conditional93b53db7cd41efe5f15b75b92cbe2e4d070bd048a6a5ef95576e41fe0226c2e5\ := \Posit32::FractionSize().0.return.1\;
                            -- Going to the state after the if-else which was started in state \Posit32::FractionSize().0._State_3\.
                            if (\Posit32::FractionSize().0._State\ = \Posit32::FractionSize().0._State_7\) then 
                                \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::FractionSize().0.return.2\ := \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::FractionSize().0.binaryOperationResult.0\ := signed(SmartResize((\Posit32::FractionSize().0.return.2\), 32)) + to_signed(2, 32);
                            \Posit32::FractionSize().0.binaryOperationResult.1\ := SmartResize(\Posit32::FractionSize().0.binaryOperationResult.0\ + to_signed(2, 32), 32);
                            \Posit32::FractionSize().0.binaryOperationResult.2\ := to_signed(32, 32) - (\Posit32::FractionSize().0.binaryOperationResult.1\);
                            \Posit32::FractionSize().0.num\ := \Posit32::FractionSize().0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num <= 0) {
                            -- 	return 0u;
                            -- }
                            -- 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Posit32::FractionSize().0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionSize().0.binaryOperationResult.3\ := \Posit32::FractionSize().0.num\ <= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::FractionSize().0._State_11\ and ends in state \Posit32::FractionSize().0._State_11\.
                        --     * Execution after either branch will continue in the following state: \Posit32::FractionSize().0._State_10\.

                        if (\Posit32::FractionSize().0.binaryOperationResult.3\) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_11\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::FractionSize().0._State_10\ => 
                        -- State after the if-else which was started in state \Posit32::FractionSize().0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- return (uint)num;
                        -- 
                        \Posit32::FractionSize().0.return\ <= unsigned(\Posit32::FractionSize().0.num\);
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_11\ => 
                        -- True branch of the if-else started in state \Posit32::FractionSize().0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return 0u;
                        -- 
                        \Posit32::FractionSize().0.return\ <= to_unsigned(0, 32);
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::FractionSize().0._State_9\.
                        if (\Posit32::FractionSize().0._State\ = \Posit32::FractionSize().0._State_11\) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck().0 state machine start
    \Posit32::FractionSizeWithoutSignCheck().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FractionSizeWithoutSignCheck().0._State\: \Posit32::FractionSizeWithoutSignCheck().0._States\ := \Posit32::FractionSizeWithoutSignCheck().0._State_0\;
        Variable \Posit32::FractionSizeWithoutSignCheck().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::FractionSizeWithoutSignCheck().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSizeWithoutSignCheck().0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FractionSizeWithoutSignCheck().0._Finished\ <= false;
                \Posit32::FractionSizeWithoutSignCheck().0.return\ <= to_unsigned(0, 32);
                \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_0\;
                \Posit32::FractionSizeWithoutSignCheck().0.num\ := to_signed(0, 32);
                \Posit32::FractionSizeWithoutSignCheck().0.return.0\ := to_unsigned(0, 8);
                \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.3\ := false;
            else 
                case \Posit32::FractionSizeWithoutSignCheck().0._State\ is 
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FractionSizeWithoutSignCheck().0._Started\ = true) then 
                            \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FractionSizeWithoutSignCheck().0._Started\ = true) then 
                            \Posit32::FractionSizeWithoutSignCheck().0._Finished\ <= true;
                        else 
                            \Posit32::FractionSizeWithoutSignCheck().0._Finished\ <= false;
                            \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_2\ => 
                        \Posit32::FractionSizeWithoutSignCheck().0.this\ := \Posit32::FractionSizeWithoutSignCheck().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 32 - ((int)(Posit32.LengthOfRunOfBits (@this.PositBits, 31)) + 2 + 2);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= \Posit32::FractionSizeWithoutSignCheck().0.this\.\PositBits\;
                        \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::FractionSizeWithoutSignCheck().0.return.0\ := \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.0\ := signed(SmartResize((\Posit32::FractionSizeWithoutSignCheck().0.return.0\), 32)) + to_signed(2, 32);
                            \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.1\ := SmartResize(\Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.0\ + to_signed(2, 32), 32);
                            \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.2\ := to_signed(32, 32) - (\Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.1\);
                            \Posit32::FractionSizeWithoutSignCheck().0.num\ := \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num <= 0) {
                            -- 	return 0u;
                            -- }
                            -- 
                            \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.3\ := \Posit32::FractionSizeWithoutSignCheck().0.num\ <= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::FractionSizeWithoutSignCheck().0._State_6\ and ends in state \Posit32::FractionSizeWithoutSignCheck().0._State_6\.
                        --     * Execution after either branch will continue in the following state: \Posit32::FractionSizeWithoutSignCheck().0._State_5\.

                        if (\Posit32::FractionSizeWithoutSignCheck().0.binaryOperationResult.3\) then 
                            \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::FractionSizeWithoutSignCheck().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- return (uint)num;
                        -- 
                        \Posit32::FractionSizeWithoutSignCheck().0.return\ <= unsigned(\Posit32::FractionSizeWithoutSignCheck().0.num\);
                        \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSizeWithoutSignCheck().0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::FractionSizeWithoutSignCheck().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return 0u;
                        -- 
                        \Posit32::FractionSizeWithoutSignCheck().0.return\ <= to_unsigned(0, 32);
                        \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::FractionSizeWithoutSignCheck().0._State_4\.
                        if (\Posit32::FractionSizeWithoutSignCheck().0._State\ = \Posit32::FractionSizeWithoutSignCheck().0._State_6\) then 
                            \Posit32::FractionSizeWithoutSignCheck().0._State\ := \Posit32::FractionSizeWithoutSignCheck().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck().0 state machine start
    \Posit32::FractionWithHiddenBitWithoutSignCheck().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\: \Posit32::FractionWithHiddenBitWithoutSignCheck().0._States\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_0\;
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Finished\ <= false;
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return\ <= to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\ <= to_unsigned(0, 16);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ <= false;
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_0\;
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.num\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.0\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.1\ := to_unsigned(0, 32);
            else 
                case \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ is 
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\ = true) then 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\ = true) then 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Finished\ <= true;
                        else 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Finished\ <= false;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_2\ => 
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Lombiq.Arithmetics.Posit32.FractionSizeWithoutSignCheck (@this);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this\;
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= true;
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\) then 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.0\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck().return.0\;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.num\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return Posit32.SetOne (@this.PositBits << (int)(32L - (long)(num)) >> (int)(32L - (long)(num)), (ushort)num);
                            -- 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.0\ := SmartResize(to_signed(32, 64) - signed(SmartResize((\Posit32::FractionWithHiddenBitWithoutSignCheck().0.num\), 64)), 32);
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.1\ := shift_left(\Posit32::FractionWithHiddenBitWithoutSignCheck().0.this\.\PositBits\, to_integer(unsigned(SmartResize((\Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.0\), 5))));
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9142
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.2\ := SmartResize(to_signed(32, 64) - signed(SmartResize((\Posit32::FractionWithHiddenBitWithoutSignCheck().0.num\), 64)), 32);
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.3\ := shift_right(\Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.1\, to_integer(unsigned(SmartResize((\Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.2\), 5) and "11111")));
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16)
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.binaryOperationResult.3\;
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\ <= SmartResize(\Posit32::FractionWithHiddenBitWithoutSignCheck().0.num\, 16);
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ <= true;
                        \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16)
                        if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ = \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Finished.0\) then 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ <= false;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.1\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).return.0\;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return.1\;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State\ := \Posit32::FractionWithHiddenBitWithoutSignCheck().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck().0 state machine end


    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte).0 state machine start
    \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State\: \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._States\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_0\;
        Variable \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.maximumExponentSize\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.1\: signed(15 downto 0) := to_signed(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Finished\ <= false;
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.return\ <= to_signed(0, 16);
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_0\;
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue\ := to_signed(0, 8);
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue\ := to_unsigned(0, 32);
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.maximumExponentSize\ := to_unsigned(0, 8);
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.0\ := to_signed(0, 64);
                \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.1\ := to_signed(0, 16);
            else 
                case \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State\ is 
                    when \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Started\ = true) then 
                            \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Started\ = true) then 
                            \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Finished\ <= true;
                        else 
                            \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Finished\ <= false;
                            \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_2\ => 
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue.parameter.In\;
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue.parameter.In\;
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.maximumExponentSize\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.maximumExponentSize.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (short)((long)((int)(regimeKValue) * 4) + (long)(exponentValue));
                        -- 
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.0\ := SmartResize(SmartResize((\Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue\), 32) * to_signed(4, 32), 64);
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.1\ := SmartResize((\Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.0\) + signed(SmartResize((\Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue\), 64)), 16);
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.return\ <= (\Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.binaryOperationResult.1\);
                        \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State\ := \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5119
                end case;
            end if;
        end if;
    end process;
    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte).0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 state machine start
    \Posit32::GetMostSignificantOnePosition(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0._State\: \Posit32::GetMostSignificantOnePosition(UInt32).0._States\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\;
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\ <= false;
                \Posit32::GetMostSignificantOnePosition(UInt32).0.return\ <= to_unsigned(0, 8);
                \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\;
                \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\ := to_unsigned(0, 32);
                \Posit32::GetMostSignificantOnePosition(UInt32).0.b\ := to_unsigned(0, 8);
                \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\ := false;
                \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\ := to_unsigned(0, 8);
            else 
                case \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ is 
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ = true) then 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ = true) then 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\ <= false;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\ => 
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\ := \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = 0;
                        -- 
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.b\ := SmartResize(unsigned(to_signed(0, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(bits) != 0L) {
                        -- 	bits = bits >> 1;
                        -- 	b = (byte)((int)(b) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\.
                        -- The while loop's condition:
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\ := signed(SmartResize((\Posit32::GetMostSignificantOnePosition(UInt32).0.bits\), 64)) /= to_signed(0, 64);
                        if (\Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits = bits >> 1;
                            -- 	b = (byte)((int)(b) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = bits >> 1;
                            -- 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\ := shift_right(\Posit32::GetMostSignificantOnePosition(UInt32).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\ := \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)((int)(b) + 1);
                            -- 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\ := SmartResize(unsigned(signed(SmartResize((\Posit32::GetMostSignificantOnePosition(UInt32).0.b\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.b\ := (\Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\);
                        else 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8704
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_4\ => 
                        -- State after the while loop which was started in state \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return b;
                        -- 
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.return\ <= \Posit32::GetMostSignificantOnePosition(UInt32).0.b\;
                        \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64).0 state machine start
    \Posit32::GetMostSignificantOnePosition(UInt64).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetMostSignificantOnePosition(UInt64).0._State\: \Posit32::GetMostSignificantOnePosition(UInt64).0._States\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_0\;
        Variable \Posit32::GetMostSignificantOnePosition(UInt64).0.bits\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::GetMostSignificantOnePosition(UInt64).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetMostSignificantOnePosition(UInt64).0._Finished\ <= false;
                \Posit32::GetMostSignificantOnePosition(UInt64).0.return\ <= to_unsigned(0, 8);
                \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_0\;
                \Posit32::GetMostSignificantOnePosition(UInt64).0.bits\ := to_unsigned(0, 64);
                \Posit32::GetMostSignificantOnePosition(UInt64).0.b\ := to_unsigned(0, 8);
                \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.0\ := false;
                \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.1\ := to_unsigned(0, 64);
                \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.2\ := to_unsigned(0, 8);
            else 
                case \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ is 
                    when \Posit32::GetMostSignificantOnePosition(UInt64).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetMostSignificantOnePosition(UInt64).0._Started\ = true) then 
                            \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt64).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetMostSignificantOnePosition(UInt64).0._Started\ = true) then 
                            \Posit32::GetMostSignificantOnePosition(UInt64).0._Finished\ <= true;
                        else 
                            \Posit32::GetMostSignificantOnePosition(UInt64).0._Finished\ <= false;
                            \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt64).0._State_2\ => 
                        \Posit32::GetMostSignificantOnePosition(UInt64).0.bits\ := \Posit32::GetMostSignificantOnePosition(UInt64).0.bits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = 0;
                        -- 
                        \Posit32::GetMostSignificantOnePosition(UInt64).0.b\ := SmartResize(unsigned(to_signed(0, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- while (bits != 0uL) {
                        -- 	bits = bits >> 1;
                        -- 	b = (byte)((int)(b) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt64).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::GetMostSignificantOnePosition(UInt64).0._State_2\.
                        -- The while loop's condition:
                        \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.0\ := \Posit32::GetMostSignificantOnePosition(UInt64).0.bits\ /= to_unsigned(0, 64);
                        if (\Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits = bits >> 1;
                            -- 	b = (byte)((int)(b) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = bits >> 1;
                            -- 
                            \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.1\ := SmartResize(shift_right(\Posit32::GetMostSignificantOnePosition(UInt64).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 6) and "111111"))), 64);
                            \Posit32::GetMostSignificantOnePosition(UInt64).0.bits\ := \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)((int)(b) + 1);
                            -- 
                            \Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.2\ := SmartResize(unsigned(signed(SmartResize((\Posit32::GetMostSignificantOnePosition(UInt64).0.b\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::GetMostSignificantOnePosition(UInt64).0.b\ := (\Posit32::GetMostSignificantOnePosition(UInt64).0.binaryOperationResult.2\);
                        else 
                            \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \Posit32::GetMostSignificantOnePosition(UInt64).0._State_4\ => 
                        -- State after the while loop which was started in state \Posit32::GetMostSignificantOnePosition(UInt64).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return b;
                        -- 
                        \Posit32::GetMostSignificantOnePosition(UInt64).0.return\ <= \Posit32::GetMostSignificantOnePosition(UInt64).0.b\;
                        \Posit32::GetMostSignificantOnePosition(UInt64).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt64).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64).0 state machine end


    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32).0 state machine start
    \Posit32::Abs(Posit32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::Abs(Posit32).0._State\: \Posit32::Abs(Posit32).0._States\ := \Posit32::Abs(Posit32).0._State_0\;
        Variable \Posit32::Abs(Posit32).0.input\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::Abs(Posit32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Abs(Posit32).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Abs(Posit32).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Abs(Posit32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Abs(Posit32).0.objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::Abs(Posit32).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Abs(Posit32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::Abs(Posit32).0._Finished\ <= false;
                \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32::Abs(Posit32).0._State\ := \Posit32::Abs(Posit32).0._State_0\;
                \Posit32::Abs(Posit32).0.num\ := to_unsigned(0, 32);
                \Posit32::Abs(Posit32).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::Abs(Posit32).0.num2\ := to_unsigned(0, 32);
                \Posit32::Abs(Posit32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::Abs(Posit32).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::Abs(Posit32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
            else 
                case \Posit32::Abs(Posit32).0._State\ is 
                    when \Posit32::Abs(Posit32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::Abs(Posit32).0._Started\ = true) then 
                            \Posit32::Abs(Posit32).0._State\ := \Posit32::Abs(Posit32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Abs(Posit32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::Abs(Posit32).0._Started\ = true) then 
                            \Posit32::Abs(Posit32).0._Finished\ <= true;
                        else 
                            \Posit32::Abs(Posit32).0._Finished\ <= false;
                            \Posit32::Abs(Posit32).0._State\ := \Posit32::Abs(Posit32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Abs(Posit32).0._State_2\ => 
                        \Posit32::Abs(Posit32).0.input\ := \Posit32::Abs(Posit32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input.PositBits >> 31;
                        -- 
                        \Posit32::Abs(Posit32).0.binaryOperationResult.0\ := shift_right(\Posit32::Abs(Posit32).0.input\.\PositBits\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::Abs(Posit32).0.num\ := \Posit32::Abs(Posit32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)(0L - (long)(num));
                        -- 
                        \Posit32::Abs(Posit32).0.binaryOperationResult.1\ := SmartResize(unsigned(to_signed(0, 64) - signed(SmartResize((\Posit32::Abs(Posit32).0.num\), 64))), 32);
                        \Posit32::Abs(Posit32).0.num2\ := (\Posit32::Abs(Posit32).0.binaryOperationResult.1\);
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7 = new Posit32 ((input.PositBits ^ num2) + num, true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::Abs(Posit32).0.objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7\.\IsNull\ := false;
                        \Posit32::Abs(Posit32).0.objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        \Posit32::Abs(Posit32).0.binaryOperationResult.2\ := \Posit32::Abs(Posit32).0.input\.\PositBits\ xor \Posit32::Abs(Posit32).0.num2\;
                        \Posit32::Abs(Posit32).0._State\ := \Posit32::Abs(Posit32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9788
                    when \Posit32::Abs(Posit32).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::Abs(Posit32).0.binaryOperationResult.3\ := (\Posit32::Abs(Posit32).0.binaryOperationResult.2\) + \Posit32::Abs(Posit32).0.num\;
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32::Abs(Posit32).0.objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7\;
                        \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= \Posit32::Abs(Posit32).0.binaryOperationResult.3\;
                        \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                        \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                        \Posit32::Abs(Posit32).0._State\ := \Posit32::Abs(Posit32).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::Abs(Posit32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32::Abs(Posit32).0.objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7\ := \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7;
                            -- 
                            \Posit32::Abs(Posit32).0.return\ <= \Posit32::Abs(Posit32).0.objecta1c7e4325d3b673ee6cd9f33547e2e9468f2563605d20cb0c036cf1d67acdcb7\;
                            \Posit32::Abs(Posit32).0._State\ := \Posit32::Abs(Posit32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 state machine start
    \Posit32::SetOne(UInt32,UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::SetOne(UInt32,UInt16).0._State\: \Posit32::SetOne(UInt32,UInt16).0._States\ := \Posit32::SetOne(UInt32,UInt16).0._State_0\;
        Variable \Posit32::SetOne(UInt32,UInt16).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::SetOne(UInt32,UInt16).0.index\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::SetOne(UInt32,UInt16).0._Finished\ <= false;
                \Posit32::SetOne(UInt32,UInt16).0.return\ <= to_unsigned(0, 32);
                \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_0\;
                \Posit32::SetOne(UInt32,UInt16).0.bits\ := to_unsigned(0, 32);
                \Posit32::SetOne(UInt32,UInt16).0.index\ := to_unsigned(0, 16);
                \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \Posit32::SetOne(UInt32,UInt16).0._State\ is 
                    when \Posit32::SetOne(UInt32,UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::SetOne(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetOne(UInt32,UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::SetOne(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetOne(UInt32,UInt16).0._Finished\ <= true;
                        else 
                            \Posit32::SetOne(UInt32,UInt16).0._Finished\ <= false;
                            \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetOne(UInt32,UInt16).0._State_2\ => 
                        \Posit32::SetOne(UInt32,UInt16).0.bits\ := \Posit32::SetOne(UInt32,UInt16).0.bits.parameter.In\;
                        \Posit32::SetOne(UInt32,UInt16).0.index\ := \Posit32::SetOne(UInt32,UInt16).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return bits | (uint)(1 << (int)index);
                        -- 
                        \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\ := unsigned(shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\Posit32::SetOne(UInt32,UInt16).0.index\, 32)), 5)))));
                        \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\ := \Posit32::SetOne(UInt32,UInt16).0.bits\ or (\Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\);
                        \Posit32::SetOne(UInt32,UInt16).0.return\ <= \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\;
                        \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.663
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 state machine start
    \Posit32::SetZero(UInt32,UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::SetZero(UInt32,UInt16).0._State\: \Posit32::SetZero(UInt32,UInt16).0._States\ := \Posit32::SetZero(UInt32,UInt16).0._State_0\;
        Variable \Posit32::SetZero(UInt32,UInt16).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::SetZero(UInt32,UInt16).0.index\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::SetZero(UInt32,UInt16).0._Finished\ <= false;
                \Posit32::SetZero(UInt32,UInt16).0.return\ <= to_unsigned(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_0\;
                \Posit32::SetZero(UInt32,UInt16).0.bits\ := to_unsigned(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0.index\ := to_unsigned(0, 16);
                \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \Posit32::SetZero(UInt32,UInt16).0._State\ is 
                    when \Posit32::SetZero(UInt32,UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::SetZero(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetZero(UInt32,UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::SetZero(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetZero(UInt32,UInt16).0._Finished\ <= true;
                        else 
                            \Posit32::SetZero(UInt32,UInt16).0._Finished\ <= false;
                            \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetZero(UInt32,UInt16).0._State_2\ => 
                        \Posit32::SetZero(UInt32,UInt16).0.bits\ := \Posit32::SetZero(UInt32,UInt16).0.bits.parameter.In\;
                        \Posit32::SetZero(UInt32,UInt16).0.index\ := \Posit32::SetZero(UInt32,UInt16).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return bits & (uint)(~(1 << (int)index));
                        -- 
                        \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\Posit32::SetZero(UInt32,UInt16).0.index\, 32)), 5))));
                        \Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\ := not((\Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\));
                        \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\ := \Posit32::SetZero(UInt32,UInt16).0.bits\ and unsigned((\Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\));
                        \Posit32::SetZero(UInt32,UInt16).0.return\ <= \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\;
                        \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8078
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 state machine start
    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\: \Posit32::LengthOfRunOfBits(UInt32,Byte).0._States\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\: boolean := false;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\ <= false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\ <= to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\ := to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\ := to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ := to_signed(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\ := false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\ := false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\ := false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\ := to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\ := to_signed(0, 32);
            else 
                case \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ is 
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ = true) then 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ = true) then 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\ <= true;
                        else 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\ <= false;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\ => 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\;
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = 1;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits = bits << 1;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\ := shift_left(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (bits >> 31) & 1u;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\ := shift_right(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\ := (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\) and to_unsigned(1, 32);
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits = bits << 1;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\ := shift_left(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2) < (int)(startingPosition) && bits >> 31 == num) {
                        -- 	bits = bits << 1;
                        -- 	b = (byte)((int)(b) + 1);
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\.
                        -- The while loop's condition:
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\ := (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\) < signed(SmartResize((\Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\), 32));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\ := shift_right(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\ = \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\;
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_4\ => 
                        -- State after the while loop which was started in state \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return b;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\;
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\ and \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\;
                        if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits = bits << 1;
                            -- 	b = (byte)((int)(b) + 1);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = bits << 1;
                            -- 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\ := shift_left(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\;
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)((int)(b) + 1);
                            -- 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\ := SmartResize(unsigned(signed(SmartResize((\Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\ := (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ + to_signed(1, 32);
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\ if the loop wasn't exited with a state change.
                            if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ = \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\) then 
                                \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\;
                            end if;
                        else 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 state machine start
    \Posit32::GetTwosComplement(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetTwosComplement(UInt32).0._State\: \Posit32::GetTwosComplement(UInt32).0._States\ := \Posit32::GetTwosComplement(UInt32).0._State_0\;
        Variable \Posit32::GetTwosComplement(UInt32).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetTwosComplement(UInt32).0._Finished\ <= false;
                \Posit32::GetTwosComplement(UInt32).0.return\ <= to_unsigned(0, 32);
                \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_0\;
                \Posit32::GetTwosComplement(UInt32).0.bits\ := to_unsigned(0, 32);
                \Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\ := to_unsigned(0, 32);
            else 
                case \Posit32::GetTwosComplement(UInt32).0._State\ is 
                    when \Posit32::GetTwosComplement(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetTwosComplement(UInt32).0._Started\ = true) then 
                            \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetTwosComplement(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetTwosComplement(UInt32).0._Started\ = true) then 
                            \Posit32::GetTwosComplement(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::GetTwosComplement(UInt32).0._Finished\ <= false;
                            \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetTwosComplement(UInt32).0._State_2\ => 
                        \Posit32::GetTwosComplement(UInt32).0.bits\ := \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (uint)((long)(~bits) + 1L);
                        -- 
                        \Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\ := not(\Posit32::GetTwosComplement(UInt32).0.bits\);
                        \Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\ := SmartResize(unsigned(signed(SmartResize((\Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::GetTwosComplement(UInt32).0.return\ <= (\Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\);
                        \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 state machine end


    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0 state machine start
    \Posit32::Sqrt(Posit32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::Sqrt(Posit32).0._State\: \Posit32::Sqrt(Posit32).0._States\ := \Posit32::Sqrt(Posit32).0._State_0\;
        Variable \Posit32::Sqrt(Posit32).0.number\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::Sqrt(Posit32).0.return.0\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.return.1\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.return.2\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.unaryOperationResult.0\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::Sqrt(Posit32).0.num\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Posit32::Sqrt(Posit32).0.return.3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Posit32::Sqrt(Posit32).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.return.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.conditionalb0221b28898fff0da4e8c5ea9683e10d4256978a69f823a47b73cdb74a70b2ec\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.2\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.5\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Posit32::Sqrt(Posit32).0.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.num4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.return.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.7\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.9\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.14\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.num7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.19\: boolean := false;
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::Sqrt(Posit32).0.objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::Sqrt(Posit32).0.return.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::Sqrt(Posit32).0._Finished\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_0\;
                \Posit32::Sqrt(Posit32).0.return.0\ := false;
                \Posit32::Sqrt(Posit32).0.return.1\ := false;
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.0\ := false;
                \Posit32::Sqrt(Posit32).0.return.2\ := false;
                \Posit32::Sqrt(Posit32).0.unaryOperationResult.0\ := false;
                \Posit32::Sqrt(Posit32).0.num\ := to_signed(0, 16);
                \Posit32::Sqrt(Posit32).0.return.3\ := to_signed(0, 16);
                \Posit32::Sqrt(Posit32).0.num2\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.return.4\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.conditionalb0221b28898fff0da4e8c5ea9683e10d4256978a69f823a47b73cdb74a70b2ec\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.1\ := to_signed(0, 64);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.2\ := false;
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.3\ := to_signed(0, 16);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.5\ := to_signed(0, 16);
                \Posit32::Sqrt(Posit32).0.num3\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.num4\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.num5\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.return.5\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.6\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.7\ := false;
                \Posit32::Sqrt(Posit32).0.num6\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.9\ := false;
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.10\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.11\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.12\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.13\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.14\ := to_unsigned(0, 32);
                \Posit32::Sqrt(Posit32).0.num7\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.15\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.num8\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.16\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.18\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.19\ := false;
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.20\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.binaryOperationResult.21\ := to_signed(0, 32);
                \Posit32::Sqrt(Posit32).0.return.6\ := to_unsigned(0, 32);
            else 
                case \Posit32::Sqrt(Posit32).0._State\ is 
                    when \Posit32::Sqrt(Posit32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::Sqrt(Posit32).0._Started\ = true) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::Sqrt(Posit32).0._Started\ = true) then 
                            \Posit32::Sqrt(Posit32).0._Finished\ <= true;
                        else 
                            \Posit32::Sqrt(Posit32).0._Finished\ <= false;
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_2\ => 
                        \Posit32::Sqrt(Posit32).0.number\ := \Posit32::Sqrt(Posit32).0.number.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsNaN (number) || Lombiq.Arithmetics.Posit32.IsZero (number)) {
                        -- 	return number;
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsNaN()
                        \Posit32::Sqrt(Posit32).0.Posit32::IsNaN().this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.number\;
                        \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Started.0\ <= true;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsNaN()
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.0\ := \Posit32::Sqrt(Posit32).0.Posit32::IsNaN().return.0\;
                            -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsZero()
                            \Posit32::Sqrt(Posit32).0.Posit32::IsZero().this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.number\;
                            \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\ <= true;
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsZero()
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.1\ := \Posit32::Sqrt(Posit32).0.Posit32::IsZero().return.0\;
                            \Posit32::Sqrt(Posit32).0.binaryOperationResult.0\ := \Posit32::Sqrt(Posit32).0.return.0\ or \Posit32::Sqrt(Posit32).0.return.1\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::Sqrt(Posit32).0._State_6\ and ends in state \Posit32::Sqrt(Posit32).0._State_6\.
                            --     * Execution after either branch will continue in the following state: \Posit32::Sqrt(Posit32).0._State_5\.

                            if (\Posit32::Sqrt(Posit32).0.binaryOperationResult.0\) then 
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_6\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \Posit32::Sqrt(Posit32).0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- if (!Lombiq.Arithmetics.Posit32.IsPositive (number)) {
                        -- 	Posit32 object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610;
                        -- 	object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610 = new Posit32 (2147483648u, true);
                        -- 	return object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610;
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32::Sqrt(Posit32).0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.number\;
                        \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \Posit32::Sqrt(Posit32).0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::Sqrt(Posit32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return number;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return number;
                        -- 
                        \Posit32::Sqrt(Posit32).0.return\ <= \Posit32::Sqrt(Posit32).0.number\;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_4\.
                        if (\Posit32::Sqrt(Posit32).0._State\ = \Posit32::Sqrt(Posit32).0._State_6\) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.2\ := \Posit32::Sqrt(Posit32).0.Posit32::IsPositive().return.0\;
                            \Posit32::Sqrt(Posit32).0.unaryOperationResult.0\ := not(\Posit32::Sqrt(Posit32).0.return.2\);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::Sqrt(Posit32).0._State_9\ and ends in state \Posit32::Sqrt(Posit32).0._State_10\.
                            --     * Execution after either branch will continue in the following state: \Posit32::Sqrt(Posit32).0._State_8\.

                            if (\Posit32::Sqrt(Posit32).0.unaryOperationResult.0\) then 
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_9\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_8\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_8\ => 
                        -- State after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_7\.
                        -- The following section was transformed from the .NET statement below:
                        -- short num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Lombiq.Arithmetics.Posit32.CalculateScaleFactor (number);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor()
                        \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor().this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.number\;
                        \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ <= true;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_9\ => 
                        -- True branch of the if-else started in state \Posit32::Sqrt(Posit32).0._State_7\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	Posit32 object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610;
                        -- 	object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610 = new Posit32 (2147483648u, true);
                        -- 	return object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610 = new Posit32 (2147483648u, true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::Sqrt(Posit32).0.object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610\.\IsNull\ := false;
                        \Posit32::Sqrt(Posit32).0.object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610\;
                        \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= "10000000000000000000000000000000";
                        \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                        \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610\ := \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610;
                            -- 
                            \Posit32::Sqrt(Posit32).0.return\ <= \Posit32::Sqrt(Posit32).0.object2e349a194daf623ae1e7854d13a0612174233b3aea6dab100fa4d787855dd610\;
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_1\;
                            -- Going to the state after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_7\.
                            if (\Posit32::Sqrt(Posit32).0._State\ = \Posit32::Sqrt(Posit32).0._State_10\) then 
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_8\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_11\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor()
                        if (\Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.3\ := \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor().return.0\;
                            \Posit32::Sqrt(Posit32).0.num\ := \Posit32::Sqrt(Posit32).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Lombiq.Arithmetics.Posit32.FractionWithHiddenBitWithoutSignCheck (number);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck()
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.number\;
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= true;
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck()
                        if (\Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.4\ := \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\;
                            \Posit32::Sqrt(Posit32).0.num2\ := \Posit32::Sqrt(Posit32).0.return.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditionalb0221b28898fff0da4e8c5ea9683e10d4256978a69f823a47b73cdb74a70b2ec;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- conditionalb0221b28898fff0da4e8c5ea9683e10d4256978a69f823a47b73cdb74a70b2ec = 1u;
                            -- 
                            \Posit32::Sqrt(Posit32).0.conditionalb0221b28898fff0da4e8c5ea9683e10d4256978a69f823a47b73cdb74a70b2ec\ := to_unsigned(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- if ((long)(((uint)num & 1u)) != 0L) {
                            -- 	num = (short)((int)(num) - 1);
                            -- 	num2 = num2 + num2;
                            -- }
                            -- 
                            \Posit32::Sqrt(Posit32).0.binaryOperationResult.1\ := signed(SmartResize(ToUnsignedAndExpand(\Posit32::Sqrt(Posit32).0.num\, 32) and to_unsigned(1, 32), 64));
                            \Posit32::Sqrt(Posit32).0.binaryOperationResult.2\ := signed(SmartResize(((\Posit32::Sqrt(Posit32).0.binaryOperationResult.1\)), 64)) /= to_signed(0, 64);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::Sqrt(Posit32).0._State_14\ and ends in state \Posit32::Sqrt(Posit32).0._State_14\.
                            --     * Execution after either branch will continue in the following state: \Posit32::Sqrt(Posit32).0._State_13\.

                            if (\Posit32::Sqrt(Posit32).0.binaryOperationResult.2\) then 
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_14\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_13\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Posit32::Sqrt(Posit32).0._State_13\ => 
                        -- State after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_12\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (short)((int)(num) >> 1);
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.5\ := SmartResize(shift_right(SmartResize((\Posit32::Sqrt(Posit32).0.num\), 32), to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111"))), 16);
                        \Posit32::Sqrt(Posit32).0.num\ := (\Posit32::Sqrt(Posit32).0.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 0u;
                        -- 
                        \Posit32::Sqrt(Posit32).0.num3\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = 0u;
                        -- 
                        \Posit32::Sqrt(Posit32).0.num4\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (uint)(1 << (int)Lombiq.Arithmetics.Posit32.FractionSizeWithoutSignCheck (number));
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.number\;
                        \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= true;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.2612
                    when \Posit32::Sqrt(Posit32).0._State_14\ => 
                        -- True branch of the if-else started in state \Posit32::Sqrt(Posit32).0._State_12\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num = (short)((int)(num) - 1);
                        -- 	num2 = num2 + num2;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (short)((int)(num) - 1);
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.3\ := SmartResize(SmartResize((\Posit32::Sqrt(Posit32).0.num\), 32) - to_signed(1, 32), 16);
                        \Posit32::Sqrt(Posit32).0.num\ := (\Posit32::Sqrt(Posit32).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + num2;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.4\ := \Posit32::Sqrt(Posit32).0.num2\ + \Posit32::Sqrt(Posit32).0.num2\;
                        \Posit32::Sqrt(Posit32).0.num2\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.4\;
                        -- Going to the state after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_12\.
                        if (\Posit32::Sqrt(Posit32).0._State\ = \Posit32::Sqrt(Posit32).0._State_14\) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32::Sqrt(Posit32).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        if (\Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.5\ := \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\;
                            \Posit32::Sqrt(Posit32).0.binaryOperationResult.6\ := unsigned(shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(\Posit32::Sqrt(Posit32).0.return.5\), 5)))));
                            \Posit32::Sqrt(Posit32).0.num5\ := (\Posit32::Sqrt(Posit32).0.binaryOperationResult.6\);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((long)(num5) != 0L) {
                            -- 	uint num6;
                            -- 	num6 = num4 + num5;
                            -- 	if (num6 <= num2) {
                            -- 		num4 = num6 + num5;
                            -- 		num2 = num2 - num6;
                            -- 		num3 = num3 + num5;
                            -- 	}
                            -- 	num2 = num2 + num2;
                            -- 	num5 = num5 >> 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::Sqrt(Posit32).0._State_16\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::Sqrt(Posit32).0._State_15\.
                        -- The while loop's condition:
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.7\ := signed(SmartResize((\Posit32::Sqrt(Posit32).0.num5\), 64)) /= to_signed(0, 64);
                        if (\Posit32::Sqrt(Posit32).0.binaryOperationResult.7\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num6;
                            -- 	num6 = num4 + num5;
                            -- 	if (num6 <= num2) {
                            -- 		num4 = num6 + num5;
                            -- 		num2 = num2 - num6;
                            -- 		num3 = num3 + num5;
                            -- 	}
                            -- 	num2 = num2 + num2;
                            -- 	num5 = num5 >> 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num4 + num5;
                            -- 
                            \Posit32::Sqrt(Posit32).0.binaryOperationResult.8\ := \Posit32::Sqrt(Posit32).0.num4\ + \Posit32::Sqrt(Posit32).0.num5\;
                            \Posit32::Sqrt(Posit32).0.num6\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.8\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num6 <= num2) {
                            -- 	num4 = num6 + num5;
                            -- 	num2 = num2 - num6;
                            -- 	num3 = num3 + num5;
                            -- }
                            -- 
                            \Posit32::Sqrt(Posit32).0.binaryOperationResult.9\ := \Posit32::Sqrt(Posit32).0.num6\ <= \Posit32::Sqrt(Posit32).0.num2\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::Sqrt(Posit32).0._State_19\ and ends in state \Posit32::Sqrt(Posit32).0._State_19\.
                            --     * Execution after either branch will continue in the following state: \Posit32::Sqrt(Posit32).0._State_18\.

                            if (\Posit32::Sqrt(Posit32).0.binaryOperationResult.9\) then 
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_19\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_18\;
                            end if;
                        else 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8833
                    when \Posit32::Sqrt(Posit32).0._State_17\ => 
                        -- State after the while loop which was started in state \Posit32::Sqrt(Posit32).0._State_15\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = (int)((int)(num) / 4);
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.15\ := SmartResize((\Posit32::Sqrt(Posit32).0.num\), 32) / to_signed(4, 32);
                        \Posit32::Sqrt(Posit32).0.num7\ := (\Posit32::Sqrt(Posit32).0.binaryOperationResult.15\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779 = (int)(num);
                        -- 
                        \Posit32::Sqrt(Posit32).0.remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779\ := SmartResize((\Posit32::Sqrt(Posit32).0.num\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (int)(remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779 - remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779 / 4 * 4);
                        -- 
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7044
                    when \Posit32::Sqrt(Posit32).0._State_18\ => 
                        -- State after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_16\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + num2;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.13\ := \Posit32::Sqrt(Posit32).0.num2\ + \Posit32::Sqrt(Posit32).0.num2\;
                        \Posit32::Sqrt(Posit32).0.num2\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = num5 >> 1;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.14\ := shift_right(\Posit32::Sqrt(Posit32).0.num5\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                        \Posit32::Sqrt(Posit32).0.num5\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.14\;
                        -- Returning to the repeated state of the while loop which was started in state \Posit32::Sqrt(Posit32).0._State_15\ if the loop wasn't exited with a state change.
                        if (\Posit32::Sqrt(Posit32).0._State\ = \Posit32::Sqrt(Posit32).0._State_18\) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5887
                    when \Posit32::Sqrt(Posit32).0._State_19\ => 
                        -- True branch of the if-else started in state \Posit32::Sqrt(Posit32).0._State_16\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num4 = num6 + num5;
                        -- 	num2 = num2 - num6;
                        -- 	num3 = num3 + num5;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num6 + num5;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.10\ := \Posit32::Sqrt(Posit32).0.num6\ + \Posit32::Sqrt(Posit32).0.num5\;
                        \Posit32::Sqrt(Posit32).0.num4\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 - num6;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.11\ := \Posit32::Sqrt(Posit32).0.num2\ - \Posit32::Sqrt(Posit32).0.num6\;
                        \Posit32::Sqrt(Posit32).0.num2\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.11\;
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num3 + num5;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.12\ := \Posit32::Sqrt(Posit32).0.num3\ + \Posit32::Sqrt(Posit32).0.num5\;
                        \Posit32::Sqrt(Posit32).0.num3\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.12\;
                        -- Going to the state after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_16\.
                        if (\Posit32::Sqrt(Posit32).0._State\ = \Posit32::Sqrt(Posit32).0._State_19\) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Posit32::Sqrt(Posit32).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.16\ := \Posit32::Sqrt(Posit32).0.remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779\ / to_signed(4, 32);
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.17\ := SmartResize(\Posit32::Sqrt(Posit32).0.binaryOperationResult.16\ * to_signed(4, 32), 32);
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0.8265
                    when \Posit32::Sqrt(Posit32).0._State_21\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.18\ := \Posit32::Sqrt(Posit32).0.remainderOperand9d28aa14e3d620f2e52ea6d0db1644f1cf12260c767f04ebd206d8be1dbb5779\ - \Posit32::Sqrt(Posit32).0.binaryOperationResult.17\;
                        \Posit32::Sqrt(Posit32).0.num8\ := (\Posit32::Sqrt(Posit32).0.binaryOperationResult.18\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (num8 < 0) {
                        -- 	num7 = num7 - 1;
                        -- 	num8 = num8 + 4;
                        -- }
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.19\ := \Posit32::Sqrt(Posit32).0.num8\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::Sqrt(Posit32).0._State_23\ and ends in state \Posit32::Sqrt(Posit32).0._State_23\.
                        --     * Execution after either branch will continue in the following state: \Posit32::Sqrt(Posit32).0._State_22\.

                        if (\Posit32::Sqrt(Posit32).0.binaryOperationResult.19\) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_23\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::Sqrt(Posit32).0._State_22\ => 
                        -- State after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_21\.
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3 = new Posit32 (Posit32.AssemblePositBitsWithRounding (false, num7, (uint)num8, num3), true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::Sqrt(Posit32).0.objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3\.\IsNull\ := false;
                        \Posit32::Sqrt(Posit32).0.objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                        \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= false;
                        \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.num7\;
                        \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= unsigned(\Posit32::Sqrt(Posit32).0.num8\);
                        \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.num3\;
                        \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= true;
                        \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_23\ => 
                        -- True branch of the if-else started in state \Posit32::Sqrt(Posit32).0._State_21\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num7 = num7 - 1;
                        -- 	num8 = num8 + 4;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num7 - 1;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.20\ := \Posit32::Sqrt(Posit32).0.num7\ - to_signed(1, 32);
                        \Posit32::Sqrt(Posit32).0.num7\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.20\;
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = num8 + 4;
                        -- 
                        \Posit32::Sqrt(Posit32).0.binaryOperationResult.21\ := \Posit32::Sqrt(Posit32).0.num8\ + to_signed(4, 32);
                        \Posit32::Sqrt(Posit32).0.num8\ := \Posit32::Sqrt(Posit32).0.binaryOperationResult.21\;
                        -- Going to the state after the if-else which was started in state \Posit32::Sqrt(Posit32).0._State_21\.
                        if (\Posit32::Sqrt(Posit32).0._State\ = \Posit32::Sqrt(Posit32).0._State_23\) then 
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32::Sqrt(Posit32).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                        if (\Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.return.6\ := \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\;
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3\;
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= \Posit32::Sqrt(Posit32).0.return.6\;
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::Sqrt(Posit32).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32::Sqrt(Posit32).0.objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3\ := \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3;
                            -- 
                            \Posit32::Sqrt(Posit32).0.return\ <= \Posit32::Sqrt(Posit32).0.objectb0e24598849829982dbb839bba51c0017e4ec81b4b829d6dc44559276ae70bb3\;
                            \Posit32::Sqrt(Posit32).0._State\ := \Posit32::Sqrt(Posit32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0 state machine end


    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 state machine start
    \Posit32 Posit32::op_Division(Posit32,Posit32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\: \Posit32 Posit32::op_Division(Posit32,Posit32).0._States\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_0\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.0\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.1\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.2\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.flag\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.3\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.signBit\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.4\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.5\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num4\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.9\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.4\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.10\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.11\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.13\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.14\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.16\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.13\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.fractionBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.16\: boolean := false;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.19\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.17\: unsigned(31 downto 0) := to_unsigned(0, 32);
        attribute dont_touch of \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32 Posit32::op_Division(Posit32,Posit32).0._Finished\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).bits.parameter.Out.0\ <= to_unsigned(0, 64);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).regimeKValue.parameter.Out.0\ <= to_signed(0, 8);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).exponentValue.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).maximumExponentSize.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_0\;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.0\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.1\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.2\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.flag\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.3\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.signBit\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.0\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num2\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.6\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num3\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.7\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num4\ := to_unsigned(0, 64);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.8\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.2\ := to_unsigned(0, 64);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.9\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.4\ := to_unsigned(0, 64);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5\ := to_unsigned(0, 64);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num5\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.10\ := to_unsigned(0, 8);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.6\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num6\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.11\ := to_signed(0, 8);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.12\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.13\ := to_signed(0, 16);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.14\ := to_signed(0, 8);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.15\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.16\ := to_signed(0, 16);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.8\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.9\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.10\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.11\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.12\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.13\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.14\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.15\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.fractionBits\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.16\ := false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.18\ := to_signed(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.19\ := to_unsigned(0, 32);
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.17\ := to_unsigned(0, 32);
            else 
                case \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ is 
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._Started\ = true) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._Started\ = true) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._Finished\ <= true;
                        else 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._Finished\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_2\ => 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.left.parameter.In\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsZero (left)) {
                        -- 	Posit32 object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721;
                        -- 	object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721 = new Posit32 (0);
                        -- 	return object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721;
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsZero()
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsZero()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.0\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_5\ and ends in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_6\.
                            --     * Execution after either branch will continue in the following state: \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_4\.

                            if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.0\) then 
                                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_5\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- if (Lombiq.Arithmetics.Posit32.IsZero (right)) {
                        -- 	Posit32 objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631;
                        -- 	objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631 = new Posit32 (2147483648u, true);
                        -- 	return objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631;
                        -- }
                        -- 
                        -- The last invocation for the target state machine finished in the previous state, so need to start the next one in the next state.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	Posit32 object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721;
                        -- 	object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721 = new Posit32 (0);
                        -- 	return object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721 = new Posit32 (0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721\.\IsNull\ := false;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721;
                            -- 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.object42a01c7dbd833c68269fc1952ae2b1ef7716596bbf1a2f35bf722483a57f7721\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_1\;
                            -- Going to the state after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_3\.
                            if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_6\) then 
                                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_7\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsZero()
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsZero()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.1\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_10\ and ends in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_11\.
                            --     * Execution after either branch will continue in the following state: \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_9\.

                            if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.1\) then 
                                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_10\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_9\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_9\ => 
                        -- State after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- bool num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Lombiq.Arithmetics.Posit32.IsPositive (left);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_10\ => 
                        -- True branch of the if-else started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	Posit32 objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631;
                        -- 	objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631 = new Posit32 (2147483648u, true);
                        -- 	return objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631 = new Posit32 (2147483648u, true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631\.\IsNull\ := false;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= "10000000000000000000000000000000";
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_11\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631;
                            -- 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.objectb7c0db34050ec4d920b96723bd50df6713eca4f29d26a3033b7cc809e3987631\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_1\;
                            -- Going to the state after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_8\.
                            if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_11\) then 
                                \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_9\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.2\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.num\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag = Lombiq.Arithmetics.Posit32.IsPositive (right);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_13\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_14\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsPositive()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.3\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.flag\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- bool signBit;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- signBit = num != flag;
                            -- 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.0\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num\ /= \Posit32 Posit32::op_Division(Posit32,Posit32).0.flag\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.signBit\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- left = Posit32.Abs (left);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32)
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).input.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_16\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.4\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- right = Posit32.Abs (right);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_17\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_18\ => 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32)
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).input.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_19\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.5\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Lombiq.Arithmetics.Posit32.FractionSizeWithoutSignCheck (left);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_20\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.6\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.num2\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.6\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = Lombiq.Arithmetics.Posit32.FractionSizeWithoutSignCheck (right);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_21\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_22\ => 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.7\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.num3\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.7\;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ulong)(((ulong)Lombiq.Arithmetics.Posit32.FractionWithHiddenBitWithoutSignCheck (left) << (int)(63L - (long)(num2))) / (ulong)((Lombiq.Arithmetics.Posit32.FractionWithHiddenBitWithoutSignCheck (right) << (int)(31L - (long)(num3)))));
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck()
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.8\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.1\ := SmartResize(to_signed(63, 64) - signed(SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.num2\), 64)), 32);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.2\ := SmartResize(shift_left(SmartResize(\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.8\, 64), to_integer(unsigned(SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.1\), 6)))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9498
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_25\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_26\ => 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck()
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_27\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.9\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.3\ := SmartResize(to_signed(31, 64) - signed(SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.num3\), 64)), 32);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.4\ := SmartResize(shift_left(\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.9\, to_integer(unsigned(SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.3\), 5)))), 64);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9142
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_28\ => 
                        -- Waiting for the result to appear in \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(26, 32)) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_29\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.clockCyclesWaitedForBinaryOperationResult.0\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5\ := (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.2\) / SmartResize(((\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.4\)), 64);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_29\ => 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.num4\ := (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (int)((int)(Posit32.GetMostSignificantOnePosition (num4)) - 33);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64)
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).bits.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.num4\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_30\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.10\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.6\ := signed(SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.10\), 32)) - to_signed(33, 32);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.num5\ := (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.6\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (int)(Posit32.CalculateScaleFactor (Lombiq.Arithmetics.Posit32.GetRegimeKValue (left), Lombiq.Arithmetics.Posit32.GetExponentValue (left), 2)) - (int)(Posit32.CalculateScaleFactor (Lombiq.Arithmetics.Posit32.GetRegimeKValue (right), Lombiq.Arithmetics.Posit32.GetExponentValue (right), 2)) + num5;
                            -- 
                            -- Starting state machine invocation for the following method: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_31\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.11\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().return.0\;
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.left\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_32\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_32\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.12\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().return.0\;
                            -- Starting state machine invocation for the following method: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte)
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).regimeKValue.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.11\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).exponentValue.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.12\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).maximumExponentSize.parameter.Out.0\ <= SmartResize(unsigned(to_signed(2, 32)), 8);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_33\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.13\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).return.0\;
                            -- Starting state machine invocation for the following method: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_34\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_34\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.14\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().return.0\;
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.right\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_35\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.15\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().return.0\;
                            -- Starting state machine invocation for the following method: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte)
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).regimeKValue.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.14\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).exponentValue.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.15\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).maximumExponentSize.parameter.Out.0\ <= SmartResize(unsigned(to_signed(2, 32)), 8);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_36\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.16\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).return.0\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.7\ := SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.13\), 32) - SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.return.16\), 32);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.8\ := SmartResize(\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.7\ + \Posit32 Posit32::op_Division(Posit32,Posit32).0.num5\, 32);
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.num6\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.8\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = num6 / 4;
                            -- 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.9\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num6\ / to_signed(4, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.9\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = num6 - num6 / 4 * 4;
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.7044
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_38\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.10\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num6\ / to_signed(4, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.11\ := SmartResize(\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.10\ * to_signed(4, 32), 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0.8265
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_39\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.12\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num6\ - \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.11\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num8 < 0) {
                        -- 	num7 = num7 - 1;
                        -- 	num8 = num8 + 4;
                        -- }
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.13\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_41\ and ends in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_41\.
                        --     * Execution after either branch will continue in the following state: \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\.

                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.13\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_41\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\ => 
                        -- State after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_39\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint fractionBits;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num7 > 0)) {
                        -- 	conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14 = (num7 + 1);
                        -- } else {
                        -- 	conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14 = (-num7 + 1);
                        -- }
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.16\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_43\ and ends in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_43\.
                        --     * The false branch starts in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_44\ and ends in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_44\.
                        --     * Execution after either branch will continue in the following state: \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_42\.

                        if ((\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.16\)) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_43\;
                        else 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_44\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_41\ => 
                        -- True branch of the if-else started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_39\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num7 = num7 - 1;
                        -- 	num8 = num8 + 4;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num7 - 1;
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.14\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\ - to_signed(1, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.14\;
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = num8 + 4;
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.15\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\ + to_signed(4, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.15\;
                        -- Going to the state after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_39\.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_41\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_42\ => 
                        -- State after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\.
                        -- The following section was transformed from the .NET statement below:
                        -- fractionBits = (uint)(num4 >> (conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14));
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.19\ := SmartResize(shift_right(\Posit32 Posit32::op_Division(Posit32,Posit32).0.num4\, to_integer(unsigned(SmartResize((\Posit32 Posit32::op_Division(Posit32,Posit32).0.conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14\), 6) and "111111"))), 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.fractionBits\ := (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.19\);
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d = new Posit32 (Posit32.AssemblePositBitsWithRounding (signBit, num7, (uint)num8, fractionBits), true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d\.\IsNull\ := false;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.signBit\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= unsigned(\Posit32 Posit32::op_Division(Posit32,Posit32).0.num8\);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.fractionBits\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= true;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_45\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_43\ => 
                        -- True branch of the if-else started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14 = (num7 + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14 = (num7 + 1);
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.17\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\ + to_signed(1, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14\ := (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.17\);
                        -- Going to the state after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_43\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_44\ => 
                        -- False branch of the if-else started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14 = (-num7 + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14 = (-num7 + 1);
                        -- 
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.unaryOperationResult.0\ := -\Posit32 Posit32::op_Division(Posit32,Posit32).0.num7\;
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.18\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.unaryOperationResult.0\ + to_signed(1, 32);
                        \Posit32 Posit32::op_Division(Posit32,Posit32).0.conditionalbb17b77627d0165cf8895293713967956e93cb975aa208ba3a06b08fc83fad14\ := (\Posit32 Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.18\);
                        -- Going to the state after the if-else which was started in state \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_40\.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_44\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6382
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_45\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.17\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\;
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.return.17\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_46\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_46\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d;
                            -- 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.return\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.object371e91d98188bb803fa5b7d055db245675d5465b90c67673394d9fbd19727b3d\;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0._State\ := \Posit32 Posit32::op_Division(Posit32,Posit32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean) start
    \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\) then 
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningIndex.0\ := 0;
                            \Posit32::.ctor(UInt32,Boolean).0._Started\ <= true;
                            \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::.ctor(UInt32,Boolean).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= true;
                                    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= false;
                                    \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\) then 
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningIndex.0\ := 0;
                            \Posit32::.ctor(UInt32,Boolean).0._Started\ <= true;
                            \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::.ctor(UInt32,Boolean).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= true;
                                    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= false;
                                    \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\) then 
                            \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::.ctor(UInt32,Boolean).0._Started\ <= true;
                            \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::.ctor(UInt32,Boolean).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= true;
                                    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= false;
                                    \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Abs(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Abs(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::.ctor(UInt32,Boolean).0._Started\ <= true;
                            \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::.ctor(UInt32,Boolean).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= true;
                                    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= false;
                                    \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Sqrt(Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::.ctor(UInt32,Boolean).0._Started\ <= true;
                            \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
                            \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::.ctor(UInt32,Boolean).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= true;
                                    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::.ctor(UInt32,Boolean).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32 Posit32::op_Division(Posit32,Posit32).0._Started\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Started.0\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.left.parameter.In\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).left.parameter.Out.0\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.right.parameter.In\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).right.parameter.Out.0\;
    \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32)._Finished.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0._Finished\;
    \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.Posit32 Posit32::op_Division(Posit32,Posit32).return.0\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::Sqrt(Posit32).0._Started\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Started.0\;
    \Posit32::Sqrt(Posit32).0.number.parameter.In\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32).number.parameter.Out.0\;
    \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32)._Finished.0\ <= \Posit32::Sqrt(Posit32).0._Finished\;
    \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.Posit32::Sqrt(Posit32).return.0\ <= \Posit32::Sqrt(Posit32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 (#0):
    \Posit32::.ctor(UInt32).0._Started\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\;
    \Posit32::.ctor(UInt32).0.this.parameter.In\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\;
    \Posit32::.ctor(UInt32).0.value.parameter.In\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\;
    \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\ <= \Posit32::.ctor(UInt32).0._Finished\;
    \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\ <= \Posit32::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32) start
    \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0
                case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\) then 
                            \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\ := 0;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= true;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\ <= \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := AfterFinished;
                                    \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= false;
                                    \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\ <= \Posit32::GetMostSignificantOnePosition(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0
                case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= true;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := AfterFinished;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= false;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\ <= \Posit32::GetMostSignificantOnePosition(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 (#0):
    \Posit32::EncodeRegimeBits(Int32).0._Started\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\;
    \Posit32::EncodeRegimeBits(Int32).0.regimeKValue.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Finished.0\ <= \Posit32::EncodeRegimeBits(Int32).0._Finished\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).return.0\ <= \Posit32::EncodeRegimeBits(Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte) start
    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningState.0\ := WaitingForStarted;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := AfterFinished;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSizeWithoutSignCheck().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionSizeWithoutSignCheck().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32) start
    \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0
                case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                            \Posit32::GetTwosComplement(UInt32).0._Started\ <= true;
                            \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetTwosComplement(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := AfterFinished;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetTwosComplement(UInt32).0._Started\ <= false;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\ <= \Posit32::GetTwosComplement(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0
                case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                            \Posit32::GetTwosComplement(UInt32).0._Started\ <= true;
                            \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\ <= \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetTwosComplement(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetTwosComplement(UInt32).0._Started\ <= false;
                                    \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32).return.0\ <= \Posit32::GetTwosComplement(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetRegimeKValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0
                case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\) then 
                            \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningIndex.0\ := 0;
                            \Posit32::GetTwosComplement(UInt32).0._Started\ <= true;
                            \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\ <= \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetTwosComplement(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetTwosComplement(UInt32).0._Started\ <= false;
                                    \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32).return.0\ <= \Posit32::GetTwosComplement(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::ExponentSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0
                case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningIndex.0\ := 0;
                            \Posit32::GetTwosComplement(UInt32).0._Started\ <= true;
                            \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\ <= \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetTwosComplement(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetTwosComplement(UInt32).0._Started\ <= false;
                                    \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32).return.0\ <= \Posit32::GetTwosComplement(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::GetExponentValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetExponentValue().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0
                case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\) then 
                            \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningIndex.0\ := 0;
                            \Posit32::GetTwosComplement(UInt32).0._Started\ <= true;
                            \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\ <= \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetTwosComplement(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetTwosComplement(UInt32).0._Started\ <= false;
                                    \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32).return.0\ <= \Posit32::GetTwosComplement(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetTwosComplement(UInt32).Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionSize().0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 (#0):
    \Posit32::SetZero(UInt32,UInt16).0._Started\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\;
    \Posit32::SetZero(UInt32,UInt16).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\;
    \Posit32::SetZero(UInt32,UInt16).0.index.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Finished.0\ <= \Posit32::SetZero(UInt32,UInt16).0._Finished\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).return.0\ <= \Posit32::SetZero(UInt32,UInt16).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsPositive() start
    \Hast::InternalInvocationProxy().Posit32::IsPositive()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Finished.0\ <= false;
                \Posit32::ExponentSize().0.Posit32::IsPositive()._Finished.0\ <= false;
                \Posit32::GetExponentValue().0.Posit32::IsPositive()._Finished.0\ <= false;
                \Posit32::FractionSize().0.Posit32::IsPositive()._Finished.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0
                case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                            \Posit32::IsPositive().0._Started\ <= true;
                            \Posit32::IsPositive().0.this.parameter.In\ <= \Posit32::GetRegimeKValue().0.Posit32::IsPositive().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsPositive().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Finished.0\ <= true;
                                    \Posit32::IsPositive().0._Started\ <= false;
                                    \Posit32::GetRegimeKValue().0.Posit32::IsPositive().return.0\ <= \Posit32::IsPositive().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetRegimeKValue().0.Posit32::IsPositive()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0
                case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\) then 
                            \Posit32::ExponentSize().0.Posit32::IsPositive()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningIndex.0\ := 0;
                            \Posit32::IsPositive().0._Started\ <= true;
                            \Posit32::IsPositive().0.this.parameter.In\ <= \Posit32::ExponentSize().0.Posit32::IsPositive().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsPositive().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::ExponentSize().0.Posit32::IsPositive()._Finished.0\ <= true;
                                    \Posit32::IsPositive().0._Started\ <= false;
                                    \Posit32::ExponentSize().0.Posit32::IsPositive().return.0\ <= \Posit32::IsPositive().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::ExponentSize().0.Posit32::IsPositive()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::ExponentSize().0.Posit32::IsPositive()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0
                case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::IsPositive()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningIndex.0\ := 0;
                            \Posit32::IsPositive().0._Started\ <= true;
                            \Posit32::IsPositive().0.this.parameter.In\ <= \Posit32::GetExponentValue().0.Posit32::IsPositive().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsPositive().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetExponentValue().0.Posit32::IsPositive()._Finished.0\ <= true;
                                    \Posit32::IsPositive().0._Started\ <= false;
                                    \Posit32::GetExponentValue().0.Posit32::IsPositive().return.0\ <= \Posit32::IsPositive().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetExponentValue().0.Posit32::IsPositive()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::GetExponentValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetExponentValue().0.Posit32::IsPositive()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0
                case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\) then 
                            \Posit32::FractionSize().0.Posit32::IsPositive()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningIndex.0\ := 0;
                            \Posit32::IsPositive().0._Started\ <= true;
                            \Posit32::IsPositive().0.this.parameter.In\ <= \Posit32::FractionSize().0.Posit32::IsPositive().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsPositive().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionSize().0.Posit32::IsPositive()._Finished.0\ <= true;
                                    \Posit32::IsPositive().0._Started\ <= false;
                                    \Posit32::FractionSize().0.Posit32::IsPositive().return.0\ <= \Posit32::IsPositive().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionSize().0.Posit32::IsPositive()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionSize().0.Posit32::IsPositive()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::IsPositive().0._Started\ <= true;
                            \Posit32::IsPositive().0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::IsPositive().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsPositive().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Finished.0\ <= true;
                                    \Posit32::IsPositive().0._Started\ <= false;
                                    \Posit32::Sqrt(Posit32).0.Posit32::IsPositive().return.0\ <= \Posit32::IsPositive().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Sqrt(Posit32).0.Posit32::IsPositive()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::IsPositive().0._Started\ <= true;
                            \Posit32::IsPositive().0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsPositive().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\ <= true;
                                    \Posit32::IsPositive().0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive().return.0\ <= \Posit32::IsPositive().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsPositive().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsPositive()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsPositive() end


    -- System.Void Hast::InternalInvocationProxy().System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue() start
    \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0
                case \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\) then 
                            \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningIndex.0\ := 0;
                            \Posit32::GetRegimeKValue().0._Started\ <= true;
                            \Posit32::GetRegimeKValue().0.this.parameter.In\ <= \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetRegimeKValue().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningState.0\ := AfterFinished;
                                    \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\ <= true;
                                    \Posit32::GetRegimeKValue().0._Started\ <= false;
                                    \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().return.0\ <= \Posit32::GetRegimeKValue().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32::CalculateScaleFactor().0.runningState.0\ := WaitingForStarted;
                            \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::GetRegimeKValue().0._Started\ <= true;
                            \Posit32::GetRegimeKValue().0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetRegimeKValue().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\ <= true;
                                    \Posit32::GetRegimeKValue().0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue().return.0\ <= \Posit32::GetRegimeKValue().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetRegimeKValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetRegimeKValue()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue() start
    \Hast::InternalInvocationProxy().Posit32::GetExponentValue()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0
                case \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\) then 
                            \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningIndex.0\ := 0;
                            \Posit32::GetExponentValue().0._Started\ <= true;
                            \Posit32::GetExponentValue().0.this.parameter.In\ <= \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetExponentValue().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningState.0\ := AfterFinished;
                                    \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\ <= true;
                                    \Posit32::GetExponentValue().0._Started\ <= false;
                                    \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().return.0\ <= \Posit32::GetExponentValue().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32::CalculateScaleFactor().0.runningState.0\ := WaitingForStarted;
                            \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::GetExponentValue().0._Started\ <= true;
                            \Posit32::GetExponentValue().0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetExponentValue().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\ <= true;
                                    \Posit32::GetExponentValue().0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue().return.0\ <= \Posit32::GetExponentValue().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetExponentValue().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetExponentValue()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue() end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::ExponentSize() start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 (#0):
    \Posit32::ExponentSize().0._Started\ <= \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\;
    \Posit32::ExponentSize().0.this.parameter.In\ <= \Posit32::GetExponentValue().0.Posit32::ExponentSize().this.parameter.Out.0\;
    \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Finished.0\ <= \Posit32::ExponentSize().0._Finished\;
    \Posit32::GetExponentValue().0.Posit32::ExponentSize().return.0\ <= \Posit32::ExponentSize().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::ExponentSize() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize() start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 (#0):
    \Posit32::FractionSize().0._Started\ <= \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\;
    \Posit32::FractionSize().0.this.parameter.In\ <= \Posit32::GetExponentValue().0.Posit32::FractionSize().this.parameter.Out.0\;
    \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\ <= \Posit32::FractionSize().0._Finished\;
    \Posit32::GetExponentValue().0.Posit32::FractionSize().return.0\ <= \Posit32::FractionSize().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck() start
    \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck().0
                case \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\) then 
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningIndex.0\ := 0;
                            \Posit32::FractionSizeWithoutSignCheck().0._Started\ <= true;
                            \Posit32::FractionSizeWithoutSignCheck().0.this.parameter.In\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionSizeWithoutSignCheck().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= true;
                                    \Posit32::FractionSizeWithoutSignCheck().0._Started\ <= false;
                                    \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck().return.0\ <= \Posit32::FractionSizeWithoutSignCheck().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::FractionWithHiddenBitWithoutSignCheck().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::FractionSizeWithoutSignCheck().0._Started\ <= true;
                            \Posit32::FractionSizeWithoutSignCheck().0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionSizeWithoutSignCheck().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= true;
                                    \Posit32::FractionSizeWithoutSignCheck().0._Started\ <= false;
                                    \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\ <= \Posit32::FractionSizeWithoutSignCheck().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::FractionSizeWithoutSignCheck().0._Started\ <= true;
                            \Posit32::FractionSizeWithoutSignCheck().0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionSizeWithoutSignCheck().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= true;
                                    \Posit32::FractionSizeWithoutSignCheck().0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck().return.0\ <= \Posit32::FractionSizeWithoutSignCheck().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionSizeWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionSizeWithoutSignCheck()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionSizeWithoutSignCheck() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck().0 (#0):
    \Posit32::SetOne(UInt32,UInt16).0._Started\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Started.0\;
    \Posit32::SetOne(UInt32,UInt16).0.bits.parameter.In\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\;
    \Posit32::SetOne(UInt32,UInt16).0.index.parameter.In\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\;
    \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16)._Finished.0\ <= \Posit32::SetOne(UInt32,UInt16).0._Finished\;
    \Posit32::FractionWithHiddenBitWithoutSignCheck().0.Posit32::SetOne(UInt32,UInt16).return.0\ <= \Posit32::SetOne(UInt32,UInt16).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsNaN() start
    -- Signal connections for Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::IsNaN().0._Started\ <= \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Started.0\;
    \Posit32::IsNaN().0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::IsNaN().this.parameter.Out.0\;
    \Posit32::Sqrt(Posit32).0.Posit32::IsNaN()._Finished.0\ <= \Posit32::IsNaN().0._Finished\;
    \Posit32::Sqrt(Posit32).0.Posit32::IsNaN().return.0\ <= \Posit32::IsNaN().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsNaN() end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsZero() start
    \Hast::InternalInvocationProxy().Posit32::IsZero()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::IsZero().0._Started\ <= true;
                            \Posit32::IsZero().0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::IsZero().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsZero().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Finished.0\ <= true;
                                    \Posit32::IsZero().0._Started\ <= false;
                                    \Posit32::Sqrt(Posit32).0.Posit32::IsZero().return.0\ <= \Posit32::IsZero().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Sqrt(Posit32).0.Posit32::IsZero()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::IsZero().0._Started\ <= true;
                            \Posit32::IsZero().0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::IsZero().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\ <= true;
                                    \Posit32::IsZero().0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero().return.0\ <= \Posit32::IsZero().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::IsZero().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::IsZero()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsZero() end


    -- System.Void Hast::InternalInvocationProxy().System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor() start
    -- Signal connections for Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::CalculateScaleFactor().0._Started\ <= \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\;
    \Posit32::CalculateScaleFactor().0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor().this.parameter.Out.0\;
    \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor()._Finished.0\ <= \Posit32::CalculateScaleFactor().0._Finished\;
    \Posit32::Sqrt(Posit32).0.Posit32::CalculateScaleFactor().return.0\ <= \Posit32::CalculateScaleFactor().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck() start
    \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\ <= true;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= true;
                                    \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\ <= false;
                                    \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Sqrt(Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\ <= true;
                            \Posit32::FractionWithHiddenBitWithoutSignCheck().0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionWithHiddenBitWithoutSignCheck().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= true;
                                    \Posit32::FractionWithHiddenBitWithoutSignCheck().0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck().return.0\ <= \Posit32::FractionWithHiddenBitWithoutSignCheck().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionWithHiddenBitWithoutSignCheck().Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::FractionWithHiddenBitWithoutSignCheck()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBitWithoutSignCheck() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32) start
    \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= false;
                \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Sqrt(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\) then 
                            \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ <= true;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\ <= \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= true;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ <= false;
                                    \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32::Sqrt(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::Sqrt(Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\) then 
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ := 0;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ <= true;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := AfterFinished;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= true;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ <= false;
                                    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).Posit32 Posit32::op_Division(Posit32,Posit32).0.runningState.0\ := WaitingForStarted;
                            \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32) start
    -- Signal connections for Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::.ctor(Int32).0._Started\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Started.0\;
    \Posit32::.ctor(Int32).0.this.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).this.parameter.Out.0\;
    \Posit32::.ctor(Int32).0.value.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).value.parameter.Out.0\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32)._Finished.0\ <= \Posit32::.ctor(Int32).0._Finished\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::.ctor(Int32).this.parameter.In.0\ <= \Posit32::.ctor(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32) start
    -- Signal connections for Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::Abs(Posit32).0._Started\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Started.0\;
    \Posit32::Abs(Posit32).0.input.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).input.parameter.Out.0\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32)._Finished.0\ <= \Posit32::Abs(Posit32).0._Finished\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::Abs(Posit32).return.0\ <= \Posit32::Abs(Posit32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::Abs(Lombiq.Arithmetics.Posit32) end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64) start
    -- Signal connections for Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::GetMostSignificantOnePosition(UInt64).0._Started\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Started.0\;
    \Posit32::GetMostSignificantOnePosition(UInt64).0.bits.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).bits.parameter.Out.0\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64)._Finished.0\ <= \Posit32::GetMostSignificantOnePosition(UInt64).0._Finished\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::GetMostSignificantOnePosition(UInt64).return.0\ <= \Posit32::GetMostSignificantOnePosition(UInt64).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt64) end


    -- System.Void Hast::InternalInvocationProxy().System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte) start
    -- Signal connections for Lombiq.Arithmetics.Posit32 Lombiq.Arithmetics.Posit32::op_Division(Lombiq.Arithmetics.Posit32,Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Started\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Started.0\;
    \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.regimeKValue.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).regimeKValue.parameter.Out.0\;
    \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.exponentValue.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).exponentValue.parameter.Out.0\;
    \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.maximumExponentSize.parameter.In\ <= \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).maximumExponentSize.parameter.Out.0\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte)._Finished.0\ <= \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0._Finished\;
    \Posit32 Posit32::op_Division(Posit32,Posit32).0.Posit32::CalculateScaleFactor(SByte,UInt32,Byte).return.0\ <= \Posit32::CalculateScaleFactor(SByte,UInt32,Byte).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor(System.SByte,System.UInt32,System.Byte) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory)._Finished.0\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::RepeatedDivision(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory)._Finished.0\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32AdvancedCalculator::SqrtOfPositsInArray(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.CellIndex\) when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.CellIndex\) when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.DataOut\ when \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\ else \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.DataOut\ when \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \Posit32AdvancedCalculator::SqrtOfPositsInArray(SimpleMemory).0.SimpleMemory.WriteEnable\ or \Posit32AdvancedCalculator::RepeatedDivision(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
set_multicycle_path 26 -setup -to [get_cells -hierarchical {*Posit32\ Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5*}]
set_multicycle_path 25 -hold -to [get_cells -hierarchical {*Posit32\ Posit32::op_Division(Posit32,Posit32).0.binaryOperationResult.5*}]