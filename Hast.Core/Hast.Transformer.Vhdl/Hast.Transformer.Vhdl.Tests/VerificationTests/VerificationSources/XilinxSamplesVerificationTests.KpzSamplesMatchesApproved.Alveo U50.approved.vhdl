-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- Custom inter-dependent type declarations start
    type \unsigned32_Array\ is array (integer range <>) of unsigned(31 downto 0);
    type \unsigned8_Array\ is array (integer range <>) of unsigned(7 downto 0);
    type \boolean_Array\ is array (integer range <>) of boolean;
    type \Hast.Algorithms.Random.RandomMwc64X\ is record 
        \IsNull\: boolean;
        \State\: unsigned(63 downto 0);
    end record;
    type \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\ is record 
        \IsNull\: boolean;
        \BramDx\: \boolean_Array\(0 to 63);
        \BramDy\: \boolean_Array\(0 to 63);
        \Random1\: \Hast.Algorithms.Random.RandomMwc64X\;
        \Random2\: \Hast.Algorithms.Random.RandomMwc64X\;
    end record;
    type \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState_Array\ is array (integer range <>) of \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    type \Hast.Samples.Kpz.Algorithms.KpzKernels\ is record 
        \IsNull\: boolean;
        \_gridRaw\: \unsigned32_Array\(0 to 63);
        \Random1\: \Hast.Algorithms.Random.RandomMwc64X\;
        \Random2\: \Hast.Algorithms.Random.RandomMwc64X\;
        \TestMode\: boolean;
        \NumberOfIterations\: unsigned(31 downto 0);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._States\ is (
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_1\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_2\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_3\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_4\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_5\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_6\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_7\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_8\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_9\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_10\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_11\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_12\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_13\);
    -- Signals:
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._States\ is (
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_1\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_4\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_7\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\);
    -- Signals:
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._States\ is (
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_1\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_4\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_7\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\);
    -- Signals:
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 declarations start
    -- State machine states:
    type \KpzKernels::RandomlySwitchFourCells(Boolean).0._States\ is (
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_1\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_2\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_3\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_4\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_5\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_16\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_17\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_18\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_19\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_20\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_21\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_22\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_23\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_24\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_25\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_26\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_27\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_34\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_35\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_36\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_37\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\);
    -- Signals:
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch.parameter.In\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.In.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).return.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 declarations end


    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 declarations start
    -- State machine states:
    type \KpzKernels::GetIndexFromXY(Int32,Int32).0._States\ is (
        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\, 
        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_1\, 
        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_2\);
    -- Signals:
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\: boolean := false;
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\: boolean := false;
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0.x.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0.y.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 declarations end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 declarations start
    -- State machine states:
    type \KpzKernels::GetGridDx(Int32).0._States\ is (
        \KpzKernels::GetGridDx(Int32).0._State_0\, 
        \KpzKernels::GetGridDx(Int32).0._State_1\, 
        \KpzKernels::GetGridDx(Int32).0._State_2\);
    -- Signals:
    Signal \KpzKernels::GetGridDx(Int32).0._Finished\: boolean := false;
    Signal \KpzKernels::GetGridDx(Int32).0.return\: boolean := false;
    Signal \KpzKernels::GetGridDx(Int32).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDx(Int32).0._Started\: boolean := false;
    Signal \KpzKernels::GetGridDx(Int32).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDx(Int32).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 declarations end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 declarations start
    -- State machine states:
    type \KpzKernels::GetGridDy(Int32).0._States\ is (
        \KpzKernels::GetGridDy(Int32).0._State_0\, 
        \KpzKernels::GetGridDy(Int32).0._State_1\, 
        \KpzKernels::GetGridDy(Int32).0._State_2\);
    -- Signals:
    Signal \KpzKernels::GetGridDy(Int32).0._Finished\: boolean := false;
    Signal \KpzKernels::GetGridDy(Int32).0.return\: boolean := false;
    Signal \KpzKernels::GetGridDy(Int32).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDy(Int32).0._Started\: boolean := false;
    Signal \KpzKernels::GetGridDy(Int32).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDy(Int32).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 declarations start
    -- State machine states:
    type \KpzKernels::SetGridDx(Int32,Boolean).0._States\ is (
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_1\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\);
    -- Signals:
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\: boolean := false;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0._Started\: boolean := false;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.value.parameter.In\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 declarations start
    -- State machine states:
    type \KpzKernels::SetGridDy(Int32,Boolean).0._States\ is (
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_1\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\);
    -- Signals:
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\: boolean := false;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0._Started\: boolean := false;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.value.parameter.In\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernelsInterface::DoIterations(SimpleMemory).0._States\ is (
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_1\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_2\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_3\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_9\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_13\);
    -- Signals:
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Finished.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Finished.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Finished.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernelsInterface::TestAdd(SimpleMemory).0._States\ is (
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_1\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_2\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_3\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_4\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_5\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_6\);
    -- Signals:
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._States\ is (
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_1\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_4\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_5\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_6\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_7\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_8\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_9\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_14\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.In.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Finished.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 declarations end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._States\ is (
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_1\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_4\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_5\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_6\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_7\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_8\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_9\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_14\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.Out.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.In.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Finished.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 declarations end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._States\ is (
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_1\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_4\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_5\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_6\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_7\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_8\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_9\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_14\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.Out.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.In.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Finished.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._States\ is (
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_1\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_2\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_5\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_6\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_7\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_8\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_9\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_10\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_11\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_13\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_14\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_17\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_24\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_25\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_33\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_34\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_35\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_36\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_37\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_44\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_52\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Started.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().this.parameter.In.0\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Finished.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.1\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.2\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().0 declarations start
    -- State machine states:
    type \RandomMwc64X::NextUInt32().0._States\ is (
        \RandomMwc64X::NextUInt32().0._State_0\, 
        \RandomMwc64X::NextUInt32().0._State_1\, 
        \RandomMwc64X::NextUInt32().0._State_2\, 
        \RandomMwc64X::NextUInt32().0._State_3\, 
        \RandomMwc64X::NextUInt32().0._State_4\);
    -- Signals:
    Signal \RandomMwc64X::NextUInt32().0._Finished\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \RandomMwc64X::NextUInt32().0.this.parameter.Out\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \RandomMwc64X::NextUInt32().0._Started\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().0.this.parameter.In\: \Hast.Algorithms.Random.RandomMwc64X\;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().0 declarations end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().1 declarations start
    -- State machine states:
    type \RandomMwc64X::NextUInt32().1._States\ is (
        \RandomMwc64X::NextUInt32().1._State_0\, 
        \RandomMwc64X::NextUInt32().1._State_1\, 
        \RandomMwc64X::NextUInt32().1._State_2\, 
        \RandomMwc64X::NextUInt32().1._State_3\, 
        \RandomMwc64X::NextUInt32().1._State_4\);
    -- Signals:
    Signal \RandomMwc64X::NextUInt32().1._Finished\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().1.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \RandomMwc64X::NextUInt32().1.this.parameter.Out\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \RandomMwc64X::NextUInt32().1._Started\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().1.this.parameter.In\: \Hast.Algorithms.Random.RandomMwc64X\;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().1 declarations end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().2 declarations start
    -- State machine states:
    type \RandomMwc64X::NextUInt32().2._States\ is (
        \RandomMwc64X::NextUInt32().2._State_0\, 
        \RandomMwc64X::NextUInt32().2._State_1\, 
        \RandomMwc64X::NextUInt32().2._State_2\, 
        \RandomMwc64X::NextUInt32().2._State_3\, 
        \RandomMwc64X::NextUInt32().2._State_4\);
    -- Signals:
    Signal \RandomMwc64X::NextUInt32().2._Finished\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().2.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \RandomMwc64X::NextUInt32().2.this.parameter.Out\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \RandomMwc64X::NextUInt32().2._Started\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().2.this.parameter.In\: \Hast.Algorithms.Random.RandomMwc64X\;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().2 declarations end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().3 declarations start
    -- State machine states:
    type \RandomMwc64X::NextUInt32().3._States\ is (
        \RandomMwc64X::NextUInt32().3._State_0\, 
        \RandomMwc64X::NextUInt32().3._State_1\, 
        \RandomMwc64X::NextUInt32().3._State_2\, 
        \RandomMwc64X::NextUInt32().3._State_3\, 
        \RandomMwc64X::NextUInt32().3._State_4\);
    -- Signals:
    Signal \RandomMwc64X::NextUInt32().3._Finished\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().3.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \RandomMwc64X::NextUInt32().3.this.parameter.Out\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \RandomMwc64X::NextUInt32().3._Started\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().3.this.parameter.In\: \Hast.Algorithms.Random.RandomMwc64X\;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().3 declarations end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().4 declarations start
    -- State machine states:
    type \RandomMwc64X::NextUInt32().4._States\ is (
        \RandomMwc64X::NextUInt32().4._State_0\, 
        \RandomMwc64X::NextUInt32().4._State_1\, 
        \RandomMwc64X::NextUInt32().4._State_2\, 
        \RandomMwc64X::NextUInt32().4._State_3\, 
        \RandomMwc64X::NextUInt32().4._State_4\);
    -- Signals:
    Signal \RandomMwc64X::NextUInt32().4._Finished\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().4.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \RandomMwc64X::NextUInt32().4.this.parameter.Out\: \Hast.Algorithms.Random.RandomMwc64X\;
    Signal \RandomMwc64X::NextUInt32().4._Started\: boolean := false;
    Signal \RandomMwc64X::NextUInt32().4.this.parameter.In\: \Hast.Algorithms.Random.RandomMwc64X\;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().4 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\: \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._States\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\;
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\: boolean := false;
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\: std_logic_vector(31 downto 0) := (others => '0');
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\ <= false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\ := false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\ := (others => '0');
            else 
                case \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ is 
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.Out\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_2\ => 
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Random1 = new RandomMwc64X { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random1\.\IsNull\ := false;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random1\.\State\ := to_unsigned(51966, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Random1.State = ((ulong)(((ulong)memory.ReadUInt32 (2) << 32) | (ulong)(memory.ReadUInt32 (3))));
                        -- 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(2, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(3, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\ := (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\) or SmartResize((ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\)), 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random1\.\State\ := ((\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\));
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Random2 = new RandomMwc64X { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random2\.\IsNull\ := false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random2\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Random2.State = ((ulong)(((ulong)memory.ReadUInt32 (4) << 32) | (ulong)(memory.ReadUInt32 (5))));
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_6\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(4, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_7\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_8\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(5, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_9\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\ := (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\) or SmartResize((ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\)), 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random2\.\State\ := ((\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\));
                            -- The following section was transformed from the .NET statement below:
                            -- @this.TestMode = ((long)(memory.ReadUInt32 (1)) & 1L) == 1L;
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_10\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_11\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\ := signed(SmartResize((ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\)), 64)) and to_signed(1, 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\ := (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\) = to_signed(1, 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\TestMode\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- @this.NumberOfIterations = memory.ReadUInt32 (0);
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_12\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_13\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\NumberOfIterations\ := ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\: \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._States\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\ <= false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\ := false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
            else 
                case \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ is 
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\ <= false;
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.Out\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\ => 
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 8) {
                        -- 	int num2;
                        -- 	num2 = 0;
                        -- 	while (num2 < 8) {
                        -- 		int num3;
                        -- 		num3 = num * 8 + num2;
                        -- 		memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                        -- 		num2 = num2 + 1;
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\.
                        -- The while loop's condition:
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ < to_signed(8, 32);
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num2;
                            -- 	num2 = 0;
                            -- 	while (num2 < 8) {
                            -- 		int num3;
                            -- 		num3 = num * 8 + num2;
                            -- 		memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 		num2 = num2 + 1;
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < 8) {
                            -- 	int num3;
                            -- 	num3 = num * 8 + num2;
                            -- 	memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\;
                        else 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ < to_signed(8, 32);
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = num * 8 + num2;
                            -- 	memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num * 8 + num2;
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ * to_signed(8, 32), 32);
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\ + \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\;
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_7\;
                        else 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ + to_signed(1, 32);
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\) then 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(6, 32) + \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\;
                        -- Begin SimpleMemory write.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\;
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\.\_gridRaw\(to_integer(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\)));
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ + to_signed(1, 32);
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\) then 
                                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\: \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._States\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\ <= false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\ := false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
            else 
                case \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ is 
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\ <= false;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.Out\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\ => 
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 8) {
                        -- 	int num2;
                        -- 	num2 = 0;
                        -- 	while (num2 < 8) {
                        -- 		int num3;
                        -- 		num3 = num2 * 8 + num;
                        -- 		@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                        -- 		num2 = num2 + 1;
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\.
                        -- The while loop's condition:
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ < to_signed(8, 32);
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num2;
                            -- 	num2 = 0;
                            -- 	while (num2 < 8) {
                            -- 		int num3;
                            -- 		num3 = num2 * 8 + num;
                            -- 		@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 		num2 = num2 + 1;
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < 8) {
                            -- 	int num3;
                            -- 	num3 = num2 * 8 + num;
                            -- 	@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\;
                        else 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ < to_signed(8, 32);
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = num2 * 8 + num;
                            -- 	@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num2 * 8 + num;
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ * to_signed(8, 32), 32);
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\ + \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- @this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_7\;
                        else 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ + to_signed(1, 32);
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\) then 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(6, 32) + \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\;
                        -- Begin SimpleMemory read.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\;
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\.\_gridRaw\(to_integer(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\)) := ConvertStdLogicVectorToUInt32(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ + to_signed(1, 32);
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\) then 
                                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 state machine start
    \KpzKernels::RandomlySwitchFourCells(Boolean).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\: \KpzKernels::RandomlySwitchFourCells(Boolean).0._States\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.13\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.14\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\ := to_signed(0, 64);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.13\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.14\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\ := false;
            else 
                case \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ is 
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\ = true) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\ = true) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\ <= true;
                        else 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.Out\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_2\ => 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.In\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (@this.Random1);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random1\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random1\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (int)((long)(num) & 7L);
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\ := SmartResize(signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num\), 64)) and to_signed(7, 64), 32);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (int)((long)((num >> 16)) & 7L);
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\ := signed(SmartResize(shift_right(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\ := SmartResize(signed(SmartResize(((\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\)), 64)) and to_signed(7, 64), 32);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\);
                            -- The following section was transformed from the .NET statement below:
                            -- int indexFromXY;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- indexFromXY = KpzKernels.GetIndexFromXY (num2, num3);
                            -- 
                            -- Starting state machine invocation for the following method: System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7111
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (@this.Random2);
                            -- 
                            -- The last invocation for the target state machine finished in the previous state, so need to start the next one in the next state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_5\ => 
                        -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random2\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random2\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = num4 & 0xFFFFu;
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\ and to_unsigned(65535, 32);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (num4 >> 16) & 0xFFFFu;
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\ := shift_right(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\) and to_unsigned(65535, 32);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if ((num2 < 7)) {
                            -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = (num2 + 1);
                            -- } else {
                            -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = 0;
                            -- }
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ < to_signed(7, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\.
                            --     * The false branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\.
                            --     * Execution after either branch will continue in the following state: \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\.

                            if ((\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\)) then 
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\;
                            else 
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9168
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\ => 
                        -- State after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = (conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = num3;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num2;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num3 < 7)) {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = (num3 + 1);
                        -- } else {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = 0;
                        -- }
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ < to_signed(7, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\.
                        --     * The false branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.

                        if ((\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\)) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\;
                        else 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\ => 
                        -- True branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = (num2 + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = (num2 + 1);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ + to_signed(1, 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\ => 
                        -- False branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = 0;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\ => 
                        -- State after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\.
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = (conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\);
                        -- The following section was transformed from the .NET statement below:
                        -- int index;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- index = num8 * 8 + num7;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\ := SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\ * to_signed(8, 32), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\ + \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\;
                        -- The following section was transformed from the .NET statement below:
                        -- int index2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- index2 = num10 * 8 + num9;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\ := SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\ * to_signed(8, 32), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\ + \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY) && !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index) && Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY) && !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2) && (forceSwitch || (long)(num5) < 32767L)) || (!Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY) && Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index) && !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY) && Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2) && (forceSwitch || (long)(num6) < 32767L))) {
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, index, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, index2, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2));
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8968
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\ => 
                        -- True branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = (num3 + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = (num3 + 1);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ + to_signed(1, 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\ => 
                        -- False branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = 0;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_16\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\;
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_17\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.224
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_18\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_19\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_20\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\ := signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\), 64)) < to_signed(32767, 64);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ or \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\ and (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\);
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7613
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_21\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_22\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_23\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\;
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.224
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_26\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_27\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\ := signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\), 64)) < to_signed(32767, 64);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ or \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\ and (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\) or (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\.
                            --     * Execution after either branch will continue in the following state: \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\.

                            if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\) then 
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7849
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\ => 
                        -- State after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\ => 
                        -- True branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, index, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, index2, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY));
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY));
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_34\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_34\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, index, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index));
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_35\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.13\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.13\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_36\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, index2, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2));
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.14\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.14\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\;
                            -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\.
                            if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\) then 
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 state machine end


    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 state machine start
    \KpzKernels::GetIndexFromXY(Int32,Int32).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\: \KpzKernels::GetIndexFromXY(Int32,Int32).0._States\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\;
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.y\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\ <= false;
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\ <= to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\;
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\ := to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.y\ := to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ is 
                    when \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\ = true) then 
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\ = true) then 
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\ <= true;
                        else 
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\ <= false;
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_2\ => 
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0.x.parameter.In\;
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.y\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0.y.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return x + y * 8;
                        -- 
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\ := SmartResize(\KpzKernels::GetIndexFromXY(Int32,Int32).0.y\ * to_signed(8, 32), 32);
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\ + \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\;
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\ <= \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\;
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4484
                end case;
            end if;
        end if;
    end process;
    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 state machine end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 state machine start
    \KpzKernels::GetGridDx(Int32).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::GetGridDx(Int32).0._State\: \KpzKernels::GetGridDx(Int32).0._States\ := \KpzKernels::GetGridDx(Int32).0._State_0\;
        Variable \KpzKernels::GetGridDx(Int32).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::GetGridDx(Int32).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::GetGridDx(Int32).0._Finished\ <= false;
                \KpzKernels::GetGridDx(Int32).0.return\ <= false;
                \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_0\;
                \KpzKernels::GetGridDx(Int32).0.index\ := to_signed(0, 32);
                \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\ := to_signed(0, 64);
                \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\ := false;
            else 
                case \KpzKernels::GetGridDx(Int32).0._State\ is 
                    when \KpzKernels::GetGridDx(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::GetGridDx(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDx(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::GetGridDx(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDx(Int32).0._Finished\ <= true;
                        else 
                            \KpzKernels::GetGridDx(Int32).0._Finished\ <= false;
                            \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::GetGridDx(Int32).0.this.parameter.Out\ <= \KpzKernels::GetGridDx(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDx(Int32).0._State_2\ => 
                        \KpzKernels::GetGridDx(Int32).0.this\ := \KpzKernels::GetGridDx(Int32).0.this.parameter.In\;
                        \KpzKernels::GetGridDx(Int32).0.index\ := \KpzKernels::GetGridDx(Int32).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return ((long)(@this._gridRaw [index]) & 1L) != 0L;
                        -- 
                        \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\ := signed(SmartResize((\KpzKernels::GetGridDx(Int32).0.this\.\_gridRaw\(to_integer(\KpzKernels::GetGridDx(Int32).0.index\))), 64)) and to_signed(1, 64);
                        \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\ := (\KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\) /= to_signed(0, 64);
                        \KpzKernels::GetGridDx(Int32).0.return\ <= \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\;
                        \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 state machine end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 state machine start
    \KpzKernels::GetGridDy(Int32).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::GetGridDy(Int32).0._State\: \KpzKernels::GetGridDy(Int32).0._States\ := \KpzKernels::GetGridDy(Int32).0._State_0\;
        Variable \KpzKernels::GetGridDy(Int32).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::GetGridDy(Int32).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::GetGridDy(Int32).0._Finished\ <= false;
                \KpzKernels::GetGridDy(Int32).0.return\ <= false;
                \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_0\;
                \KpzKernels::GetGridDy(Int32).0.index\ := to_signed(0, 32);
                \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\ := to_signed(0, 64);
                \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\ := false;
            else 
                case \KpzKernels::GetGridDy(Int32).0._State\ is 
                    when \KpzKernels::GetGridDy(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::GetGridDy(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDy(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::GetGridDy(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDy(Int32).0._Finished\ <= true;
                        else 
                            \KpzKernels::GetGridDy(Int32).0._Finished\ <= false;
                            \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::GetGridDy(Int32).0.this.parameter.Out\ <= \KpzKernels::GetGridDy(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDy(Int32).0._State_2\ => 
                        \KpzKernels::GetGridDy(Int32).0.this\ := \KpzKernels::GetGridDy(Int32).0.this.parameter.In\;
                        \KpzKernels::GetGridDy(Int32).0.index\ := \KpzKernels::GetGridDy(Int32).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return ((long)(@this._gridRaw [index]) & 2L) != 0L;
                        -- 
                        \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\ := signed(SmartResize((\KpzKernels::GetGridDy(Int32).0.this\.\_gridRaw\(to_integer(\KpzKernels::GetGridDy(Int32).0.index\))), 64)) and to_signed(2, 64);
                        \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\ := (\KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\) /= to_signed(0, 64);
                        \KpzKernels::GetGridDy(Int32).0.return\ <= \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\;
                        \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 state machine start
    \KpzKernels::SetGridDx(Int32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0._State\: \KpzKernels::SetGridDx(Int32,Boolean).0._States\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\;
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.value\: boolean := false;
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\ <= false;
                \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\;
                \KpzKernels::SetGridDx(Int32,Boolean).0.index\ := to_signed(0, 32);
                \KpzKernels::SetGridDx(Int32,Boolean).0.value\ := false;
                \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \KpzKernels::SetGridDx(Int32,Boolean).0._State\ is 
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\ <= true;
                        else 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\ <= false;
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.Out\ <= \KpzKernels::SetGridDx(Int32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\ => 
                        \KpzKernels::SetGridDx(Int32,Boolean).0.this\ := \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.In\;
                        \KpzKernels::SetGridDx(Int32,Boolean).0.index\ := \KpzKernels::SetGridDx(Int32,Boolean).0.index.parameter.In\;
                        \KpzKernels::SetGridDx(Int32,Boolean).0.value\ := \KpzKernels::SetGridDx(Int32,Boolean).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (value) {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 1u;
                        -- } else {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 0u;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\ and ends in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\.
                        --     * The false branch starts in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\ and ends in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\.

                        if (\KpzKernels::SetGridDx(Int32,Boolean).0.value\) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\;
                        else 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\ => 
                        -- State after the if-else which was started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this._gridRaw [index] = (@this._gridRaw [index] & 0xFFFFFFFEu) | (conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1);
                        -- 
                        -- Since the integer literal 4294967294 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111110).
                        \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\ := \KpzKernels::SetGridDx(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDx(Int32,Boolean).0.index\)) and "11111111111111111111111111111110";
                        \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\ := (\KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\) or (\KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\);
                        \KpzKernels::SetGridDx(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDx(Int32,Boolean).0.index\)) := \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\;
                        \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\ => 
                        -- True branch of the if-else started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 1u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 1u;
                        -- 
                        \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\ := to_unsigned(1, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._State\ = \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\ => 
                        -- False branch of the if-else started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 0u;
                        -- 
                        \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._State\ = \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 state machine start
    \KpzKernels::SetGridDy(Int32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0._State\: \KpzKernels::SetGridDy(Int32,Boolean).0._States\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\;
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.value\: boolean := false;
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\ <= false;
                \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\;
                \KpzKernels::SetGridDy(Int32,Boolean).0.index\ := to_signed(0, 32);
                \KpzKernels::SetGridDy(Int32,Boolean).0.value\ := false;
                \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \KpzKernels::SetGridDy(Int32,Boolean).0._State\ is 
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\ <= true;
                        else 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\ <= false;
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.Out\ <= \KpzKernels::SetGridDy(Int32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\ => 
                        \KpzKernels::SetGridDy(Int32,Boolean).0.this\ := \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.In\;
                        \KpzKernels::SetGridDy(Int32,Boolean).0.index\ := \KpzKernels::SetGridDy(Int32,Boolean).0.index.parameter.In\;
                        \KpzKernels::SetGridDy(Int32,Boolean).0.value\ := \KpzKernels::SetGridDy(Int32,Boolean).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (value) {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 2u;
                        -- } else {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 0u;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\ and ends in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\.
                        --     * The false branch starts in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\ and ends in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\.

                        if (\KpzKernels::SetGridDy(Int32,Boolean).0.value\) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\;
                        else 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\ => 
                        -- State after the if-else which was started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this._gridRaw [index] = (@this._gridRaw [index] & 0xFFFFFFFDu) | (conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698);
                        -- 
                        -- Since the integer literal 4294967293 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111101).
                        \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\ := \KpzKernels::SetGridDy(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDy(Int32,Boolean).0.index\)) and "11111111111111111111111111111101";
                        \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\ := (\KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\) or (\KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\);
                        \KpzKernels::SetGridDy(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDy(Int32,Boolean).0.index\)) := \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\;
                        \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\ => 
                        -- True branch of the if-else started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 2u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 2u;
                        -- 
                        \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\ := to_unsigned(2, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._State\ = \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\ => 
                        -- False branch of the if-else started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 0u;
                        -- 
                        \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._State\ = \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernelsInterface::DoIterations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\: \KpzKernelsInterface::DoIterations(SimpleMemory).0._States\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\ := false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
            else 
                case \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ is 
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- KpzKernels kpzKernels;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- kpzKernels = new KpzKernels ();
                        -- 
                        -- Initializing record fields to their defaults.
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\IsNull\ := false;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\_gridRaw\ := (others => to_unsigned(0, 32));
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\TestMode\ := false;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\NumberOfIterations\ := to_unsigned(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.Samples.Kpz.Algorithms.KpzKernels.CopyFromSimpleMemoryToRawGrid (kpzKernels, memory);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ <= true;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.InitializeParametersFromMemory (kpzKernels, memory);
                            -- 
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ <= true;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (kpzKernels.TestMode) {
                            -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 1;
                            -- } else {
                            -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 64;
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\ and ends in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\.
                            --     * The false branch starts in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\ and ends in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\.

                            if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\TestMode\) then 
                                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\;
                            else 
                                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\ => 
                        -- State after the if-else which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29);
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\ := (\KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num2) < (long)(kpzKernels.NumberOfIterations)) {
                        -- 	int num3;
                        -- 	num3 = 0;
                        -- 	while (num3 < num) {
                        -- 		Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                        -- 		num3 = num3 + 1;
                        -- 	}
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\ => 
                        -- True branch of the if-else started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 1;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\ => 
                        -- False branch of the if-else started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 64;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 64;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\ := to_signed(64, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\.
                        -- The while loop's condition:
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\ := SmartResize((\KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\), 64) < signed(SmartResize((\KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\NumberOfIterations\), 64));
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = 0;
                            -- 	while (num3 < num) {
                            -- 		Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 		num3 = num3 + 1;
                            -- 	}
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num3 < num) {
                            -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\;
                        else 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_9\ => 
                        -- State after the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.Samples.Kpz.Algorithms.KpzKernels.CopyToSimpleMemoryFromRawGrid (kpzKernels, memory);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ <= true;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\.
                        -- The while loop's condition:
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ < \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\;
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean)
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\TestMode\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ <= true;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\;
                        else 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\ => 
                        -- State after the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + 1;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ + to_signed(1, 32);
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\ if the loop wasn't exited with a state change.
                            if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\) then 
                                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.In.0\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernelsInterface::TestAdd(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\: \KpzKernelsInterface::TestAdd(SimpleMemory).0._States\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\;
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\ <= false;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\ := (others => '0');
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 32);
            else 
                case \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ is 
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteUInt32 (2, memory.ReadUInt32 (0) + memory.ReadUInt32 (1));
                        -- 
                        -- Begin SimpleMemory read.
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\ := ConvertStdLogicVectorToUInt32(\KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\) + ConvertStdLogicVectorToUInt32(\KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\);
                            -- Begin SimpleMemory write.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(2, 32);
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\);
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_6\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 state machine start
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._States\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.0\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.1\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ is 
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.Out\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\ => 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 32) {
                        -- 	uint num2;
                        -- 	num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                        -- 	uint num3;
                        -- 	num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                        -- 	int num4;
                        -- 	num4 = (int)((long)(num2) & 7L);
                        -- 	int num5;
                        -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 	int num6;
                        -- 	num6 = num4 + num5 * 8;
                        -- 	uint num7;
                        -- 	num7 = num3 & 0xFFFFu;
                        -- 	uint num8;
                        -- 	num8 = (num3 >> 16) & 0xFFFFu;
                        -- 	if (num4 < 7 && num5 < 7) {
                        -- 		int num9;
                        -- 		num9 = num4 + 1;
                        -- 		int num10;
                        -- 		num10 = num5;
                        -- 		int num11;
                        -- 		num11 = num4;
                        -- 		int num12;
                        -- 		num12 = num5 + 1;
                        -- 		int num13;
                        -- 		num13 = num10 * 8 + num9;
                        -- 		int num14;
                        -- 		num14 = num12 * 8 + num11;
                        -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 		}
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ < to_signed(32, 32);
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num2;
                            -- 	num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                            -- 	uint num3;
                            -- 	num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                            -- 	int num4;
                            -- 	num4 = (int)((long)(num2) & 7L);
                            -- 	int num5;
                            -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 	int num6;
                            -- 	num6 = num4 + num5 * 8;
                            -- 	uint num7;
                            -- 	num7 = num3 & 0xFFFFu;
                            -- 	uint num8;
                            -- 	num8 = (num3 >> 16) & 0xFFFFu;
                            -- 	if (num4 < 7 && num5 < 7) {
                            -- 		int num9;
                            -- 		num9 = num4 + 1;
                            -- 		int num10;
                            -- 		num10 = num5;
                            -- 		int num11;
                            -- 		num11 = num4;
                            -- 		int num12;
                            -- 		num12 = num5 + 1;
                            -- 		int num13;
                            -- 		num13 = num10 * 8 + num9;
                            -- 		int num14;
                            -- 		num14 = num12 * 8 + num11;
                            -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                            -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                            -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                            -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                            -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                            -- 		}
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random1\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_5\;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return rawTaskState;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random1\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_6\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_7\ => 
                        -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random2\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.1\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (int)((long)(num2) & 7L);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\ := SmartResize(signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\), 64)) and to_signed(7, 64), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\ := SmartResize(signed(SmartResize(((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\)), 64)) and to_signed(7, 64), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num4 + num5 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num3 & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\ and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (num3 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\ := shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\) and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 7 && num5 < 7) {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9678
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6744
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num4 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num5;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num4;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num5 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = num10 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 * 8 + num11;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)) and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.9987
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.9853
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\) or (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\.
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\;
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4008
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 state machine end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 state machine start
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._States\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.0\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.1\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ is 
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.Out\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\ => 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 32) {
                        -- 	uint num2;
                        -- 	num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                        -- 	uint num3;
                        -- 	num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                        -- 	int num4;
                        -- 	num4 = (int)((long)(num2) & 7L);
                        -- 	int num5;
                        -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 	int num6;
                        -- 	num6 = num4 + num5 * 8;
                        -- 	uint num7;
                        -- 	num7 = num3 & 0xFFFFu;
                        -- 	uint num8;
                        -- 	num8 = (num3 >> 16) & 0xFFFFu;
                        -- 	if (num4 < 7 && num5 < 7) {
                        -- 		int num9;
                        -- 		num9 = num4 + 1;
                        -- 		int num10;
                        -- 		num10 = num5;
                        -- 		int num11;
                        -- 		num11 = num4;
                        -- 		int num12;
                        -- 		num12 = num5 + 1;
                        -- 		int num13;
                        -- 		num13 = num10 * 8 + num9;
                        -- 		int num14;
                        -- 		num14 = num12 * 8 + num11;
                        -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 		}
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ < to_signed(32, 32);
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num2;
                            -- 	num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                            -- 	uint num3;
                            -- 	num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                            -- 	int num4;
                            -- 	num4 = (int)((long)(num2) & 7L);
                            -- 	int num5;
                            -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 	int num6;
                            -- 	num6 = num4 + num5 * 8;
                            -- 	uint num7;
                            -- 	num7 = num3 & 0xFFFFu;
                            -- 	uint num8;
                            -- 	num8 = (num3 >> 16) & 0xFFFFu;
                            -- 	if (num4 < 7 && num5 < 7) {
                            -- 		int num9;
                            -- 		num9 = num4 + 1;
                            -- 		int num10;
                            -- 		num10 = num5;
                            -- 		int num11;
                            -- 		num11 = num4;
                            -- 		int num12;
                            -- 		num12 = num5 + 1;
                            -- 		int num13;
                            -- 		num13 = num10 * 8 + num9;
                            -- 		int num14;
                            -- 		num14 = num12 * 8 + num11;
                            -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                            -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                            -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                            -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                            -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                            -- 		}
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random1\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_5\;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return rawTaskState;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random1\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_6\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_7\ => 
                        -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random2\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.1\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (int)((long)(num2) & 7L);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\ := SmartResize(signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\), 64)) and to_signed(7, 64), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\ := SmartResize(signed(SmartResize(((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\)), 64)) and to_signed(7, 64), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num4 + num5 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num3 & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\ and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (num3 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\ := shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\) and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 7 && num5 < 7) {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9678
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6744
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num4 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num5;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num4;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num5 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = num10 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 * 8 + num11;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)) and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.9987
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.9853
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\) or (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\.
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\;
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4008
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 state machine end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 state machine start
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._States\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.0\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.1\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ is 
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.Out\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\ => 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 32) {
                        -- 	uint num2;
                        -- 	num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                        -- 	uint num3;
                        -- 	num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                        -- 	int num4;
                        -- 	num4 = (int)((long)(num2) & 7L);
                        -- 	int num5;
                        -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 	int num6;
                        -- 	num6 = num4 + num5 * 8;
                        -- 	uint num7;
                        -- 	num7 = num3 & 0xFFFFu;
                        -- 	uint num8;
                        -- 	num8 = (num3 >> 16) & 0xFFFFu;
                        -- 	if (num4 < 7 && num5 < 7) {
                        -- 		int num9;
                        -- 		num9 = num4 + 1;
                        -- 		int num10;
                        -- 		num10 = num5;
                        -- 		int num11;
                        -- 		num11 = num4;
                        -- 		int num12;
                        -- 		num12 = num5 + 1;
                        -- 		int num13;
                        -- 		num13 = num10 * 8 + num9;
                        -- 		int num14;
                        -- 		num14 = num12 * 8 + num11;
                        -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 		}
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ < to_signed(32, 32);
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num2;
                            -- 	num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                            -- 	uint num3;
                            -- 	num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                            -- 	int num4;
                            -- 	num4 = (int)((long)(num2) & 7L);
                            -- 	int num5;
                            -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 	int num6;
                            -- 	num6 = num4 + num5 * 8;
                            -- 	uint num7;
                            -- 	num7 = num3 & 0xFFFFu;
                            -- 	uint num8;
                            -- 	num8 = (num3 >> 16) & 0xFFFFu;
                            -- 	if (num4 < 7 && num5 < 7) {
                            -- 		int num9;
                            -- 		num9 = num4 + 1;
                            -- 		int num10;
                            -- 		num10 = num5;
                            -- 		int num11;
                            -- 		num11 = num4;
                            -- 		int num12;
                            -- 		num12 = num5 + 1;
                            -- 		int num13;
                            -- 		num13 = num10 * 8 + num9;
                            -- 		int num14;
                            -- 		num14 = num12 * 8 + num11;
                            -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                            -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                            -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                            -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                            -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                            -- 		}
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random1);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random1\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_5\;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return rawTaskState;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random1\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (rawTaskState.Random2);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_6\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_7\ => 
                        -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random2\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.1\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (int)((long)(num2) & 7L);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\ := SmartResize(signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\), 64)) and to_signed(7, 64), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\ := SmartResize(signed(SmartResize(((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\)), 64)) and to_signed(7, 64), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num4 + num5 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num3 & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\ and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (num3 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\ := shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\) and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 7 && num5 < 7) {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9678
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6744
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num4 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num5;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num4;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num5 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = num10 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 * 8 + num11;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)) and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.9987
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.9853
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\) or (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\.
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\;
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4008
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\: \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._States\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState_Array\(0 to 7);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState_Array\(0 to 7);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.3\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ := 0;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ is 
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num * 2;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\ * to_signed(2, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- RandomMwc64X randomMwc64X;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- randomMwc64X = new RandomMwc64X ();
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- KpzKernelsTaskState[] array;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array = new KpzKernelsTaskState[8];
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- while (num4 < 8) {
                            -- 	num3 = num3 + 1;
                            -- 	RandomMwc64X object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3 = new RandomMwc64X { };
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3.State = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4] = new KpzKernelsTaskState { };
                            -- 	array [num4].Random1 = object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	array [num4].BramDy = new bool[64];
                            -- 	array [num4].BramDx = new bool[64];
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random1.State = array [num4].Random1.State | ((ulong)num5 << 32);
                            -- 	num3 = num3 + 1;
                            -- 	array [num4].Random2 = new RandomMwc64X { };
                            -- 	array [num4].Random2.State = memory.ReadUInt32 (1 + num3);
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random2.State = array [num4].Random2.State | ((ulong)num5 << 32);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1221
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	num3 = num3 + 1;
                            -- 	RandomMwc64X object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3 = new RandomMwc64X { };
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3.State = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4] = new KpzKernelsTaskState { };
                            -- 	array [num4].Random1 = object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	array [num4].BramDy = new bool[64];
                            -- 	array [num4].BramDx = new bool[64];
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random1.State = array [num4].Random1.State | ((ulong)num5 << 32);
                            -- 	num3 = num3 + 1;
                            -- 	array [num4].Random2 = new RandomMwc64X { };
                            -- 	array [num4].Random2.State = memory.ReadUInt32 (1 + num3);
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random2.State = array [num4].Random2.State | ((ulong)num5 << 32);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- RandomMwc64X object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3 = new RandomMwc64X { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\.\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3.State = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- Begin SimpleMemory read.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_6\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_5\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num3 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\;
                        -- The following section was transformed from the .NET statement below:
                        -- randomMwc64X.State = memory.ReadUInt32 (1 + num3);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_6\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\.\State\ := SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4] = new KpzKernelsTaskState { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDx\ := (others => false);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDy\ := (others => false);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random1 = object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random1\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].BramDy = new bool[64];
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDy\ := (others => false);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].BramDx = new bool[64];
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDx\ := (others => false);
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_7\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random1.State = array [num4].Random1.State | ((ulong)num5 << 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(shift_left(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\, 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random1\.\State\ or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random1\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random2 = new RandomMwc64X { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random2.State = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9331
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_9\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_10\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ := SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\;
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_11\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random2.State = array [num4].Random2.State | ((ulong)num5 << 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\ := SmartResize(shift_left(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\, 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\;
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num4 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\) then 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6068
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_13\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\;
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_14\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\);
                            -- The following section was transformed from the .NET statement below:
                            -- randomMwc64X.State = randomMwc64X.State | ((ulong)num5 << 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(shift_left(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\, 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num6 < num2) {
                            -- 	uint num7;
                            -- 	num7 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (randomMwc64X);
                            -- 	int num8;
                            -- 	num8 = (int)(7L & (long)(num7));
                            -- 	int num9;
                            -- 	num9 = (int)(7L & (long)((num7 >> 16)));
                            -- 	int num10;
                            -- 	num10 = 0;
                            -- 	while (num10 < 8) {
                            -- 		Task<KpzKernelsTaskState>[] array2;
                            -- 		array2 = new Task<KpzKernelsTaskState>[8];
                            -- 		int num11;
                            -- 		num11 = 0;
                            -- 		while (num11 < 8) {
                            -- 			int num12;
                            -- 			num12 = num11 + num10 * 8;
                            -- 			int num13;
                            -- 			num13 = num12 - num12 / 8 * 8;
                            -- 			int num14;
                            -- 			num14 = num12 / 8;
                            -- 			int num15;
                            -- 			num15 = num13 * 8 + num8;
                            -- 			int num16;
                            -- 			num16 = num14 * 8 + num9;
                            -- 			int num17;
                            -- 			num17 = 0;
                            -- 			while (num17 < 8) {
                            -- 				int num18;
                            -- 				num18 = 0;
                            -- 				while (num18 < 8) {
                            -- 					int num19;
                            -- 					int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 					remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 					num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 					int num20;
                            -- 					int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 					remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 					num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 					uint num21;
                            -- 					num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 					array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 					array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 					num18 = num18 + 1;
                            -- 				}
                            -- 				num17 = num17 + 1;
                            -- 			}
                            -- 			array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 			num11 = num11 + 1;
                            -- 		}
                            -- 		Task.WhenAll (array2).Wait ();
                            -- 		int num22;
                            -- 		num22 = 0;
                            -- 		while (num22 < 8) {
                            -- 			int num23;
                            -- 			num23 = num22 + num10 * 8;
                            -- 			int num24;
                            -- 			num24 = num23 - num23 / 8 * 8;
                            -- 			int num25;
                            -- 			num25 = num23 / 8;
                            -- 			int num26;
                            -- 			num26 = num24 * 8 + num8;
                            -- 			int num27;
                            -- 			num27 = num25 * 8 + num9;
                            -- 			int num28;
                            -- 			num28 = 0;
                            -- 			while (num28 < 8) {
                            -- 				int num29;
                            -- 				num29 = 0;
                            -- 				while (num29 < 8) {
                            -- 					int num30;
                            -- 					int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 					remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 					num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 					int num31;
                            -- 					int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 					remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 					num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 					uint number;
                            -- 					uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 					if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 					} else {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 					}
                            -- 					uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 					if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 					} else {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 					}
                            -- 					number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 					memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 					num29 = num29 + 1;
                            -- 				}
                            -- 				num28 = num28 + 1;
                            -- 			}
                            -- 			array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 			array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 			num22 = num22 + 1;
                            -- 		}
                            -- 		num10 = num10 + 1;
                            -- 	}
                            -- 	num6 = num6 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2805
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ < \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\;
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num7;
                            -- 	num7 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (randomMwc64X);
                            -- 	int num8;
                            -- 	num8 = (int)(7L & (long)(num7));
                            -- 	int num9;
                            -- 	num9 = (int)(7L & (long)((num7 >> 16)));
                            -- 	int num10;
                            -- 	num10 = 0;
                            -- 	while (num10 < 8) {
                            -- 		Task<KpzKernelsTaskState>[] array2;
                            -- 		array2 = new Task<KpzKernelsTaskState>[8];
                            -- 		int num11;
                            -- 		num11 = 0;
                            -- 		while (num11 < 8) {
                            -- 			int num12;
                            -- 			num12 = num11 + num10 * 8;
                            -- 			int num13;
                            -- 			num13 = num12 - num12 / 8 * 8;
                            -- 			int num14;
                            -- 			num14 = num12 / 8;
                            -- 			int num15;
                            -- 			num15 = num13 * 8 + num8;
                            -- 			int num16;
                            -- 			num16 = num14 * 8 + num9;
                            -- 			int num17;
                            -- 			num17 = 0;
                            -- 			while (num17 < 8) {
                            -- 				int num18;
                            -- 				num18 = 0;
                            -- 				while (num18 < 8) {
                            -- 					int num19;
                            -- 					int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 					remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 					num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 					int num20;
                            -- 					int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 					remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 					num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 					uint num21;
                            -- 					num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 					array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 					array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 					num18 = num18 + 1;
                            -- 				}
                            -- 				num17 = num17 + 1;
                            -- 			}
                            -- 			array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 			num11 = num11 + 1;
                            -- 		}
                            -- 		Task.WhenAll (array2).Wait ();
                            -- 		int num22;
                            -- 		num22 = 0;
                            -- 		while (num22 < 8) {
                            -- 			int num23;
                            -- 			num23 = num22 + num10 * 8;
                            -- 			int num24;
                            -- 			num24 = num23 - num23 / 8 * 8;
                            -- 			int num25;
                            -- 			num25 = num23 / 8;
                            -- 			int num26;
                            -- 			num26 = num24 * 8 + num8;
                            -- 			int num27;
                            -- 			num27 = num25 * 8 + num9;
                            -- 			int num28;
                            -- 			num28 = 0;
                            -- 			while (num28 < 8) {
                            -- 				int num29;
                            -- 				num29 = 0;
                            -- 				while (num29 < 8) {
                            -- 					int num30;
                            -- 					int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 					remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 					num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 					int num31;
                            -- 					int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 					remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 					num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 					uint number;
                            -- 					uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 					if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 					} else {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 					}
                            -- 					uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 					if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 					} else {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 					}
                            -- 					number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 					memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 					num29 = num29 + 1;
                            -- 				}
                            -- 				num28 = num28 + 1;
                            -- 			}
                            -- 			array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 			array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 			num22 = num22 + 1;
                            -- 		}
                            -- 		num10 = num10 + 1;
                            -- 	}
                            -- 	num6 = num6 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = Hast.Algorithms.Random.RandomMwc64X.NextUInt32 (randomMwc64X);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Started.0\ <= true;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_17\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32()
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Started.0\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Finished.0\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().return.0\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().this.parameter.In.0\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num8;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num8 = (int)(7L & (long)(num7));
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\ := SmartResize(to_signed(7, 64) and signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\), 64)), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num9;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num9 = (int)(7L & (long)((num7 >> 16)));
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\ := SmartResize(to_signed(7, 64) and signed(SmartResize(((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\)), 64)), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num10;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num10 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num10 < 8) {
                            -- 	Task<KpzKernelsTaskState>[] array2;
                            -- 	array2 = new Task<KpzKernelsTaskState>[8];
                            -- 	int num11;
                            -- 	num11 = 0;
                            -- 	while (num11 < 8) {
                            -- 		int num12;
                            -- 		num12 = num11 + num10 * 8;
                            -- 		int num13;
                            -- 		num13 = num12 - num12 / 8 * 8;
                            -- 		int num14;
                            -- 		num14 = num12 / 8;
                            -- 		int num15;
                            -- 		num15 = num13 * 8 + num8;
                            -- 		int num16;
                            -- 		num16 = num14 * 8 + num9;
                            -- 		int num17;
                            -- 		num17 = 0;
                            -- 		while (num17 < 8) {
                            -- 			int num18;
                            -- 			num18 = 0;
                            -- 			while (num18 < 8) {
                            -- 				int num19;
                            -- 				int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 				remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 				num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 				int num20;
                            -- 				int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 				remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 				num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 				uint num21;
                            -- 				num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 				array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 				array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 				num18 = num18 + 1;
                            -- 			}
                            -- 			num17 = num17 + 1;
                            -- 		}
                            -- 		array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 		num11 = num11 + 1;
                            -- 	}
                            -- 	Task.WhenAll (array2).Wait ();
                            -- 	int num22;
                            -- 	num22 = 0;
                            -- 	while (num22 < 8) {
                            -- 		int num23;
                            -- 		num23 = num22 + num10 * 8;
                            -- 		int num24;
                            -- 		num24 = num23 - num23 / 8 * 8;
                            -- 		int num25;
                            -- 		num25 = num23 / 8;
                            -- 		int num26;
                            -- 		num26 = num24 * 8 + num8;
                            -- 		int num27;
                            -- 		num27 = num25 * 8 + num9;
                            -- 		int num28;
                            -- 		num28 = 0;
                            -- 		while (num28 < 8) {
                            -- 			int num29;
                            -- 			num29 = 0;
                            -- 			while (num29 < 8) {
                            -- 				int num30;
                            -- 				int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 				remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 				num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 				int num31;
                            -- 				int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 				remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 				num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 				uint number;
                            -- 				uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 				if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 				} else {
                            -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 				}
                            -- 				uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 				if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 				} else {
                            -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 				}
                            -- 				number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 				memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 				num29 = num29 + 1;
                            -- 			}
                            -- 			num28 = num28 + 1;
                            -- 		}
                            -- 		array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 		array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 		num22 = num22 + 1;
                            -- 	}
                            -- 	num10 = num10 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7111
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Task<KpzKernelsTaskState>[] array2;
                            -- 	array2 = new Task<KpzKernelsTaskState>[8];
                            -- 	int num11;
                            -- 	num11 = 0;
                            -- 	while (num11 < 8) {
                            -- 		int num12;
                            -- 		num12 = num11 + num10 * 8;
                            -- 		int num13;
                            -- 		num13 = num12 - num12 / 8 * 8;
                            -- 		int num14;
                            -- 		num14 = num12 / 8;
                            -- 		int num15;
                            -- 		num15 = num13 * 8 + num8;
                            -- 		int num16;
                            -- 		num16 = num14 * 8 + num9;
                            -- 		int num17;
                            -- 		num17 = 0;
                            -- 		while (num17 < 8) {
                            -- 			int num18;
                            -- 			num18 = 0;
                            -- 			while (num18 < 8) {
                            -- 				int num19;
                            -- 				int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 				remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 				num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 				int num20;
                            -- 				int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 				remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 				num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 				uint num21;
                            -- 				num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 				array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 				array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 				num18 = num18 + 1;
                            -- 			}
                            -- 			num17 = num17 + 1;
                            -- 		}
                            -- 		array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 		num11 = num11 + 1;
                            -- 	}
                            -- 	Task.WhenAll (array2).Wait ();
                            -- 	int num22;
                            -- 	num22 = 0;
                            -- 	while (num22 < 8) {
                            -- 		int num23;
                            -- 		num23 = num22 + num10 * 8;
                            -- 		int num24;
                            -- 		num24 = num23 - num23 / 8 * 8;
                            -- 		int num25;
                            -- 		num25 = num23 / 8;
                            -- 		int num26;
                            -- 		num26 = num24 * 8 + num8;
                            -- 		int num27;
                            -- 		num27 = num25 * 8 + num9;
                            -- 		int num28;
                            -- 		num28 = 0;
                            -- 		while (num28 < 8) {
                            -- 			int num29;
                            -- 			num29 = 0;
                            -- 			while (num29 < 8) {
                            -- 				int num30;
                            -- 				int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 				remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 				num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 				int num31;
                            -- 				int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 				remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 				num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 				uint number;
                            -- 				uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 				if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 				} else {
                            -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 				}
                            -- 				uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 				if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 				} else {
                            -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 				}
                            -- 				number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 				memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 				num29 = num29 + 1;
                            -- 			}
                            -- 			num28 = num28 + 1;
                            -- 		}
                            -- 		array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 		array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 		num22 = num22 + 1;
                            -- 	}
                            -- 	num10 = num10 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Task<KpzKernelsTaskState>[] array2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array2 = new Task<KpzKernelsTaskState>[8];
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num11;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num11 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num11 < 8) {
                            -- 	int num12;
                            -- 	num12 = num11 + num10 * 8;
                            -- 	int num13;
                            -- 	num13 = num12 - num12 / 8 * 8;
                            -- 	int num14;
                            -- 	num14 = num12 / 8;
                            -- 	int num15;
                            -- 	num15 = num13 * 8 + num8;
                            -- 	int num16;
                            -- 	num16 = num14 * 8 + num9;
                            -- 	int num17;
                            -- 	num17 = 0;
                            -- 	while (num17 < 8) {
                            -- 		int num18;
                            -- 		num18 = 0;
                            -- 		while (num18 < 8) {
                            -- 			int num19;
                            -- 			int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 			remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 			num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 			int num20;
                            -- 			int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 			remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 			num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 			uint num21;
                            -- 			num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 			array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 			array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 			num18 = num18 + 1;
                            -- 		}
                            -- 		num17 = num17 + 1;
                            -- 	}
                            -- 	array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 	num11 = num11 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\.
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = num6 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num12;
                            -- 	num12 = num11 + num10 * 8;
                            -- 	int num13;
                            -- 	num13 = num12 - num12 / 8 * 8;
                            -- 	int num14;
                            -- 	num14 = num12 / 8;
                            -- 	int num15;
                            -- 	num15 = num13 * 8 + num8;
                            -- 	int num16;
                            -- 	num16 = num14 * 8 + num9;
                            -- 	int num17;
                            -- 	num17 = 0;
                            -- 	while (num17 < 8) {
                            -- 		int num18;
                            -- 		num18 = 0;
                            -- 		while (num18 < 8) {
                            -- 			int num19;
                            -- 			int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 			remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 			num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 			int num20;
                            -- 			int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 			remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 			num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 			uint num21;
                            -- 			num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 			array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 			array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 			num18 = num18 + 1;
                            -- 		}
                            -- 		num17 = num17 + 1;
                            -- 	}
                            -- 	array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 	num11 = num11 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num12;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num12 = num11 + num10 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num13;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num13 = num12 - num12 / 8 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array2).Wait ();
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 / 8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_25\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num15;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num15 = num13 * 8 + num8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num16;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num16 = num14 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num17;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num17 = 0;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num17 < 8) {
                        -- 	int num18;
                        -- 	num18 = 0;
                        -- 	while (num18 < 8) {
                        -- 		int num19;
                        -- 		int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                        -- 		remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                        -- 		num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                        -- 		int num20;
                        -- 		int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                        -- 		remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                        -- 		num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                        -- 		uint num21;
                        -- 		num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                        -- 		array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                        -- 		array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                        -- 		num18 = num18 + 1;
                        -- 	}
                        -- 	num17 = num17 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num18;
                            -- 	num18 = 0;
                            -- 	while (num18 < 8) {
                            -- 		int num19;
                            -- 		int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 		remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 		num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 		int num20;
                            -- 		int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 		remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 		num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 		uint num21;
                            -- 		num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 		array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 		array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 		num18 = num18 + 1;
                            -- 	}
                            -- 	num17 = num17 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num18;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num18 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num18 < 8) {
                            -- 	int num19;
                            -- 	int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 	remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 	num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 	int num20;
                            -- 	int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 	remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 	num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 	uint num21;
                            -- 	num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 	array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 	array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 	num18 = num18 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\.
                        -- The following section was transformed from the .NET statement below:
                        -- array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                        -- 
                        -- Starting state machine invocation for the following method: Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object)
                        case \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ is 
                            when 0 => 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.0\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\));
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ <= true;
                            when 1 => 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.1\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\));
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ <= true;
                            when 2 => 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.2\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\));
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ <= true;
                        end case;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ + 1;
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num11 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num19;
                            -- 	int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 	remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 	num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 	int num20;
                            -- 	int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 	remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 	num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 	uint num21;
                            -- 	num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 	array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 	array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 	num18 = num18 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num19;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\);
                            -- The following section was transformed from the .NET statement below:
                            -- num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\.
                        -- The following section was transformed from the .NET statement below:
                        -- num17 = num17 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num20;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\);
                        -- The following section was transformed from the .NET statement below:
                        -- num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_33\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_34\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(35, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.7776
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\;
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\ := signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\), 64)) and to_signed(1, 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\) = to_signed(1, 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\)).\BramDx\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\)) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9035
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\ := signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\), 64)) and to_signed(2, 64);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\) = to_signed(2, 64);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\)).\BramDy\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\)) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\;
                        -- The following section was transformed from the .NET statement below:
                        -- num18 = num18 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.9035
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object)
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.1\ and \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.2\ and \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.0\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ := 0;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.1\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.0\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.2\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.1\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.2\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(0) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.1\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(1) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.2\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(2) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num22;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num22 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num22 < 8) {
                            -- 	int num23;
                            -- 	num23 = num22 + num10 * 8;
                            -- 	int num24;
                            -- 	num24 = num23 - num23 / 8 * 8;
                            -- 	int num25;
                            -- 	num25 = num23 / 8;
                            -- 	int num26;
                            -- 	num26 = num24 * 8 + num8;
                            -- 	int num27;
                            -- 	num27 = num25 * 8 + num9;
                            -- 	int num28;
                            -- 	num28 = 0;
                            -- 	while (num28 < 8) {
                            -- 		int num29;
                            -- 		num29 = 0;
                            -- 		while (num29 < 8) {
                            -- 			int num30;
                            -- 			int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 			remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 			num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 			int num31;
                            -- 			int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 			remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 			num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 			uint number;
                            -- 			uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 			if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 			} else {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 			}
                            -- 			uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 			if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 			} else {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 			}
                            -- 			number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 			memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 			num29 = num29 + 1;
                            -- 		}
                            -- 		num28 = num28 + 1;
                            -- 	}
                            -- 	array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 	array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 	num22 = num22 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num23;
                            -- 	num23 = num22 + num10 * 8;
                            -- 	int num24;
                            -- 	num24 = num23 - num23 / 8 * 8;
                            -- 	int num25;
                            -- 	num25 = num23 / 8;
                            -- 	int num26;
                            -- 	num26 = num24 * 8 + num8;
                            -- 	int num27;
                            -- 	num27 = num25 * 8 + num9;
                            -- 	int num28;
                            -- 	num28 = 0;
                            -- 	while (num28 < 8) {
                            -- 		int num29;
                            -- 		num29 = 0;
                            -- 		while (num29 < 8) {
                            -- 			int num30;
                            -- 			int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 			remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 			num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 			int num31;
                            -- 			int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 			remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 			num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 			uint number;
                            -- 			uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 			if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 			} else {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 			}
                            -- 			uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 			if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 			} else {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 			}
                            -- 			number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 			memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 			num29 = num29 + 1;
                            -- 		}
                            -- 		num28 = num28 + 1;
                            -- 	}
                            -- 	array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 	array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 	num22 = num22 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num23;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num23 = num22 + num10 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num24;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num24 = num23 - num23 / 8 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\.
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num10 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num25;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num25 = num23 / 8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_44\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num26;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num26 = num24 * 8 + num8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num27;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num27 = num25 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num28;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num28 = 0;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num28 < 8) {
                        -- 	int num29;
                        -- 	num29 = 0;
                        -- 	while (num29 < 8) {
                        -- 		int num30;
                        -- 		int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                        -- 		remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                        -- 		num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                        -- 		int num31;
                        -- 		int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                        -- 		remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                        -- 		num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                        -- 		uint number;
                        -- 		uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                        -- 		if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                        -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- 		} else {
                        -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- 		}
                        -- 		uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                        -- 		if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                        -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- 		} else {
                        -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- 		}
                        -- 		number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                        -- 		memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                        -- 		num29 = num29 + 1;
                        -- 	}
                        -- 	num28 = num28 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num29;
                            -- 	num29 = 0;
                            -- 	while (num29 < 8) {
                            -- 		int num30;
                            -- 		int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 		remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 		num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 		int num31;
                            -- 		int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 		remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 		num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 		uint number;
                            -- 		uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 		if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 		} else {
                            -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 		}
                            -- 		uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 		if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 		} else {
                            -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 		}
                            -- 		number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 		memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 		num29 = num29 + 1;
                            -- 	}
                            -- 	num28 = num28 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num29 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num29 < 8) {
                            -- 	int num30;
                            -- 	int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 	remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 	num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 	int num31;
                            -- 	int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 	remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 	num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 	uint number;
                            -- 	uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 	if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 	} else {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 	}
                            -- 	uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 	if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 	} else {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 	}
                            -- 	number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 	memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 	num29 = num29 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\.
                        -- The following section was transformed from the .NET statement below:
                        -- array [num22].Random1.State = array2 [num22].Result.Random1.State;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random1\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random1\.\State\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num22].Random2.State = array2 [num22].Result.Random2.State;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random2\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random2\.\State\;
                        -- The following section was transformed from the .NET statement below:
                        -- num22 = num22 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num30;
                            -- 	int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 	remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 	num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 	int num31;
                            -- 	int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 	remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 	num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 	uint number;
                            -- 	uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 	if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 	} else {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 	}
                            -- 	uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 	if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 	} else {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 	}
                            -- 	number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 	memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 	num29 = num29 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num30;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\);
                            -- The following section was transformed from the .NET statement below:
                            -- num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\.
                        -- The following section was transformed from the .NET statement below:
                        -- num28 = num28 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num31;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\);
                        -- The following section was transformed from the .NET statement below:
                        -- num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_52\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint number;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- } else {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\.
                        --     * The false branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\.

                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\BramDx\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\))) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- } else {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\.
                        --     * The false branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\.

                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\BramDy\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\))) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4484
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\ := to_unsigned(1, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\ => 
                        -- False branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\.
                        -- The following section was transformed from the .NET statement below:
                        -- number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\) or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\;
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\ := to_signed(35, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\;
                        -- Begin SimpleMemory write.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\;
                        -- Clock cycles needed to complete this state (approximation): 0.9162
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\ := to_unsigned(2, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\ => 
                        -- False branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num29 = num29 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\ if the loop wasn't exited with a state change.
                            if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\) then 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().0 state machine start
    \RandomMwc64X::NextUInt32().0._StateMachine\: process (\Clock\) 
        Variable \RandomMwc64X::NextUInt32().0._State\: \RandomMwc64X::NextUInt32().0._States\ := \RandomMwc64X::NextUInt32().0._State_0\;
        Variable \RandomMwc64X::NextUInt32().0.this\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \RandomMwc64X::NextUInt32().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \RandomMwc64X::NextUInt32().0.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \RandomMwc64X::NextUInt32().0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \RandomMwc64X::NextUInt32().0._Finished\ <= false;
                \RandomMwc64X::NextUInt32().0.return\ <= to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().0._State\ := \RandomMwc64X::NextUInt32().0._State_0\;
                \RandomMwc64X::NextUInt32().0.num\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().0.num2\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().0.binaryOperationResult.1\ := to_signed(0, 64);
                \RandomMwc64X::NextUInt32().0.binaryOperationResult.2\ := to_unsigned(0, 64);
                \RandomMwc64X::NextUInt32().0.binaryOperationResult.3\ := to_unsigned(0, 32);
            else 
                case \RandomMwc64X::NextUInt32().0._State\ is 
                    when \RandomMwc64X::NextUInt32().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\RandomMwc64X::NextUInt32().0._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().0._State\ := \RandomMwc64X::NextUInt32().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\RandomMwc64X::NextUInt32().0._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().0._Finished\ <= true;
                        else 
                            \RandomMwc64X::NextUInt32().0._Finished\ <= false;
                            \RandomMwc64X::NextUInt32().0._State\ := \RandomMwc64X::NextUInt32().0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \RandomMwc64X::NextUInt32().0.this.parameter.Out\ <= \RandomMwc64X::NextUInt32().0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().0._State_2\ => 
                        \RandomMwc64X::NextUInt32().0.this\ := \RandomMwc64X::NextUInt32().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)(@this.State >> 32);
                        -- 
                        \RandomMwc64X::NextUInt32().0.binaryOperationResult.0\ := SmartResize(shift_right(\RandomMwc64X::NextUInt32().0.this\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \RandomMwc64X::NextUInt32().0.num\ := (\RandomMwc64X::NextUInt32().0.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)@this.State;
                        -- 
                        \RandomMwc64X::NextUInt32().0.num2\ := SmartResize(\RandomMwc64X::NextUInt32().0.this\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.State = (ulong)((long)num2 * 4294883355L + (long)(num));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \RandomMwc64X::NextUInt32().0._State\ := \RandomMwc64X::NextUInt32().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \RandomMwc64X::NextUInt32().0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().0.binaryOperationResult.1\ := SmartResize(signed(SmartResize(\RandomMwc64X::NextUInt32().0.num2\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \RandomMwc64X::NextUInt32().0._State\ := \RandomMwc64X::NextUInt32().0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \RandomMwc64X::NextUInt32().0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().0.binaryOperationResult.2\ := SmartResize(unsigned(\RandomMwc64X::NextUInt32().0.binaryOperationResult.1\ + signed(SmartResize((\RandomMwc64X::NextUInt32().0.num\), 64))), 64);
                        \RandomMwc64X::NextUInt32().0.this\.\State\ := (\RandomMwc64X::NextUInt32().0.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num2 ^ num;
                        -- 
                        \RandomMwc64X::NextUInt32().0.binaryOperationResult.3\ := \RandomMwc64X::NextUInt32().0.num2\ xor \RandomMwc64X::NextUInt32().0.num\;
                        \RandomMwc64X::NextUInt32().0.return\ <= \RandomMwc64X::NextUInt32().0.binaryOperationResult.3\;
                        \RandomMwc64X::NextUInt32().0._State\ := \RandomMwc64X::NextUInt32().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5284
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().0 state machine end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().1 state machine start
    \RandomMwc64X::NextUInt32().1._StateMachine\: process (\Clock\) 
        Variable \RandomMwc64X::NextUInt32().1._State\: \RandomMwc64X::NextUInt32().1._States\ := \RandomMwc64X::NextUInt32().1._State_0\;
        Variable \RandomMwc64X::NextUInt32().1.this\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \RandomMwc64X::NextUInt32().1.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().1.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().1.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \RandomMwc64X::NextUInt32().1.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \RandomMwc64X::NextUInt32().1.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \RandomMwc64X::NextUInt32().1._Finished\ <= false;
                \RandomMwc64X::NextUInt32().1.return\ <= to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().1._State\ := \RandomMwc64X::NextUInt32().1._State_0\;
                \RandomMwc64X::NextUInt32().1.num\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().1.num2\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().1.binaryOperationResult.1\ := to_signed(0, 64);
                \RandomMwc64X::NextUInt32().1.binaryOperationResult.2\ := to_unsigned(0, 64);
                \RandomMwc64X::NextUInt32().1.binaryOperationResult.3\ := to_unsigned(0, 32);
            else 
                case \RandomMwc64X::NextUInt32().1._State\ is 
                    when \RandomMwc64X::NextUInt32().1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\RandomMwc64X::NextUInt32().1._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().1._State\ := \RandomMwc64X::NextUInt32().1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\RandomMwc64X::NextUInt32().1._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().1._Finished\ <= true;
                        else 
                            \RandomMwc64X::NextUInt32().1._Finished\ <= false;
                            \RandomMwc64X::NextUInt32().1._State\ := \RandomMwc64X::NextUInt32().1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \RandomMwc64X::NextUInt32().1.this.parameter.Out\ <= \RandomMwc64X::NextUInt32().1.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().1._State_2\ => 
                        \RandomMwc64X::NextUInt32().1.this\ := \RandomMwc64X::NextUInt32().1.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)(@this.State >> 32);
                        -- 
                        \RandomMwc64X::NextUInt32().1.binaryOperationResult.0\ := SmartResize(shift_right(\RandomMwc64X::NextUInt32().1.this\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \RandomMwc64X::NextUInt32().1.num\ := (\RandomMwc64X::NextUInt32().1.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)@this.State;
                        -- 
                        \RandomMwc64X::NextUInt32().1.num2\ := SmartResize(\RandomMwc64X::NextUInt32().1.this\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.State = (ulong)((long)num2 * 4294883355L + (long)(num));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \RandomMwc64X::NextUInt32().1._State\ := \RandomMwc64X::NextUInt32().1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \RandomMwc64X::NextUInt32().1._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().1.binaryOperationResult.1\ := SmartResize(signed(SmartResize(\RandomMwc64X::NextUInt32().1.num2\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \RandomMwc64X::NextUInt32().1._State\ := \RandomMwc64X::NextUInt32().1._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \RandomMwc64X::NextUInt32().1._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().1.binaryOperationResult.2\ := SmartResize(unsigned(\RandomMwc64X::NextUInt32().1.binaryOperationResult.1\ + signed(SmartResize((\RandomMwc64X::NextUInt32().1.num\), 64))), 64);
                        \RandomMwc64X::NextUInt32().1.this\.\State\ := (\RandomMwc64X::NextUInt32().1.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num2 ^ num;
                        -- 
                        \RandomMwc64X::NextUInt32().1.binaryOperationResult.3\ := \RandomMwc64X::NextUInt32().1.num2\ xor \RandomMwc64X::NextUInt32().1.num\;
                        \RandomMwc64X::NextUInt32().1.return\ <= \RandomMwc64X::NextUInt32().1.binaryOperationResult.3\;
                        \RandomMwc64X::NextUInt32().1._State\ := \RandomMwc64X::NextUInt32().1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5284
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().1 state machine end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().2 state machine start
    \RandomMwc64X::NextUInt32().2._StateMachine\: process (\Clock\) 
        Variable \RandomMwc64X::NextUInt32().2._State\: \RandomMwc64X::NextUInt32().2._States\ := \RandomMwc64X::NextUInt32().2._State_0\;
        Variable \RandomMwc64X::NextUInt32().2.this\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \RandomMwc64X::NextUInt32().2.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().2.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().2.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \RandomMwc64X::NextUInt32().2.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \RandomMwc64X::NextUInt32().2.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \RandomMwc64X::NextUInt32().2._Finished\ <= false;
                \RandomMwc64X::NextUInt32().2.return\ <= to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().2._State\ := \RandomMwc64X::NextUInt32().2._State_0\;
                \RandomMwc64X::NextUInt32().2.num\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().2.num2\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().2.binaryOperationResult.1\ := to_signed(0, 64);
                \RandomMwc64X::NextUInt32().2.binaryOperationResult.2\ := to_unsigned(0, 64);
                \RandomMwc64X::NextUInt32().2.binaryOperationResult.3\ := to_unsigned(0, 32);
            else 
                case \RandomMwc64X::NextUInt32().2._State\ is 
                    when \RandomMwc64X::NextUInt32().2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\RandomMwc64X::NextUInt32().2._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().2._State\ := \RandomMwc64X::NextUInt32().2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\RandomMwc64X::NextUInt32().2._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().2._Finished\ <= true;
                        else 
                            \RandomMwc64X::NextUInt32().2._Finished\ <= false;
                            \RandomMwc64X::NextUInt32().2._State\ := \RandomMwc64X::NextUInt32().2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \RandomMwc64X::NextUInt32().2.this.parameter.Out\ <= \RandomMwc64X::NextUInt32().2.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().2._State_2\ => 
                        \RandomMwc64X::NextUInt32().2.this\ := \RandomMwc64X::NextUInt32().2.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)(@this.State >> 32);
                        -- 
                        \RandomMwc64X::NextUInt32().2.binaryOperationResult.0\ := SmartResize(shift_right(\RandomMwc64X::NextUInt32().2.this\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \RandomMwc64X::NextUInt32().2.num\ := (\RandomMwc64X::NextUInt32().2.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)@this.State;
                        -- 
                        \RandomMwc64X::NextUInt32().2.num2\ := SmartResize(\RandomMwc64X::NextUInt32().2.this\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.State = (ulong)((long)num2 * 4294883355L + (long)(num));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \RandomMwc64X::NextUInt32().2._State\ := \RandomMwc64X::NextUInt32().2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \RandomMwc64X::NextUInt32().2._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().2.binaryOperationResult.1\ := SmartResize(signed(SmartResize(\RandomMwc64X::NextUInt32().2.num2\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \RandomMwc64X::NextUInt32().2._State\ := \RandomMwc64X::NextUInt32().2._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \RandomMwc64X::NextUInt32().2._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().2.binaryOperationResult.2\ := SmartResize(unsigned(\RandomMwc64X::NextUInt32().2.binaryOperationResult.1\ + signed(SmartResize((\RandomMwc64X::NextUInt32().2.num\), 64))), 64);
                        \RandomMwc64X::NextUInt32().2.this\.\State\ := (\RandomMwc64X::NextUInt32().2.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num2 ^ num;
                        -- 
                        \RandomMwc64X::NextUInt32().2.binaryOperationResult.3\ := \RandomMwc64X::NextUInt32().2.num2\ xor \RandomMwc64X::NextUInt32().2.num\;
                        \RandomMwc64X::NextUInt32().2.return\ <= \RandomMwc64X::NextUInt32().2.binaryOperationResult.3\;
                        \RandomMwc64X::NextUInt32().2._State\ := \RandomMwc64X::NextUInt32().2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5284
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().2 state machine end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().3 state machine start
    \RandomMwc64X::NextUInt32().3._StateMachine\: process (\Clock\) 
        Variable \RandomMwc64X::NextUInt32().3._State\: \RandomMwc64X::NextUInt32().3._States\ := \RandomMwc64X::NextUInt32().3._State_0\;
        Variable \RandomMwc64X::NextUInt32().3.this\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \RandomMwc64X::NextUInt32().3.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().3.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().3.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().3.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \RandomMwc64X::NextUInt32().3.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \RandomMwc64X::NextUInt32().3.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \RandomMwc64X::NextUInt32().3._Finished\ <= false;
                \RandomMwc64X::NextUInt32().3.return\ <= to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().3._State\ := \RandomMwc64X::NextUInt32().3._State_0\;
                \RandomMwc64X::NextUInt32().3.num\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().3.binaryOperationResult.0\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().3.num2\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().3.binaryOperationResult.1\ := to_signed(0, 64);
                \RandomMwc64X::NextUInt32().3.binaryOperationResult.2\ := to_unsigned(0, 64);
                \RandomMwc64X::NextUInt32().3.binaryOperationResult.3\ := to_unsigned(0, 32);
            else 
                case \RandomMwc64X::NextUInt32().3._State\ is 
                    when \RandomMwc64X::NextUInt32().3._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\RandomMwc64X::NextUInt32().3._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().3._State\ := \RandomMwc64X::NextUInt32().3._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().3._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\RandomMwc64X::NextUInt32().3._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().3._Finished\ <= true;
                        else 
                            \RandomMwc64X::NextUInt32().3._Finished\ <= false;
                            \RandomMwc64X::NextUInt32().3._State\ := \RandomMwc64X::NextUInt32().3._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \RandomMwc64X::NextUInt32().3.this.parameter.Out\ <= \RandomMwc64X::NextUInt32().3.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().3._State_2\ => 
                        \RandomMwc64X::NextUInt32().3.this\ := \RandomMwc64X::NextUInt32().3.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)(@this.State >> 32);
                        -- 
                        \RandomMwc64X::NextUInt32().3.binaryOperationResult.0\ := SmartResize(shift_right(\RandomMwc64X::NextUInt32().3.this\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \RandomMwc64X::NextUInt32().3.num\ := (\RandomMwc64X::NextUInt32().3.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)@this.State;
                        -- 
                        \RandomMwc64X::NextUInt32().3.num2\ := SmartResize(\RandomMwc64X::NextUInt32().3.this\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.State = (ulong)((long)num2 * 4294883355L + (long)(num));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \RandomMwc64X::NextUInt32().3._State\ := \RandomMwc64X::NextUInt32().3._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \RandomMwc64X::NextUInt32().3._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().3.binaryOperationResult.1\ := SmartResize(signed(SmartResize(\RandomMwc64X::NextUInt32().3.num2\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \RandomMwc64X::NextUInt32().3._State\ := \RandomMwc64X::NextUInt32().3._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \RandomMwc64X::NextUInt32().3._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().3.binaryOperationResult.2\ := SmartResize(unsigned(\RandomMwc64X::NextUInt32().3.binaryOperationResult.1\ + signed(SmartResize((\RandomMwc64X::NextUInt32().3.num\), 64))), 64);
                        \RandomMwc64X::NextUInt32().3.this\.\State\ := (\RandomMwc64X::NextUInt32().3.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num2 ^ num;
                        -- 
                        \RandomMwc64X::NextUInt32().3.binaryOperationResult.3\ := \RandomMwc64X::NextUInt32().3.num2\ xor \RandomMwc64X::NextUInt32().3.num\;
                        \RandomMwc64X::NextUInt32().3.return\ <= \RandomMwc64X::NextUInt32().3.binaryOperationResult.3\;
                        \RandomMwc64X::NextUInt32().3._State\ := \RandomMwc64X::NextUInt32().3._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5284
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().3 state machine end


    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().4 state machine start
    \RandomMwc64X::NextUInt32().4._StateMachine\: process (\Clock\) 
        Variable \RandomMwc64X::NextUInt32().4._State\: \RandomMwc64X::NextUInt32().4._States\ := \RandomMwc64X::NextUInt32().4._State_0\;
        Variable \RandomMwc64X::NextUInt32().4.this\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \RandomMwc64X::NextUInt32().4.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().4.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().4.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \RandomMwc64X::NextUInt32().4.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \RandomMwc64X::NextUInt32().4.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \RandomMwc64X::NextUInt32().4.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \RandomMwc64X::NextUInt32().4._Finished\ <= false;
                \RandomMwc64X::NextUInt32().4.return\ <= to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().4._State\ := \RandomMwc64X::NextUInt32().4._State_0\;
                \RandomMwc64X::NextUInt32().4.num\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().4.binaryOperationResult.0\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().4.num2\ := to_unsigned(0, 32);
                \RandomMwc64X::NextUInt32().4.binaryOperationResult.1\ := to_signed(0, 64);
                \RandomMwc64X::NextUInt32().4.binaryOperationResult.2\ := to_unsigned(0, 64);
                \RandomMwc64X::NextUInt32().4.binaryOperationResult.3\ := to_unsigned(0, 32);
            else 
                case \RandomMwc64X::NextUInt32().4._State\ is 
                    when \RandomMwc64X::NextUInt32().4._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\RandomMwc64X::NextUInt32().4._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().4._State\ := \RandomMwc64X::NextUInt32().4._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().4._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\RandomMwc64X::NextUInt32().4._Started\ = true) then 
                            \RandomMwc64X::NextUInt32().4._Finished\ <= true;
                        else 
                            \RandomMwc64X::NextUInt32().4._Finished\ <= false;
                            \RandomMwc64X::NextUInt32().4._State\ := \RandomMwc64X::NextUInt32().4._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \RandomMwc64X::NextUInt32().4.this.parameter.Out\ <= \RandomMwc64X::NextUInt32().4.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RandomMwc64X::NextUInt32().4._State_2\ => 
                        \RandomMwc64X::NextUInt32().4.this\ := \RandomMwc64X::NextUInt32().4.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)(@this.State >> 32);
                        -- 
                        \RandomMwc64X::NextUInt32().4.binaryOperationResult.0\ := SmartResize(shift_right(\RandomMwc64X::NextUInt32().4.this\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \RandomMwc64X::NextUInt32().4.num\ := (\RandomMwc64X::NextUInt32().4.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)@this.State;
                        -- 
                        \RandomMwc64X::NextUInt32().4.num2\ := SmartResize(\RandomMwc64X::NextUInt32().4.this\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.State = (ulong)((long)num2 * 4294883355L + (long)(num));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \RandomMwc64X::NextUInt32().4._State\ := \RandomMwc64X::NextUInt32().4._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \RandomMwc64X::NextUInt32().4._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().4.binaryOperationResult.1\ := SmartResize(signed(SmartResize(\RandomMwc64X::NextUInt32().4.num2\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \RandomMwc64X::NextUInt32().4._State\ := \RandomMwc64X::NextUInt32().4._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \RandomMwc64X::NextUInt32().4._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \RandomMwc64X::NextUInt32().4.binaryOperationResult.2\ := SmartResize(unsigned(\RandomMwc64X::NextUInt32().4.binaryOperationResult.1\ + signed(SmartResize((\RandomMwc64X::NextUInt32().4.num\), 64))), 64);
                        \RandomMwc64X::NextUInt32().4.this\.\State\ := (\RandomMwc64X::NextUInt32().4.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num2 ^ num;
                        -- 
                        \RandomMwc64X::NextUInt32().4.binaryOperationResult.3\ := \RandomMwc64X::NextUInt32().4.num2\ xor \RandomMwc64X::NextUInt32().4.num\;
                        \RandomMwc64X::NextUInt32().4.return\ <= \RandomMwc64X::NextUInt32().4.binaryOperationResult.3\;
                        \RandomMwc64X::NextUInt32().4._State\ := \RandomMwc64X::NextUInt32().4._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5284
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().4 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 2 => 
                            if (\Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32() start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \RandomMwc64X::NextUInt32().0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Started.0\;
    \RandomMwc64X::NextUInt32().0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32()._Finished.0\ <= \RandomMwc64X::NextUInt32().0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().return.0\ <= \RandomMwc64X::NextUInt32().0.return\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.RandomMwc64X::NextUInt32().this.parameter.In.0\ <= \RandomMwc64X::NextUInt32().0.this.parameter.Out\;
    -- Signal connections for Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 (#1):
    \RandomMwc64X::NextUInt32().1._Started\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Started.0\;
    \RandomMwc64X::NextUInt32().1.this.parameter.In\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32()._Finished.0\ <= \RandomMwc64X::NextUInt32().1._Finished\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().return.0\ <= \RandomMwc64X::NextUInt32().1.return\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.RandomMwc64X::NextUInt32().this.parameter.In.0\ <= \RandomMwc64X::NextUInt32().1.this.parameter.Out\;
    -- Signal connections for Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 (#2):
    \RandomMwc64X::NextUInt32().2._Started\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Started.0\;
    \RandomMwc64X::NextUInt32().2.this.parameter.In\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.Out.0\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32()._Finished.0\ <= \RandomMwc64X::NextUInt32().2._Finished\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().return.0\ <= \RandomMwc64X::NextUInt32().2.return\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.RandomMwc64X::NextUInt32().this.parameter.In.0\ <= \RandomMwc64X::NextUInt32().2.this.parameter.Out\;
    -- Signal connections for Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 (#3):
    \RandomMwc64X::NextUInt32().3._Started\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Started.0\;
    \RandomMwc64X::NextUInt32().3.this.parameter.In\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.Out.0\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32()._Finished.0\ <= \RandomMwc64X::NextUInt32().3._Finished\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().return.0\ <= \RandomMwc64X::NextUInt32().3.return\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.RandomMwc64X::NextUInt32().this.parameter.In.0\ <= \RandomMwc64X::NextUInt32().3.this.parameter.Out\;
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#4):
    \RandomMwc64X::NextUInt32().4._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Started.0\;
    \RandomMwc64X::NextUInt32().4.this.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().this.parameter.Out.0\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32()._Finished.0\ <= \RandomMwc64X::NextUInt32().4._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().return.0\ <= \RandomMwc64X::NextUInt32().4.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.RandomMwc64X::NextUInt32().this.parameter.In.0\ <= \RandomMwc64X::NextUInt32().4.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32() end


    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\;
    \KpzKernels::GetIndexFromXY(Int32,Int32).0.x.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\;
    \KpzKernels::GetIndexFromXY(Int32,Int32).0.y.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Finished.0\ <= \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).return.0\ <= \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::GetGridDx(Int32).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\;
    \KpzKernels::GetGridDx(Int32).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\;
    \KpzKernels::GetGridDx(Int32).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\ <= \KpzKernels::GetGridDx(Int32).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\ <= \KpzKernels::GetGridDx(Int32).0.return\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\ <= \KpzKernels::GetGridDx(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::GetGridDy(Int32).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\;
    \KpzKernels::GetGridDy(Int32).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\;
    \KpzKernels::GetGridDy(Int32).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\ <= \KpzKernels::GetGridDy(Int32).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\ <= \KpzKernels::GetGridDy(Int32).0.return\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\ <= \KpzKernels::GetGridDy(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::SetGridDx(Int32,Boolean).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\;
    \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\;
    \KpzKernels::SetGridDx(Int32,Boolean).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\;
    \KpzKernels::SetGridDx(Int32,Boolean).0.value.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\ <= \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\ <= \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::SetGridDy(Int32,Boolean).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\;
    \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\;
    \KpzKernels::SetGridDy(Int32,Boolean).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\;
    \KpzKernels::SetGridDy(Int32,Boolean).0.value.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\ <= \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\ <= \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\;
    \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Finished.0\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.In.0\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\;
    \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Finished.0\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.In.0\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Finished.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.In.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\;
    \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Finished.0\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.In.0\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.0\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.Out\;
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#1):
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.1\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.1\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.1\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.1\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.Out\;
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#2):
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.2\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.2\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.2\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.2\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Finished.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Finished.0\ <= \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Finished.0\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- Custom inter-dependent type declarations start
    type \unsigned32_Array\ is array (integer range <>) of unsigned(31 downto 0);
    type \unsigned8_Array\ is array (integer range <>) of unsigned(7 downto 0);
    type \boolean_Array\ is array (integer range <>) of boolean;
    type \Hast.Algorithms.Random.RandomMwc64X\ is record 
        \IsNull\: boolean;
        \State\: unsigned(63 downto 0);
    end record;
    type \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\ is record 
        \IsNull\: boolean;
        \BramDx\: \boolean_Array\(0 to 63);
        \BramDy\: \boolean_Array\(0 to 63);
        \Random1\: \Hast.Algorithms.Random.RandomMwc64X\;
        \Random2\: \Hast.Algorithms.Random.RandomMwc64X\;
    end record;
    type \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState_Array\ is array (integer range <>) of \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    type \Hast.Samples.Kpz.Algorithms.KpzKernels\ is record 
        \IsNull\: boolean;
        \_gridRaw\: \unsigned32_Array\(0 to 63);
        \Random1\: \Hast.Algorithms.Random.RandomMwc64X\;
        \Random2\: \Hast.Algorithms.Random.RandomMwc64X\;
        \TestMode\: boolean;
        \NumberOfIterations\: unsigned(31 downto 0);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._States\ is (
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_1\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_2\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_3\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_4\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_5\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_6\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_7\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_8\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_9\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_10\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_11\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_12\, 
        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_13\);
    -- Signals:
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._States\ is (
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_1\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_4\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_7\, 
        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\);
    -- Signals:
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._States\ is (
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_1\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_4\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_7\, 
        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\);
    -- Signals:
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 declarations start
    -- State machine states:
    type \KpzKernels::RandomlySwitchFourCells(Boolean).0._States\ is (
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_1\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_2\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_3\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_4\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_5\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_16\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_17\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_18\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_19\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_20\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_21\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_22\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_23\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_24\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_25\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_26\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_27\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_34\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_35\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_36\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_37\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_39\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_40\, 
        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_41\);
    -- Signals:
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch.parameter.In\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).return.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\: boolean := false;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 declarations end


    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 declarations start
    -- State machine states:
    type \KpzKernels::GetIndexFromXY(Int32,Int32).0._States\ is (
        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\, 
        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_1\, 
        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_2\);
    -- Signals:
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\: boolean := false;
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\: boolean := false;
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0.x.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::GetIndexFromXY(Int32,Int32).0.y.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 declarations end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 declarations start
    -- State machine states:
    type \KpzKernels::GetGridDx(Int32).0._States\ is (
        \KpzKernels::GetGridDx(Int32).0._State_0\, 
        \KpzKernels::GetGridDx(Int32).0._State_1\, 
        \KpzKernels::GetGridDx(Int32).0._State_2\);
    -- Signals:
    Signal \KpzKernels::GetGridDx(Int32).0._Finished\: boolean := false;
    Signal \KpzKernels::GetGridDx(Int32).0.return\: boolean := false;
    Signal \KpzKernels::GetGridDx(Int32).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDx(Int32).0._Started\: boolean := false;
    Signal \KpzKernels::GetGridDx(Int32).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDx(Int32).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 declarations end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 declarations start
    -- State machine states:
    type \KpzKernels::GetGridDy(Int32).0._States\ is (
        \KpzKernels::GetGridDy(Int32).0._State_0\, 
        \KpzKernels::GetGridDy(Int32).0._State_1\, 
        \KpzKernels::GetGridDy(Int32).0._State_2\);
    -- Signals:
    Signal \KpzKernels::GetGridDy(Int32).0._Finished\: boolean := false;
    Signal \KpzKernels::GetGridDy(Int32).0.return\: boolean := false;
    Signal \KpzKernels::GetGridDy(Int32).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDy(Int32).0._Started\: boolean := false;
    Signal \KpzKernels::GetGridDy(Int32).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::GetGridDy(Int32).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 declarations start
    -- State machine states:
    type \KpzKernels::SetGridDx(Int32,Boolean).0._States\ is (
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_1\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\, 
        \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\);
    -- Signals:
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\: boolean := false;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0._Started\: boolean := false;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::SetGridDx(Int32,Boolean).0.value.parameter.In\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 declarations start
    -- State machine states:
    type \KpzKernels::SetGridDy(Int32,Boolean).0._States\ is (
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_1\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\, 
        \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\);
    -- Signals:
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\: boolean := false;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0._Started\: boolean := false;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.index.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernels::SetGridDy(Int32,Boolean).0.value.parameter.In\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernelsInterface::DoIterations(SimpleMemory).0._States\ is (
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_1\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_2\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_3\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_9\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\, 
        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_13\);
    -- Signals:
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Finished.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Finished.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Finished.0\: boolean := false;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
    Signal \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernelsInterface::TestAdd(SimpleMemory).0._States\ is (
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_1\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_2\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_3\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_4\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_5\, 
        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_6\);
    -- Signals:
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\: boolean := false;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._States\ is (
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_1\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_4\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_5\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_6\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_7\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_8\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_9\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_14\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_18\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 declarations end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._States\ is (
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_1\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_4\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_5\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_6\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_7\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_8\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_9\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_14\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_18\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 declarations end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._States\ is (
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_1\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_4\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_5\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_6\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_7\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_8\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_9\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_14\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\, 
        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_18\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.Out\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.In\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 declarations end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._States\ is (
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_1\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_2\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_5\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_6\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_7\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_8\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_9\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_10\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_11\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_13\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_14\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_17\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_24\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_25\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_33\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_34\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_35\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_36\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_37\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_44\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_52\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_61\, 
        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_62\);
    -- Signals:
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.0\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.1\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.2\: boolean := false;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    Signal \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\: \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._States\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\;
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\: boolean := false;
        Variable \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\: std_logic_vector(31 downto 0) := (others => '0');
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\ <= false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\ := to_unsigned(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\ := (others => '0');
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 64);
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\ := false;
                \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\ := (others => '0');
            else 
                case \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ is 
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.Out\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_2\ => 
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Random1 = new RandomMwc64X { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random1\.\IsNull\ := false;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random1\.\State\ := to_unsigned(51966, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Random1.State = ((ulong)(((ulong)memory.ReadUInt32 (2) << 32) | (ulong)(memory.ReadUInt32 (3))));
                        -- 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(2, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(3, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\ := (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.0\) or SmartResize((ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.1\)), 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random1\.\State\ := ((\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.1\));
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Random2 = new RandomMwc64X { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random2\.\IsNull\ := false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random2\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Random2.State = ((ulong)(((ulong)memory.ReadUInt32 (4) << 32) | (ulong)(memory.ReadUInt32 (5))));
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_6\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(4, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_7\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.2\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_8\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(5, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_9\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\ := (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.2\) or SmartResize((ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.3\)), 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\Random2\.\State\ := ((\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.3\));
                            -- The following section was transformed from the .NET statement below:
                            -- @this.TestMode = ((long)(memory.ReadUInt32 (1)) & 1L) == 1L;
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_10\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_11\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\ := signed(SmartResize((ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.4\)), 64)) and to_signed(1, 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\ := (\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.4\) = to_signed(1, 64);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\TestMode\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.binaryOperationResult.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- @this.NumberOfIterations = memory.ReadUInt32 (0);
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_12\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_13\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\ := \DataIn\;
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this\.\NumberOfIterations\ := ConvertStdLogicVectorToUInt32(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.dataIn.5\);
                            \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State\ := \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\: \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._States\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\ <= false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\ := false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
            else 
                case \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ is 
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\ <= false;
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.Out\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\ => 
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 8) {
                        -- 	int num2;
                        -- 	num2 = 0;
                        -- 	while (num2 < 8) {
                        -- 		int num3;
                        -- 		num3 = num * 8 + num2;
                        -- 		memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                        -- 		num2 = num2 + 1;
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\.
                        -- The while loop's condition:
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ < to_signed(8, 32);
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num2;
                            -- 	num2 = 0;
                            -- 	while (num2 < 8) {
                            -- 		int num3;
                            -- 		num3 = num * 8 + num2;
                            -- 		memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 		num2 = num2 + 1;
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < 8) {
                            -- 	int num3;
                            -- 	num3 = num * 8 + num2;
                            -- 	memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\;
                        else 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ < to_signed(8, 32);
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = num * 8 + num2;
                            -- 	memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num * 8 + num2;
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ * to_signed(8, 32), 32);
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.2\ + \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\;
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (6 + num3, @this._gridRaw [num3]);
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_7\;
                        else 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ + to_signed(1, 32);
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.6\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_6\) then 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(6, 32) + \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\;
                        -- Begin SimpleMemory write.
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.4\;
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this\.\_gridRaw\(to_integer(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num3\)));
                        \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ + to_signed(1, 32);
                            \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.num2\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.binaryOperationResult.5\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_8\) then 
                                \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\: \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._States\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\ <= false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\ := false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
            else 
                case \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ is 
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\ = true) then 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\ <= false;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.Out\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\ => 
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 8) {
                        -- 	int num2;
                        -- 	num2 = 0;
                        -- 	while (num2 < 8) {
                        -- 		int num3;
                        -- 		num3 = num2 * 8 + num;
                        -- 		@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                        -- 		num2 = num2 + 1;
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\.
                        -- The while loop's condition:
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ < to_signed(8, 32);
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num2;
                            -- 	num2 = 0;
                            -- 	while (num2 < 8) {
                            -- 		int num3;
                            -- 		num3 = num2 * 8 + num;
                            -- 		@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 		num2 = num2 + 1;
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < 8) {
                            -- 	int num3;
                            -- 	num3 = num2 * 8 + num;
                            -- 	@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\;
                        else 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ < to_signed(8, 32);
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = num2 * 8 + num;
                            -- 	@this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num2 * 8 + num;
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ * to_signed(8, 32), 32);
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.2\ + \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- @this._gridRaw [num3] = memory.ReadUInt32 (6 + num3);
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_7\;
                        else 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\ => 
                        -- State after the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ + to_signed(1, 32);
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.6\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_6\) then 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\ := to_signed(6, 32) + \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\;
                        -- Begin SimpleMemory read.
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.4\;
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this\.\_gridRaw\(to_integer(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num3\)) := ConvertStdLogicVectorToUInt32(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ + to_signed(1, 32);
                            \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.num2\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.binaryOperationResult.5\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ = \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_8\) then 
                                \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State\ := \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 state machine start
    \KpzKernels::RandomlySwitchFourCells(Boolean).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\: \KpzKernels::RandomlySwitchFourCells(Boolean).0._States\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.29\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.30\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.31\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.32\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.33\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.34\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\: boolean := false;
        Variable \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\ <= to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\ := to_signed(0, 64);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\ := to_unsigned(0, 64);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\ := to_signed(0, 64);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\ := to_signed(0, 64);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\ := to_unsigned(0, 64);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\ := to_unsigned(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\ := to_signed(0, 32);
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.27\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.28\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.29\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.30\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.31\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.32\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.33\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.34\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\ := false;
                \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\ := false;
            else 
                case \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ is 
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\ = true) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\ = true) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\ <= true;
                        else 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.Out\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_2\ => 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.In\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f = (uint)(@this.Random1.State >> 32);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\ := SmartResize(shift_right(\KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random1\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f = (uint)@this.Random1.State;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ := SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random1\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Random1.State = (ulong)((long)num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f * 4294883355L + (long)(num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\ := SmartResize(signed(SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\ := SmartResize(unsigned(\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.1\ + signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\), 64))), 64);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random1\.\State\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f = num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f ^ num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ xor \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_9de5c951697e6472b58dbb749dbb37d06bb99e1325e37b01af05eeca3e323d5f\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)((long)(num) & 7L);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\ := SmartResize(signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num\), 64)) and to_signed(7, 64), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.4\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (int)((long)((num >> 16)) & 7L);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.7018
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\ := signed(SmartResize(shift_right(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\ := SmartResize(signed(SmartResize(((\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.5\)), 64)) and to_signed(7, 64), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.6\);
                        -- The following section was transformed from the .NET statement below:
                        -- int indexFromXY;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- indexFromXY = KpzKernels.GetIndexFromXY (num2, num3);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.5377
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num4;
                            -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc = (uint)(@this.Random2.State >> 32);
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\ := SmartResize(shift_right(\KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random2\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.7\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc = (uint)@this.Random2.State;
                            -- 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ := SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random2\.\State\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Random2.State = (ulong)((long)num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc * 4294883355L + (long)(num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc));
                            -- 
                            -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\ := SmartResize(signed(SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\ := SmartResize(unsigned(\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.8\ + signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\), 64))), 64);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\.\Random2\.\State\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.9\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc = num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc ^ num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ xor \KpzKernels::RandomlySwitchFourCells(Boolean).0.num_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return_d696f3f471658a84033785b23f327b8786bf45be0bb36d30249b70d7f534cacc\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = num4 & 0xFFFFu;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\ and to_unsigned(65535, 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.11\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = (num4 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.667
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\ := shift_right(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num4\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.12\) and to_unsigned(65535, 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num2 < 7)) {
                        -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = (num2 + 1);
                        -- } else {
                        -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = 0;
                        -- }
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ < to_signed(7, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\.
                        --     * The false branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.

                        if ((\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.14\)) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\;
                        else 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7782
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\ => 
                        -- State after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = (conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = num3;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num2;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num3 < 7)) {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = (num3 + 1);
                        -- } else {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = 0;
                        -- }
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ < to_signed(7, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\.
                        --     * The false branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\.

                        if ((\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.16\)) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\;
                        else 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\ => 
                        -- True branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = (num2 + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = (num2 + 1);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num2\ + to_signed(1, 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.15\);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_11\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\ => 
                        -- False branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160 = 0;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditional521b37b126928ffbb835044e1f2fa9fcd497f7b28456003c7c2b8c97ad869160\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_9\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_12\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\ => 
                        -- State after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = (conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\);
                        -- The following section was transformed from the .NET statement below:
                        -- int index;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- index = num8 * 8 + num7;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\ := SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num8\ * to_signed(8, 32), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.18\ + \KpzKernels::RandomlySwitchFourCells(Boolean).0.num7\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.19\;
                        -- The following section was transformed from the .NET statement below:
                        -- int index2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- index2 = num10 * 8 + num9;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\ := SmartResize(\KpzKernels::RandomlySwitchFourCells(Boolean).0.num10\ * to_signed(8, 32), 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.20\ + \KpzKernels::RandomlySwitchFourCells(Boolean).0.num9\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.21\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY) && !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index) && Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY) && !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2) && (forceSwitch || (long)(num5) < 32767L)) || (!Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY) && Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index) && !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY) && Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2) && (forceSwitch || (long)(num6) < 32767L))) {
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, index, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, index2, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2));
                        -- }
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.8968
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\ => 
                        -- True branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = (num3 + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = (num3 + 1);
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.num3\ + to_signed(1, 32);
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.17\);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_14\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\ => 
                        -- False branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662 = 0;
                        -- 
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.conditionalbde904b97bdde5833978e794cb03d40b6f6a1485d7b2c86ac900667628f23662\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_10\.
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_15\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_16\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_17\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_18\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_19\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.2\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.1\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.0\;
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_20\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.22\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.3\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.224
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_21\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_22\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.4\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.23\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.1\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\ := signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num5\), 64)) < to_signed(32767, 64);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ or \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.25\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.27\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.24\ and (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.26\);
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7613
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.5\);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_25\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_26\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_27\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.28\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.2\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.6\;
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.224
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_28\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.7\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.29\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.28\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.3\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_29\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_30\ => 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.30\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.29\ and \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.8\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.31\ := signed(SmartResize((\KpzKernels::RandomlySwitchFourCells(Boolean).0.num6\), 64)) < to_signed(32767, 64);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.32\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch\ or \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.31\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.33\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.30\ and (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.32\);
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.34\ := (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.27\) or (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.33\);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\ and ends in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_41\.
                            --     * Execution after either branch will continue in the following state: \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\.

                            if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.binaryOperationResult.34\) then 
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7849
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\ => 
                        -- State after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\.
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_33\ => 
                        -- True branch of the if-else started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, index, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index));
                        -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, index2, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, indexFromXY));
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                        \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_34\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.9\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.4\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_35\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, indexFromXY, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, indexFromXY));
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_36\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.10\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.indexFromXY\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.5\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDx (@this, index, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDx (@this, index));
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_38\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.11\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.6\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.SetGridDy (@this, index2, !Hast.Samples.Kpz.Algorithms.KpzKernels.GetGridDy (@this, index2));
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1002
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\ := not(\KpzKernels::RandomlySwitchFourCells(Boolean).0.return.12\);
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.index2\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.unaryOperationResult.7\;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= true;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_41\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean)
                        if (\KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\) then 
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\ <= false;
                            \KpzKernels::RandomlySwitchFourCells(Boolean).0.this\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\;
                            -- Going to the state after the if-else which was started in state \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_31\.
                            if (\KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ = \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_41\) then 
                                \KpzKernels::RandomlySwitchFourCells(Boolean).0._State\ := \KpzKernels::RandomlySwitchFourCells(Boolean).0._State_32\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 state machine end


    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 state machine start
    \KpzKernels::GetIndexFromXY(Int32,Int32).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\: \KpzKernels::GetIndexFromXY(Int32,Int32).0._States\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\;
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.y\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\ <= false;
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\ <= to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\;
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\ := to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.y\ := to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ is 
                    when \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\ = true) then 
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\ = true) then 
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\ <= true;
                        else 
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\ <= false;
                            \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_2\ => 
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0.x.parameter.In\;
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.y\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0.y.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return x + y * 8;
                        -- 
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\ := SmartResize(\KpzKernels::GetIndexFromXY(Int32,Int32).0.y\ * to_signed(8, 32), 32);
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0.x\ + \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.0\;
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\ <= \KpzKernels::GetIndexFromXY(Int32,Int32).0.binaryOperationResult.1\;
                        \KpzKernels::GetIndexFromXY(Int32,Int32).0._State\ := \KpzKernels::GetIndexFromXY(Int32,Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4484
                end case;
            end if;
        end if;
    end process;
    -- System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32).0 state machine end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 state machine start
    \KpzKernels::GetGridDx(Int32).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::GetGridDx(Int32).0._State\: \KpzKernels::GetGridDx(Int32).0._States\ := \KpzKernels::GetGridDx(Int32).0._State_0\;
        Variable \KpzKernels::GetGridDx(Int32).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::GetGridDx(Int32).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::GetGridDx(Int32).0._Finished\ <= false;
                \KpzKernels::GetGridDx(Int32).0.return\ <= false;
                \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_0\;
                \KpzKernels::GetGridDx(Int32).0.index\ := to_signed(0, 32);
                \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\ := to_signed(0, 64);
                \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\ := false;
            else 
                case \KpzKernels::GetGridDx(Int32).0._State\ is 
                    when \KpzKernels::GetGridDx(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::GetGridDx(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDx(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::GetGridDx(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDx(Int32).0._Finished\ <= true;
                        else 
                            \KpzKernels::GetGridDx(Int32).0._Finished\ <= false;
                            \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::GetGridDx(Int32).0.this.parameter.Out\ <= \KpzKernels::GetGridDx(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDx(Int32).0._State_2\ => 
                        \KpzKernels::GetGridDx(Int32).0.this\ := \KpzKernels::GetGridDx(Int32).0.this.parameter.In\;
                        \KpzKernels::GetGridDx(Int32).0.index\ := \KpzKernels::GetGridDx(Int32).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return ((long)(@this._gridRaw [index]) & 1L) != 0L;
                        -- 
                        \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\ := signed(SmartResize((\KpzKernels::GetGridDx(Int32).0.this\.\_gridRaw\(to_integer(\KpzKernels::GetGridDx(Int32).0.index\))), 64)) and to_signed(1, 64);
                        \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\ := (\KpzKernels::GetGridDx(Int32).0.binaryOperationResult.0\) /= to_signed(0, 64);
                        \KpzKernels::GetGridDx(Int32).0.return\ <= \KpzKernels::GetGridDx(Int32).0.binaryOperationResult.1\;
                        \KpzKernels::GetGridDx(Int32).0._State\ := \KpzKernels::GetGridDx(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32).0 state machine end


    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 state machine start
    \KpzKernels::GetGridDy(Int32).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::GetGridDy(Int32).0._State\: \KpzKernels::GetGridDy(Int32).0._States\ := \KpzKernels::GetGridDy(Int32).0._State_0\;
        Variable \KpzKernels::GetGridDy(Int32).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::GetGridDy(Int32).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::GetGridDy(Int32).0._Finished\ <= false;
                \KpzKernels::GetGridDy(Int32).0.return\ <= false;
                \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_0\;
                \KpzKernels::GetGridDy(Int32).0.index\ := to_signed(0, 32);
                \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\ := to_signed(0, 64);
                \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\ := false;
            else 
                case \KpzKernels::GetGridDy(Int32).0._State\ is 
                    when \KpzKernels::GetGridDy(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::GetGridDy(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDy(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::GetGridDy(Int32).0._Started\ = true) then 
                            \KpzKernels::GetGridDy(Int32).0._Finished\ <= true;
                        else 
                            \KpzKernels::GetGridDy(Int32).0._Finished\ <= false;
                            \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::GetGridDy(Int32).0.this.parameter.Out\ <= \KpzKernels::GetGridDy(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::GetGridDy(Int32).0._State_2\ => 
                        \KpzKernels::GetGridDy(Int32).0.this\ := \KpzKernels::GetGridDy(Int32).0.this.parameter.In\;
                        \KpzKernels::GetGridDy(Int32).0.index\ := \KpzKernels::GetGridDy(Int32).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return ((long)(@this._gridRaw [index]) & 2L) != 0L;
                        -- 
                        \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\ := signed(SmartResize((\KpzKernels::GetGridDy(Int32).0.this\.\_gridRaw\(to_integer(\KpzKernels::GetGridDy(Int32).0.index\))), 64)) and to_signed(2, 64);
                        \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\ := (\KpzKernels::GetGridDy(Int32).0.binaryOperationResult.0\) /= to_signed(0, 64);
                        \KpzKernels::GetGridDy(Int32).0.return\ <= \KpzKernels::GetGridDy(Int32).0.binaryOperationResult.1\;
                        \KpzKernels::GetGridDy(Int32).0._State\ := \KpzKernels::GetGridDy(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 state machine start
    \KpzKernels::SetGridDx(Int32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0._State\: \KpzKernels::SetGridDx(Int32,Boolean).0._States\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\;
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.value\: boolean := false;
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\ <= false;
                \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\;
                \KpzKernels::SetGridDx(Int32,Boolean).0.index\ := to_signed(0, 32);
                \KpzKernels::SetGridDx(Int32,Boolean).0.value\ := false;
                \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \KpzKernels::SetGridDx(Int32,Boolean).0._State\ is 
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\ <= true;
                        else 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\ <= false;
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.Out\ <= \KpzKernels::SetGridDx(Int32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\ => 
                        \KpzKernels::SetGridDx(Int32,Boolean).0.this\ := \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.In\;
                        \KpzKernels::SetGridDx(Int32,Boolean).0.index\ := \KpzKernels::SetGridDx(Int32,Boolean).0.index.parameter.In\;
                        \KpzKernels::SetGridDx(Int32,Boolean).0.value\ := \KpzKernels::SetGridDx(Int32,Boolean).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (value) {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 1u;
                        -- } else {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 0u;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\ and ends in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\.
                        --     * The false branch starts in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\ and ends in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\.

                        if (\KpzKernels::SetGridDx(Int32,Boolean).0.value\) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\;
                        else 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\ => 
                        -- State after the if-else which was started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this._gridRaw [index] = (@this._gridRaw [index] & 0xFFFFFFFEu) | (conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1);
                        -- 
                        -- Since the integer literal 4294967294 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111110).
                        \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\ := \KpzKernels::SetGridDx(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDx(Int32,Boolean).0.index\)) and "11111111111111111111111111111110";
                        \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\ := (\KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.0\) or (\KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\);
                        \KpzKernels::SetGridDx(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDx(Int32,Boolean).0.index\)) := \KpzKernels::SetGridDx(Int32,Boolean).0.binaryOperationResult.1\;
                        \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\ => 
                        -- True branch of the if-else started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 1u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 1u;
                        -- 
                        \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\ := to_unsigned(1, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._State\ = \KpzKernels::SetGridDx(Int32,Boolean).0._State_4\) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\ => 
                        -- False branch of the if-else started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1 = 0u;
                        -- 
                        \KpzKernels::SetGridDx(Int32,Boolean).0.conditionald69cfe13414c6909083d331ef87bcc442ad93cb2b4bb98a7ca09f240cebb80c1\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDx(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDx(Int32,Boolean).0._State\ = \KpzKernels::SetGridDx(Int32,Boolean).0._State_5\) then 
                            \KpzKernels::SetGridDx(Int32,Boolean).0._State\ := \KpzKernels::SetGridDx(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 state machine start
    \KpzKernels::SetGridDy(Int32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0._State\: \KpzKernels::SetGridDy(Int32,Boolean).0._States\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\;
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.this\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.index\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.value\: boolean := false;
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\ <= false;
                \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\;
                \KpzKernels::SetGridDy(Int32,Boolean).0.index\ := to_signed(0, 32);
                \KpzKernels::SetGridDy(Int32,Boolean).0.value\ := false;
                \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \KpzKernels::SetGridDy(Int32,Boolean).0._State\ is 
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._Started\ = true) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\ <= true;
                        else 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\ <= false;
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.Out\ <= \KpzKernels::SetGridDy(Int32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\ => 
                        \KpzKernels::SetGridDy(Int32,Boolean).0.this\ := \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.In\;
                        \KpzKernels::SetGridDy(Int32,Boolean).0.index\ := \KpzKernels::SetGridDy(Int32,Boolean).0.index.parameter.In\;
                        \KpzKernels::SetGridDy(Int32,Boolean).0.value\ := \KpzKernels::SetGridDy(Int32,Boolean).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (value) {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 2u;
                        -- } else {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 0u;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\ and ends in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\.
                        --     * The false branch starts in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\ and ends in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\.

                        if (\KpzKernels::SetGridDy(Int32,Boolean).0.value\) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\;
                        else 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\ => 
                        -- State after the if-else which was started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this._gridRaw [index] = (@this._gridRaw [index] & 0xFFFFFFFDu) | (conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698);
                        -- 
                        -- Since the integer literal 4294967293 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111101).
                        \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\ := \KpzKernels::SetGridDy(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDy(Int32,Boolean).0.index\)) and "11111111111111111111111111111101";
                        \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\ := (\KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.0\) or (\KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\);
                        \KpzKernels::SetGridDy(Int32,Boolean).0.this\.\_gridRaw\(to_integer(\KpzKernels::SetGridDy(Int32,Boolean).0.index\)) := \KpzKernels::SetGridDy(Int32,Boolean).0.binaryOperationResult.1\;
                        \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\ => 
                        -- True branch of the if-else started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 2u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 2u;
                        -- 
                        \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\ := to_unsigned(2, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._State\ = \KpzKernels::SetGridDy(Int32,Boolean).0._State_4\) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\ => 
                        -- False branch of the if-else started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698 = 0u;
                        -- 
                        \KpzKernels::SetGridDy(Int32,Boolean).0.conditional2fa0c260d39d406d3aa761bb7bc19017129bdb4df41fb41a1d536bf3f1870698\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernels::SetGridDy(Int32,Boolean).0._State_2\.
                        if (\KpzKernels::SetGridDy(Int32,Boolean).0._State\ = \KpzKernels::SetGridDy(Int32,Boolean).0._State_5\) then 
                            \KpzKernels::SetGridDy(Int32,Boolean).0._State\ := \KpzKernels::SetGridDy(Int32,Boolean).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernelsInterface::DoIterations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\: \KpzKernelsInterface::DoIterations(SimpleMemory).0._States\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\: \Hast.Samples.Kpz.Algorithms.KpzKernels\;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ <= false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\ := false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
            else 
                case \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ is 
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- KpzKernels kpzKernels;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- kpzKernels = new KpzKernels ();
                        -- 
                        -- Initializing record fields to their defaults.
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\IsNull\ := false;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\_gridRaw\ := (others => to_unsigned(0, 32));
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\TestMode\ := false;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\NumberOfIterations\ := to_unsigned(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.Samples.Kpz.Algorithms.KpzKernels.CopyFromSimpleMemoryToRawGrid (kpzKernels, memory);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ <= true;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.InitializeParametersFromMemory (kpzKernels, memory);
                            -- 
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ <= true;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (kpzKernels.TestMode) {
                            -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 1;
                            -- } else {
                            -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 64;
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\ and ends in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\.
                            --     * The false branch starts in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\ and ends in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\.

                            if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\TestMode\) then 
                                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\;
                            else 
                                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\ => 
                        -- State after the if-else which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29);
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\ := (\KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num2) < (long)(kpzKernels.NumberOfIterations)) {
                        -- 	int num3;
                        -- 	num3 = 0;
                        -- 	while (num3 < num) {
                        -- 		Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                        -- 		num3 = num3 + 1;
                        -- 	}
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\ => 
                        -- True branch of the if-else started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 1;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_6\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\ => 
                        -- False branch of the if-else started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 64;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29 = 64;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.conditional0417f7f322005290f7c3ec48aac46b0453e0766bfb5643d58c4a2704653bca29\ := to_signed(64, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_4\.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_7\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\.
                        -- The while loop's condition:
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\ := SmartResize((\KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\), 64) < signed(SmartResize((\KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\NumberOfIterations\), 64));
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = 0;
                            -- 	while (num3 < num) {
                            -- 		Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 		num3 = num3 + 1;
                            -- 	}
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num3 < num) {
                            -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\;
                        else 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_9\ => 
                        -- State after the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.Samples.Kpz.Algorithms.KpzKernels.CopyToSimpleMemoryFromRawGrid (kpzKernels, memory);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ <= true;
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\.
                        -- The while loop's condition:
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ < \KpzKernelsInterface::DoIterations(SimpleMemory).0.num\;
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.Samples.Kpz.Algorithms.KpzKernels.RandomlySwitchFourCells (kpzKernels, kpzKernels.TestMode);
                            -- 
                            -- Starting state machine invocation for the following method: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean)
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\.\TestMode\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ <= true;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\;
                        else 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\ => 
                        -- State after the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + 1;
                        -- 
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ + to_signed(1, 32);
                        \KpzKernelsInterface::DoIterations(SimpleMemory).0.num2\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.3\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_5\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_11\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.num3\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.binaryOperationResult.2\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_8\ if the loop wasn't exited with a state change.
                            if (\KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_12\) then 
                                \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_10\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
                        if (\KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ = \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Finished.0\) then 
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\ <= false;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0.kpzKernels\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.In.0\;
                            \KpzKernelsInterface::DoIterations(SimpleMemory).0._State\ := \KpzKernelsInterface::DoIterations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernelsInterface::TestAdd(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\: \KpzKernelsInterface::TestAdd(SimpleMemory).0._States\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\;
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\ <= false;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\;
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\ := (others => '0');
                \KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 32);
            else 
                case \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ is 
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteUInt32 (2, memory.ReadUInt32 (0) + memory.ReadUInt32 (1));
                        -- 
                        -- Begin SimpleMemory read.
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\ := ConvertStdLogicVectorToUInt32(\KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.0\) + ConvertStdLogicVectorToUInt32(\KpzKernelsInterface::TestAdd(SimpleMemory).0.dataIn.1\);
                            -- Begin SimpleMemory write.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(2, 32);
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\KpzKernelsInterface::TestAdd(SimpleMemory).0.binaryOperationResult.0\);
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_6\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \KpzKernelsInterface::TestAdd(SimpleMemory).0._State\ := \KpzKernelsInterface::TestAdd(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 state machine start
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._States\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.30\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.31\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.32\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.33\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.34\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.35\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.36\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.30\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.31\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.32\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.33\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.34\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.35\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.36\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.37\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ is 
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.Out\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\ => 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 32) {
                        -- 	uint num2;
                        -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                        -- 	uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                        -- 	rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                        -- 	return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	uint num3;
                        -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                        -- 	uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                        -- 	rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                        -- 	return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	int num4;
                        -- 	num4 = (int)((long)(num2) & 7L);
                        -- 	int num5;
                        -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 	int num6;
                        -- 	num6 = num4 + num5 * 8;
                        -- 	uint num7;
                        -- 	num7 = num3 & 0xFFFFu;
                        -- 	uint num8;
                        -- 	num8 = (num3 >> 16) & 0xFFFFu;
                        -- 	if (num4 < 7 && num5 < 7) {
                        -- 		int num9;
                        -- 		num9 = num4 + 1;
                        -- 		int num10;
                        -- 		num10 = num5;
                        -- 		int num11;
                        -- 		num11 = num4;
                        -- 		int num12;
                        -- 		num12 = num5 + 1;
                        -- 		int num13;
                        -- 		num13 = num10 * 8 + num9;
                        -- 		int num14;
                        -- 		num14 = num12 * 8 + num11;
                        -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 		}
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ < to_signed(32, 32);
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num2;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                            -- 	uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                            -- 	rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                            -- 	return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	uint num3;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                            -- 	uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                            -- 	rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                            -- 	return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	int num4;
                            -- 	num4 = (int)((long)(num2) & 7L);
                            -- 	int num5;
                            -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 	int num6;
                            -- 	num6 = num4 + num5 * 8;
                            -- 	uint num7;
                            -- 	num7 = num3 & 0xFFFFu;
                            -- 	uint num8;
                            -- 	num8 = (num3 >> 16) & 0xFFFFu;
                            -- 	if (num4 < 7 && num5 < 7) {
                            -- 		int num9;
                            -- 		num9 = num4 + 1;
                            -- 		int num10;
                            -- 		num10 = num5;
                            -- 		int num11;
                            -- 		num11 = num4;
                            -- 		int num12;
                            -- 		num12 = num5 + 1;
                            -- 		int num13;
                            -- 		num13 = num10 * 8 + num9;
                            -- 		int num14;
                            -- 		num14 = num12 * 8 + num11;
                            -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                            -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                            -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                            -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                            -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                            -- 		}
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random1\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random1\.\State\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                            -- 
                            -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_5\;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7207
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return rawTaskState;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_6\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.2\ + signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\), 64))), 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random1\.\State\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ xor \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num3;
                        -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random2\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random2\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.9738
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.6\ + signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\), 64))), 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\Random2\.\State\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.7\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ xor \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = (int)((long)(num2) & 7L);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\ := SmartResize(signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\), 64)) and to_signed(7, 64), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.9\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.7018
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num2\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\ := SmartResize(signed(SmartResize(((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.10\)), 64)) and to_signed(7, 64), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.11\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = num4 + num5 * 8;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.12\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num3 & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9861
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\ and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.14\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (num3 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\ := shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num3\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.15\) and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.16\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 7 && num5 < 7) {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.9168
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.17\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.18\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.19\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3991
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.37\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.37\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_13\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num4 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.20\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num5;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num4;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num4\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num5 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num5\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.21\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = num10 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num10\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.22\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num9\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.23\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 * 8 + num11;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num12\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.24\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num11\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.25\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)) and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.0\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.9987
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.26\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.27\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.1\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num7\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.30\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.28\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.29\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.31\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.2\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.9853
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.32\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.31\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.3\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.33\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.32\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.34\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num8\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.35\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.33\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.34\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.36\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.30\) or (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.35\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_18\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_18\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.binaryOperationResult.36\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_18\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\.
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_11\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_18\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num13\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.num14\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.unaryOperationResult.7\;
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_16\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_18\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4008
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).0 state machine end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 state machine start
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._States\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.30\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.31\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.32\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.33\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.34\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.35\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.36\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.30\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.31\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.32\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.33\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.34\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.35\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.36\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.37\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ is 
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.Out\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\ => 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 32) {
                        -- 	uint num2;
                        -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                        -- 	uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                        -- 	rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                        -- 	return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	uint num3;
                        -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                        -- 	uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                        -- 	rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                        -- 	return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	int num4;
                        -- 	num4 = (int)((long)(num2) & 7L);
                        -- 	int num5;
                        -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 	int num6;
                        -- 	num6 = num4 + num5 * 8;
                        -- 	uint num7;
                        -- 	num7 = num3 & 0xFFFFu;
                        -- 	uint num8;
                        -- 	num8 = (num3 >> 16) & 0xFFFFu;
                        -- 	if (num4 < 7 && num5 < 7) {
                        -- 		int num9;
                        -- 		num9 = num4 + 1;
                        -- 		int num10;
                        -- 		num10 = num5;
                        -- 		int num11;
                        -- 		num11 = num4;
                        -- 		int num12;
                        -- 		num12 = num5 + 1;
                        -- 		int num13;
                        -- 		num13 = num10 * 8 + num9;
                        -- 		int num14;
                        -- 		num14 = num12 * 8 + num11;
                        -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 		}
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ < to_signed(32, 32);
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num2;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                            -- 	uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                            -- 	rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                            -- 	return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	uint num3;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                            -- 	uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                            -- 	rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                            -- 	return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	int num4;
                            -- 	num4 = (int)((long)(num2) & 7L);
                            -- 	int num5;
                            -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 	int num6;
                            -- 	num6 = num4 + num5 * 8;
                            -- 	uint num7;
                            -- 	num7 = num3 & 0xFFFFu;
                            -- 	uint num8;
                            -- 	num8 = (num3 >> 16) & 0xFFFFu;
                            -- 	if (num4 < 7 && num5 < 7) {
                            -- 		int num9;
                            -- 		num9 = num4 + 1;
                            -- 		int num10;
                            -- 		num10 = num5;
                            -- 		int num11;
                            -- 		num11 = num4;
                            -- 		int num12;
                            -- 		num12 = num5 + 1;
                            -- 		int num13;
                            -- 		num13 = num10 * 8 + num9;
                            -- 		int num14;
                            -- 		num14 = num12 * 8 + num11;
                            -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                            -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                            -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                            -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                            -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                            -- 		}
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random1\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random1\.\State\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                            -- 
                            -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_5\;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7207
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return rawTaskState;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_6\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.2\ + signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\), 64))), 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random1\.\State\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ xor \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num3;
                        -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random2\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random2\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.9738
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.6\ + signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\), 64))), 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\Random2\.\State\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.7\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ xor \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = (int)((long)(num2) & 7L);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\ := SmartResize(signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\), 64)) and to_signed(7, 64), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.9\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.7018
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num2\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\ := SmartResize(signed(SmartResize(((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.10\)), 64)) and to_signed(7, 64), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.11\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = num4 + num5 * 8;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.12\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num3 & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9861
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\ and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.14\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (num3 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\ := shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num3\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.15\) and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.16\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 7 && num5 < 7) {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.9168
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.17\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.18\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.19\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3991
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.37\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.37\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_13\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num4 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.20\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num5;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num4;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num4\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num5 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num5\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.21\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = num10 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num10\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.22\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num9\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.23\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 * 8 + num11;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num12\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.24\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num11\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.25\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)) and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.0\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.9987
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.26\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.27\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.1\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num7\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.30\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.28\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.29\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.31\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.2\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.9853
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.32\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.31\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.3\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.33\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.32\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.34\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num8\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.35\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.33\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.34\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.36\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.30\) or (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.35\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_18\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_18\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.binaryOperationResult.36\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_18\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\.
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_11\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_18\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num13\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.num14\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.unaryOperationResult.7\;
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_16\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_18\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4008
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).1 state machine end


    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 state machine start
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._States\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.30\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.31\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.32\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.33\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.34\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.35\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.36\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\: boolean := false;
        Variable \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\ <= false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.30\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.31\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.32\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.33\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.34\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.35\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.36\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\ := false;
                \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.37\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ is 
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\ = true) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\ <= false;
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.Out\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\ => 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 32) {
                        -- 	uint num2;
                        -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                        -- 	uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                        -- 	rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                        -- 	return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 	uint num3;
                        -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                        -- 	uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                        -- 	rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                        -- 	return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 	num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 	int num4;
                        -- 	num4 = (int)((long)(num2) & 7L);
                        -- 	int num5;
                        -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 	int num6;
                        -- 	num6 = num4 + num5 * 8;
                        -- 	uint num7;
                        -- 	num7 = num3 & 0xFFFFu;
                        -- 	uint num8;
                        -- 	num8 = (num3 >> 16) & 0xFFFFu;
                        -- 	if (num4 < 7 && num5 < 7) {
                        -- 		int num9;
                        -- 		num9 = num4 + 1;
                        -- 		int num10;
                        -- 		num10 = num5;
                        -- 		int num11;
                        -- 		num11 = num4;
                        -- 		int num12;
                        -- 		num12 = num5 + 1;
                        -- 		int num13;
                        -- 		num13 = num10 * 8 + num9;
                        -- 		int num14;
                        -- 		num14 = num12 * 8 + num11;
                        -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 		}
                        -- 	}
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ < to_signed(32, 32);
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num2;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                            -- 	uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                            -- 	rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                            -- 	return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 	uint num3;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                            -- 	uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                            -- 	rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                            -- 	return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                            -- 	int num4;
                            -- 	num4 = (int)((long)(num2) & 7L);
                            -- 	int num5;
                            -- 	num5 = (int)((long)((num2 >> 16)) & 7L);
                            -- 	int num6;
                            -- 	num6 = num4 + num5 * 8;
                            -- 	uint num7;
                            -- 	num7 = num3 & 0xFFFFu;
                            -- 	uint num8;
                            -- 	num8 = (num3 >> 16) & 0xFFFFu;
                            -- 	if (num4 < 7 && num5 < 7) {
                            -- 		int num9;
                            -- 		num9 = num4 + 1;
                            -- 		int num10;
                            -- 		num10 = num5;
                            -- 		int num11;
                            -- 		num11 = num4;
                            -- 		int num12;
                            -- 		num12 = num5 + 1;
                            -- 		int num13;
                            -- 		num13 = num10 * 8 + num9;
                            -- 		int num14;
                            -- 		num14 = num12 * 8 + num11;
                            -- 		if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                            -- 			rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                            -- 			rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                            -- 			rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                            -- 			rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                            -- 		}
                            -- 	}
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)(rawTaskState.Random1.State >> 32);
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random1\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = (uint)rawTaskState.Random1.State;
                            -- 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random1\.\State\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- rawTaskState.Random1.State = (ulong)((long)num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc * 4294883355L + (long)(num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc));
                            -- 
                            -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_5\;
                        else 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7207
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_4\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return rawTaskState;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_6\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.2\ + signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\), 64))), 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random1\.\State\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc = num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc ^ num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ xor \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_7826863239d0d060943ba90231364c0113254cde5d1fc6f9c416bffb6863dbdc\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num3;
                        -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)(rawTaskState.Random2.State >> 32);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random2\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = (uint)rawTaskState.Random2.State;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random2\.\State\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.Random2.State = (ulong)((long)num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc * 4294883355L + (long)(num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc));
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.9738
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.6\ + signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\), 64))), 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\Random2\.\State\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.7\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc = num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc ^ num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ xor \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return_2be00b8e8fea330f8ec220c5ff7e940f171c0cf4af037988f3d21759d1048edc\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = (int)((long)(num2) & 7L);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\ := SmartResize(signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\), 64)) and to_signed(7, 64), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.9\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (int)((long)((num2 >> 16)) & 7L);
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.7018
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num2\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\ := SmartResize(signed(SmartResize(((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.10\)), 64)) and to_signed(7, 64), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.11\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = num4 + num5 * 8;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.12\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = num3 & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9861
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\ and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.14\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (num3 >> 16) & 0xFFFFu;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\ := shift_right(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num3\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111")));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.15\) and to_unsigned(65535, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.16\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 7 && num5 < 7) {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.9168
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ < to_signed(7, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.17\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.18\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.19\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3991
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.37\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.37\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_2\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_13\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num9;
                        -- 	num9 = num4 + 1;
                        -- 	int num10;
                        -- 	num10 = num5;
                        -- 	int num11;
                        -- 	num11 = num4;
                        -- 	int num12;
                        -- 	num12 = num5 + 1;
                        -- 	int num13;
                        -- 	num13 = num10 * 8 + num9;
                        -- 	int num14;
                        -- 	num14 = num12 * 8 + num11;
                        -- 	if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 		rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 		rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 		rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 		rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = num4 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.20\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num5;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num4;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num4\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num5 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num5\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.21\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = num10 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num10\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.22\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num9\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.23\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 * 8 + num11;
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\ := SmartResize(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num12\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.24\ + \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num11\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.25\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawTaskState.BramDx [num6] && !rawTaskState.BramDx [num13] && rawTaskState.BramDy [num6] && !rawTaskState.BramDy [num14] && (long)(num7) < 32767L) || (!rawTaskState.BramDx [num6] && rawTaskState.BramDx [num13] && !rawTaskState.BramDy [num6] && rawTaskState.BramDy [num14] && (long)(num8) < 32767L)) {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)) and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.0\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.9987
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.26\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.27\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.1\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num7\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.30\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.28\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.29\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.31\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.2\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.9853
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.32\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.31\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.3\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.33\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.32\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.34\ := signed(SmartResize((\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num8\), 64)) < to_signed(32767, 64);
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.35\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.33\ and \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.34\;
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.36\ := (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.30\) or (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.35\);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_18\ and ends in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_18\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\.

                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.binaryOperationResult.36\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_18\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8851
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\.
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_11\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_18\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 	rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 	rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 	rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num6] = !rawTaskState.BramDx [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num6] = !rawTaskState.BramDy [num6];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num6\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDx [num13] = !rawTaskState.BramDx [num13];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDx\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num13\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- rawTaskState.BramDy [num14] = !rawTaskState.BramDy [num14];
                        -- 
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\ := not(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\)));
                        \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState\.\BramDy\(to_integer(\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.num14\)) := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.unaryOperationResult.7\;
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_16\.
                        if (\KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ = \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_18\) then 
                            \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State\ := \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4008
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object).2 state machine end


    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\: \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._States\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState_Array\(0 to 7);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\: \Hast.Algorithms.Random.RandomMwc64X\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState_Array\(0 to 7);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\: signed(63 downto 0) := to_signed(0, 64);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.1\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.2\: \Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState\;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\: boolean := false;
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.95\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.96\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.97\: signed(31 downto 0) := to_signed(0, 32);
        Variable \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.98\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ <= false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\ := to_unsigned(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\ := (others => '0');
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 64);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ := 0;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\ := false;
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\ := to_unsigned(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.95\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.96\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.97\ := to_signed(0, 32);
                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.98\ := to_signed(0, 32);
            else 
                case \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ is 
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\ = true) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num * 2;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num\ * to_signed(2, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- RandomMwc64X randomMwc64X;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- randomMwc64X = new RandomMwc64X ();
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- KpzKernelsTaskState[] array;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array = new KpzKernelsTaskState[8];
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- while (num4 < 8) {
                            -- 	num3 = num3 + 1;
                            -- 	RandomMwc64X object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3 = new RandomMwc64X { };
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3.State = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4] = new KpzKernelsTaskState { };
                            -- 	array [num4].Random1 = object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	array [num4].BramDy = new bool[64];
                            -- 	array [num4].BramDx = new bool[64];
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random1.State = array [num4].Random1.State | ((ulong)num5 << 32);
                            -- 	num3 = num3 + 1;
                            -- 	array [num4].Random2 = new RandomMwc64X { };
                            -- 	array [num4].Random2.State = memory.ReadUInt32 (1 + num3);
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random2.State = array [num4].Random2.State | ((ulong)num5 << 32);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1221
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	num3 = num3 + 1;
                            -- 	RandomMwc64X object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3 = new RandomMwc64X { };
                            -- 	object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3.State = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4] = new KpzKernelsTaskState { };
                            -- 	array [num4].Random1 = object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 	array [num4].BramDy = new bool[64];
                            -- 	array [num4].BramDx = new bool[64];
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random1.State = array [num4].Random1.State | ((ulong)num5 << 32);
                            -- 	num3 = num3 + 1;
                            -- 	array [num4].Random2 = new RandomMwc64X { };
                            -- 	array [num4].Random2.State = memory.ReadUInt32 (1 + num3);
                            -- 	num3 = num3 + 1;
                            -- 	num5 = memory.ReadUInt32 (1 + num3);
                            -- 	array [num4].Random2.State = array [num4].Random2.State | ((ulong)num5 << 32);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- RandomMwc64X object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3 = new RandomMwc64X { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\.\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3.State = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- Begin SimpleMemory read.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.3\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_6\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_5\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num3 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.15\;
                        -- The following section was transformed from the .NET statement below:
                        -- randomMwc64X.State = memory.ReadUInt32 (1 + num3);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.16\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_6\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\.\State\ := SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.1\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4] = new KpzKernelsTaskState { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDx\ := (others => false);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDy\ := (others => false);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random1 = object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random1\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.object11eb7d02fdf20d20f66cc464a4d76ba7aac93a81cb203ac36ea29823237ed0a3\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].BramDy = new bool[64];
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDy\ := (others => false);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].BramDx = new bool[64];
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\BramDx\ := (others => false);
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_7\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.5\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.2\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random1.State = array [num4].Random1.State | ((ulong)num5 << 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(shift_left(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\, 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random1\.\State\ or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.6\);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random1\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.7\;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.8\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random2 = new RandomMwc64X { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\IsNull\ := false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ := to_unsigned(51966, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random2.State = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9331
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_9\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.9\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_10\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ := SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.3\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.10\;
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_11\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.11\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.4\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num4].Random2.State = array [num4].Random2.State | ((ulong)num5 << 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\ := SmartResize(shift_left(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\, 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.12\);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\)).\Random2\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.13\;
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num4 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num4\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.14\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_3\ if the loop wasn't exited with a state change.
                            if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_12\) then 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6068
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_13\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := SmartResize(ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.5\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.17\;
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = memory.ReadUInt32 (1 + num3);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(1, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num3\;
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_14\ => 
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.18\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.6\);
                            -- The following section was transformed from the .NET statement below:
                            -- randomMwc64X.State = randomMwc64X.State | ((ulong)num5 << 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(shift_left(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num5\, 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.19\);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.20\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num6 < num2) {
                            -- 	uint num7;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	uint num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = (uint)(randomMwc64X.State >> 32);
                            -- 	uint num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = (uint)randomMwc64X.State;
                            -- 	randomMwc64X.State = (ulong)((long)num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b * 4294883355L + (long)(num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b));
                            -- 	return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b ^ num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num7 = return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	int num8;
                            -- 	num8 = (int)(7L & (long)(num7));
                            -- 	int num9;
                            -- 	num9 = (int)(7L & (long)((num7 >> 16)));
                            -- 	int num10;
                            -- 	num10 = 0;
                            -- 	while (num10 < 8) {
                            -- 		Task<KpzKernelsTaskState>[] array2;
                            -- 		array2 = new Task<KpzKernelsTaskState>[8];
                            -- 		int num11;
                            -- 		num11 = 0;
                            -- 		while (num11 < 8) {
                            -- 			int num12;
                            -- 			num12 = num11 + num10 * 8;
                            -- 			int num13;
                            -- 			num13 = num12 - num12 / 8 * 8;
                            -- 			int num14;
                            -- 			num14 = num12 / 8;
                            -- 			int num15;
                            -- 			num15 = num13 * 8 + num8;
                            -- 			int num16;
                            -- 			num16 = num14 * 8 + num9;
                            -- 			int num17;
                            -- 			num17 = 0;
                            -- 			while (num17 < 8) {
                            -- 				int num18;
                            -- 				num18 = 0;
                            -- 				while (num18 < 8) {
                            -- 					int num19;
                            -- 					int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 					remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 					num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 					int num20;
                            -- 					int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 					remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 					num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 					uint num21;
                            -- 					num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 					array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 					array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 					num18 = num18 + 1;
                            -- 				}
                            -- 				num17 = num17 + 1;
                            -- 			}
                            -- 			array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 			num11 = num11 + 1;
                            -- 		}
                            -- 		Task.WhenAll (array2).Wait ();
                            -- 		int num22;
                            -- 		num22 = 0;
                            -- 		while (num22 < 8) {
                            -- 			int num23;
                            -- 			num23 = num22 + num10 * 8;
                            -- 			int num24;
                            -- 			num24 = num23 - num23 / 8 * 8;
                            -- 			int num25;
                            -- 			num25 = num23 / 8;
                            -- 			int num26;
                            -- 			num26 = num24 * 8 + num8;
                            -- 			int num27;
                            -- 			num27 = num25 * 8 + num9;
                            -- 			int num28;
                            -- 			num28 = 0;
                            -- 			while (num28 < 8) {
                            -- 				int num29;
                            -- 				num29 = 0;
                            -- 				while (num29 < 8) {
                            -- 					int num30;
                            -- 					int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 					remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 					num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 					int num31;
                            -- 					int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 					remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 					num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 					uint number;
                            -- 					uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 					if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 					} else {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 					}
                            -- 					uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 					if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 					} else {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 					}
                            -- 					number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 					memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 					num29 = num29 + 1;
                            -- 				}
                            -- 				num28 = num28 + 1;
                            -- 			}
                            -- 			array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 			array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 			num22 = num22 + 1;
                            -- 		}
                            -- 		num10 = num10 + 1;
                            -- 	}
                            -- 	num6 = num6 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2805
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ < \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2\;
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.21\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	uint num7;
                            -- 	// Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	uint return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	uint num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = (uint)(randomMwc64X.State >> 32);
                            -- 	uint num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = (uint)randomMwc64X.State;
                            -- 	randomMwc64X.State = (ulong)((long)num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b * 4294883355L + (long)(num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b));
                            -- 	return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b ^ num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	// Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 	num7 = return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 	int num8;
                            -- 	num8 = (int)(7L & (long)(num7));
                            -- 	int num9;
                            -- 	num9 = (int)(7L & (long)((num7 >> 16)));
                            -- 	int num10;
                            -- 	num10 = 0;
                            -- 	while (num10 < 8) {
                            -- 		Task<KpzKernelsTaskState>[] array2;
                            -- 		array2 = new Task<KpzKernelsTaskState>[8];
                            -- 		int num11;
                            -- 		num11 = 0;
                            -- 		while (num11 < 8) {
                            -- 			int num12;
                            -- 			num12 = num11 + num10 * 8;
                            -- 			int num13;
                            -- 			num13 = num12 - num12 / 8 * 8;
                            -- 			int num14;
                            -- 			num14 = num12 / 8;
                            -- 			int num15;
                            -- 			num15 = num13 * 8 + num8;
                            -- 			int num16;
                            -- 			num16 = num14 * 8 + num9;
                            -- 			int num17;
                            -- 			num17 = 0;
                            -- 			while (num17 < 8) {
                            -- 				int num18;
                            -- 				num18 = 0;
                            -- 				while (num18 < 8) {
                            -- 					int num19;
                            -- 					int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 					remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 					num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 					int num20;
                            -- 					int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 					remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 					num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 					uint num21;
                            -- 					num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 					array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 					array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 					num18 = num18 + 1;
                            -- 				}
                            -- 				num17 = num17 + 1;
                            -- 			}
                            -- 			array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 			num11 = num11 + 1;
                            -- 		}
                            -- 		Task.WhenAll (array2).Wait ();
                            -- 		int num22;
                            -- 		num22 = 0;
                            -- 		while (num22 < 8) {
                            -- 			int num23;
                            -- 			num23 = num22 + num10 * 8;
                            -- 			int num24;
                            -- 			num24 = num23 - num23 / 8 * 8;
                            -- 			int num25;
                            -- 			num25 = num23 / 8;
                            -- 			int num26;
                            -- 			num26 = num24 * 8 + num8;
                            -- 			int num27;
                            -- 			num27 = num25 * 8 + num9;
                            -- 			int num28;
                            -- 			num28 = 0;
                            -- 			while (num28 < 8) {
                            -- 				int num29;
                            -- 				num29 = 0;
                            -- 				while (num29 < 8) {
                            -- 					int num30;
                            -- 					int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 					remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 					num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 					int num31;
                            -- 					int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 					remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 					num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 					uint number;
                            -- 					uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 					if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 					} else {
                            -- 						conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 					}
                            -- 					uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 					if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 					} else {
                            -- 						conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 					}
                            -- 					number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 					memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 					num29 = num29 + 1;
                            -- 				}
                            -- 				num28 = num28 + 1;
                            -- 			}
                            -- 			array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 			array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 			num22 = num22 + 1;
                            -- 		}
                            -- 		num10 = num10 + 1;
                            -- 	}
                            -- 	num6 = num6 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num7;
                            -- // Starting inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = (uint)(randomMwc64X.State >> 32);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\ := SmartResize(shift_right(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.22\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = (uint)randomMwc64X.State;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- randomMwc64X.State = (ulong)((long)num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b * 4294883355L + (long)(num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b));
                            -- 
                            -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7207
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_17\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_18\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\ := SmartResize(signed(SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\, 64)) * "0000000000000000000000000000000011111111111111101011100000011011", 64);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\ := SmartResize(unsigned(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.23\ + signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\), 64))), 64);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.randomMwc64X\.\State\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.24\);
                        -- The following section was transformed from the .NET statement below:
                        -- return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b = num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b ^ num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                        -- // Ending inlined block of the method System.UInt32 Hast.Algorithms.Random.RandomMwc64X::NextUInt32().
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num2_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ xor \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.25\;
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return_8987108dec5c37b29493053ae4bce6c745a97ecdf78a3a2ffde0128414523e1b\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = (int)(7L & (long)(num7));
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\ := SmartResize(to_signed(7, 64) and signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\), 64)), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.26\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = (int)(7L & (long)((num7 >> 16)));
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7018
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\ := signed(SmartResize(shift_right(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num7\, to_integer(unsigned(SmartResize(to_signed(16, 32), 5) and "11111"))), 64));
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize(to_signed(7, 64) and signed(SmartResize(((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.27\)), 64)), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.28\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = 0;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num10 < 8) {
                        -- 	Task<KpzKernelsTaskState>[] array2;
                        -- 	array2 = new Task<KpzKernelsTaskState>[8];
                        -- 	int num11;
                        -- 	num11 = 0;
                        -- 	while (num11 < 8) {
                        -- 		int num12;
                        -- 		num12 = num11 + num10 * 8;
                        -- 		int num13;
                        -- 		num13 = num12 - num12 / 8 * 8;
                        -- 		int num14;
                        -- 		num14 = num12 / 8;
                        -- 		int num15;
                        -- 		num15 = num13 * 8 + num8;
                        -- 		int num16;
                        -- 		num16 = num14 * 8 + num9;
                        -- 		int num17;
                        -- 		num17 = 0;
                        -- 		while (num17 < 8) {
                        -- 			int num18;
                        -- 			num18 = 0;
                        -- 			while (num18 < 8) {
                        -- 				int num19;
                        -- 				int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                        -- 				remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                        -- 				num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                        -- 				int num20;
                        -- 				int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                        -- 				remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                        -- 				num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                        -- 				uint num21;
                        -- 				num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                        -- 				array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                        -- 				array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                        -- 				num18 = num18 + 1;
                        -- 			}
                        -- 			num17 = num17 + 1;
                        -- 		}
                        -- 		array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                        -- 		num11 = num11 + 1;
                        -- 	}
                        -- 	Task.WhenAll (array2).Wait ();
                        -- 	int num22;
                        -- 	num22 = 0;
                        -- 	while (num22 < 8) {
                        -- 		int num23;
                        -- 		num23 = num22 + num10 * 8;
                        -- 		int num24;
                        -- 		num24 = num23 - num23 / 8 * 8;
                        -- 		int num25;
                        -- 		num25 = num23 / 8;
                        -- 		int num26;
                        -- 		num26 = num24 * 8 + num8;
                        -- 		int num27;
                        -- 		num27 = num25 * 8 + num9;
                        -- 		int num28;
                        -- 		num28 = 0;
                        -- 		while (num28 < 8) {
                        -- 			int num29;
                        -- 			num29 = 0;
                        -- 			while (num29 < 8) {
                        -- 				int num30;
                        -- 				int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                        -- 				remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                        -- 				num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                        -- 				int num31;
                        -- 				int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                        -- 				remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                        -- 				num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                        -- 				uint number;
                        -- 				uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                        -- 				if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                        -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- 				} else {
                        -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- 				}
                        -- 				uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                        -- 				if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                        -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- 				} else {
                        -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- 				}
                        -- 				number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                        -- 				memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                        -- 				num29 = num29 + 1;
                        -- 			}
                        -- 			num28 = num28 + 1;
                        -- 		}
                        -- 		array [num22].Random1.State = array2 [num22].Result.Random1.State;
                        -- 		array [num22].Random2.State = array2 [num22].Result.Random2.State;
                        -- 		num22 = num22 + 1;
                        -- 	}
                        -- 	num10 = num10 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0.5377
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.29\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Task<KpzKernelsTaskState>[] array2;
                            -- 	array2 = new Task<KpzKernelsTaskState>[8];
                            -- 	int num11;
                            -- 	num11 = 0;
                            -- 	while (num11 < 8) {
                            -- 		int num12;
                            -- 		num12 = num11 + num10 * 8;
                            -- 		int num13;
                            -- 		num13 = num12 - num12 / 8 * 8;
                            -- 		int num14;
                            -- 		num14 = num12 / 8;
                            -- 		int num15;
                            -- 		num15 = num13 * 8 + num8;
                            -- 		int num16;
                            -- 		num16 = num14 * 8 + num9;
                            -- 		int num17;
                            -- 		num17 = 0;
                            -- 		while (num17 < 8) {
                            -- 			int num18;
                            -- 			num18 = 0;
                            -- 			while (num18 < 8) {
                            -- 				int num19;
                            -- 				int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 				remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 				num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 				int num20;
                            -- 				int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 				remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 				num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 				uint num21;
                            -- 				num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 				array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 				array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 				num18 = num18 + 1;
                            -- 			}
                            -- 			num17 = num17 + 1;
                            -- 		}
                            -- 		array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 		num11 = num11 + 1;
                            -- 	}
                            -- 	Task.WhenAll (array2).Wait ();
                            -- 	int num22;
                            -- 	num22 = 0;
                            -- 	while (num22 < 8) {
                            -- 		int num23;
                            -- 		num23 = num22 + num10 * 8;
                            -- 		int num24;
                            -- 		num24 = num23 - num23 / 8 * 8;
                            -- 		int num25;
                            -- 		num25 = num23 / 8;
                            -- 		int num26;
                            -- 		num26 = num24 * 8 + num8;
                            -- 		int num27;
                            -- 		num27 = num25 * 8 + num9;
                            -- 		int num28;
                            -- 		num28 = 0;
                            -- 		while (num28 < 8) {
                            -- 			int num29;
                            -- 			num29 = 0;
                            -- 			while (num29 < 8) {
                            -- 				int num30;
                            -- 				int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 				remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 				num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 				int num31;
                            -- 				int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 				remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 				num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 				uint number;
                            -- 				uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 				if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 				} else {
                            -- 					conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 				}
                            -- 				uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 				if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 				} else {
                            -- 					conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 				}
                            -- 				number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 				memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 				num29 = num29 + 1;
                            -- 			}
                            -- 			num28 = num28 + 1;
                            -- 		}
                            -- 		array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 		array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 		num22 = num22 + 1;
                            -- 	}
                            -- 	num10 = num10 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Task<KpzKernelsTaskState>[] array2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array2 = new Task<KpzKernelsTaskState>[8];
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num11;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num11 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num11 < 8) {
                            -- 	int num12;
                            -- 	num12 = num11 + num10 * 8;
                            -- 	int num13;
                            -- 	num13 = num12 - num12 / 8 * 8;
                            -- 	int num14;
                            -- 	num14 = num12 / 8;
                            -- 	int num15;
                            -- 	num15 = num13 * 8 + num8;
                            -- 	int num16;
                            -- 	num16 = num14 * 8 + num9;
                            -- 	int num17;
                            -- 	num17 = 0;
                            -- 	while (num17 < 8) {
                            -- 		int num18;
                            -- 		num18 = 0;
                            -- 		while (num18 < 8) {
                            -- 			int num19;
                            -- 			int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 			remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 			num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 			int num20;
                            -- 			int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 			remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 			num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 			uint num21;
                            -- 			num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 			array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 			array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 			num18 = num18 + 1;
                            -- 		}
                            -- 		num17 = num17 + 1;
                            -- 	}
                            -- 	array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 	num11 = num11 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = num6 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.98\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num6\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.98\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_15\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_22\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.30\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num12;
                            -- 	num12 = num11 + num10 * 8;
                            -- 	int num13;
                            -- 	num13 = num12 - num12 / 8 * 8;
                            -- 	int num14;
                            -- 	num14 = num12 / 8;
                            -- 	int num15;
                            -- 	num15 = num13 * 8 + num8;
                            -- 	int num16;
                            -- 	num16 = num14 * 8 + num9;
                            -- 	int num17;
                            -- 	num17 = 0;
                            -- 	while (num17 < 8) {
                            -- 		int num18;
                            -- 		num18 = 0;
                            -- 		while (num18 < 8) {
                            -- 			int num19;
                            -- 			int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 			remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 			num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 			int num20;
                            -- 			int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 			remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 			num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 			uint num21;
                            -- 			num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 			array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 			array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 			num18 = num18 + 1;
                            -- 		}
                            -- 		num17 = num17 + 1;
                            -- 	}
                            -- 	array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                            -- 	num11 = num11 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num12;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num12 = num11 + num10 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.31\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.32\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num13;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num13 = num12 - num12 / 8 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_25\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_24\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array2).Wait ();
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_25\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.33\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_26\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.34\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.35\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = num12 / 8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_27\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num12\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.36\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num15;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num15 = num13 * 8 + num8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num13\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.37\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.38\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num16;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num16 = num14 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num14\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.39\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.40\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num17;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num17 = 0;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num17 < 8) {
                        -- 	int num18;
                        -- 	num18 = 0;
                        -- 	while (num18 < 8) {
                        -- 		int num19;
                        -- 		int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                        -- 		remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                        -- 		num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                        -- 		int num20;
                        -- 		int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                        -- 		remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                        -- 		num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                        -- 		uint num21;
                        -- 		num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                        -- 		array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                        -- 		array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                        -- 		num18 = num18 + 1;
                        -- 	}
                        -- 	num17 = num17 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.41\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num18;
                            -- 	num18 = 0;
                            -- 	while (num18 < 8) {
                            -- 		int num19;
                            -- 		int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 		remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 		num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 		int num20;
                            -- 		int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 		remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 		num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 		uint num21;
                            -- 		num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 		array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 		array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 		num18 = num18 + 1;
                            -- 	}
                            -- 	num17 = num17 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num18;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num18 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num18 < 8) {
                            -- 	int num19;
                            -- 	int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 	remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 	num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 	int num20;
                            -- 	int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 	remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 	num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 	uint num21;
                            -- 	num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 	array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 	array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 	num18 = num18 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- array2 [num11] = Task.Factory.StartNew (<>c.<>9__9_0 ?? (<>c.<>9__9_0 = <>c.<>9.<ScheduleIterations>b__9_0), array [num11]);
                        -- 
                        -- Starting state machine invocation for the following method: Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object)
                        case \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ is 
                            when 0 => 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.0\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\));
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ <= true;
                            when 1 => 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.1\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\));
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ <= true;
                            when 2 => 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.2\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\));
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ <= true;
                        end case;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ + 1;
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = num11 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.64\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_30\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.42\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num19;
                            -- 	int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 	remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 	num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 	int num20;
                            -- 	int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                            -- 	remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                            -- 	num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                            -- 	uint num21;
                            -- 	num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                            -- 	array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 	array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 	num18 = num18 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num19;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db = (num15 + num17);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num15\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.43\);
                            -- The following section was transformed from the .NET statement below:
                            -- num19 = remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db - remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db / 64 * 64;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_33\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\.
                        -- The following section was transformed from the .NET statement below:
                        -- num17 = num17 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.63\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_28\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_32\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_33\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.44\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_34\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand118ffb251e35bc1876e0a047ee4c2af0719398f767313178f0b5807d7257e6db\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.45\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.46\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num20;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 = (num16 + num18);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num16\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.47\);
                        -- The following section was transformed from the .NET statement below:
                        -- num20 = remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 - remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54 / 64 * 64;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.48\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_36\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand22264a92d180959952b3eb3b70e3fd5ecb7e4b7bab5828959badc9c3d51d0a54\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.49\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.50\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num21 = memory.ReadUInt32 (35 + num19 + num20 * 64);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(35, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num19\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num20\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_37\;
                        -- Clock cycles needed to complete this state (approximation): 0.7776
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.51\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.52\;
                        -- Begin SimpleMemory read.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.53\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_38\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\ := \DataIn\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\ := ConvertStdLogicVectorToUInt32(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.dataIn.7\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num11].BramDx [num17 + num18 * 8] = ((long)(num21) & 1L) == 1L;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.54\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\ := signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\), 64)) and to_signed(1, 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.56\) = to_signed(1, 64);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\)).\BramDx\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.55\)) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.57\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num11].BramDy [num17 + num18 * 8] = ((long)(num21) & 2L) == 2L;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9035
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_39\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num17\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.58\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\ := signed(SmartResize((\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num21\), 64)) and to_signed(2, 64);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.60\) = to_signed(2, 64);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num11\)).\BramDy\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.59\)) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.61\;
                        -- The following section was transformed from the .NET statement below:
                        -- num18 = num18 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0.9035
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num18\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.62\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_29\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_40\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object)
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.1\ and \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.2\ and \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.0\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\ <= false;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).invocationIndex\ := 0;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.0\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.1\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.1\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.2\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.2\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(0) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.0\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(1) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.1\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(2) := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num22;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num22 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num22 < 8) {
                            -- 	int num23;
                            -- 	num23 = num22 + num10 * 8;
                            -- 	int num24;
                            -- 	num24 = num23 - num23 / 8 * 8;
                            -- 	int num25;
                            -- 	num25 = num23 / 8;
                            -- 	int num26;
                            -- 	num26 = num24 * 8 + num8;
                            -- 	int num27;
                            -- 	num27 = num25 * 8 + num9;
                            -- 	int num28;
                            -- 	num28 = 0;
                            -- 	while (num28 < 8) {
                            -- 		int num29;
                            -- 		num29 = 0;
                            -- 		while (num29 < 8) {
                            -- 			int num30;
                            -- 			int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 			remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 			num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 			int num31;
                            -- 			int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 			remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 			num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 			uint number;
                            -- 			uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 			if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 			} else {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 			}
                            -- 			uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 			if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 			} else {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 			}
                            -- 			number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 			memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 			num29 = num29 + 1;
                            -- 		}
                            -- 		num28 = num28 + 1;
                            -- 	}
                            -- 	array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 	array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 	num22 = num22 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.65\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num23;
                            -- 	num23 = num22 + num10 * 8;
                            -- 	int num24;
                            -- 	num24 = num23 - num23 / 8 * 8;
                            -- 	int num25;
                            -- 	num25 = num23 / 8;
                            -- 	int num26;
                            -- 	num26 = num24 * 8 + num8;
                            -- 	int num27;
                            -- 	num27 = num25 * 8 + num9;
                            -- 	int num28;
                            -- 	num28 = 0;
                            -- 	while (num28 < 8) {
                            -- 		int num29;
                            -- 		num29 = 0;
                            -- 		while (num29 < 8) {
                            -- 			int num30;
                            -- 			int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 			remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 			num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 			int num31;
                            -- 			int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 			remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 			num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 			uint number;
                            -- 			uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 			if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 			} else {
                            -- 				conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 			}
                            -- 			uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 			if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 			} else {
                            -- 				conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 			}
                            -- 			number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 			memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 			num29 = num29 + 1;
                            -- 		}
                            -- 		num28 = num28 + 1;
                            -- 	}
                            -- 	array [num22].Random1.State = array2 [num22].Result.Random1.State;
                            -- 	array [num22].Random2.State = array2 [num22].Result.Random2.State;
                            -- 	num22 = num22 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num23;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num23 = num22 + num10 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ * to_signed(8, 32), 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.66\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.67\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num24;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num24 = num23 - num23 / 8 * 8;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_44\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7237
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\.
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = num10 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.97\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num10\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.97\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_20\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_43\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_44\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.68\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_45\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.69\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.70\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num25;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num25 = num23 / 8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num23\ / to_signed(8, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.71\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num26;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num26 = num24 * 8 + num8;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num24\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.8529
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.72\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num8\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.73\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num27;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num27 = num25 * 8 + num9;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num25\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.74\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num9\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.75\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num28;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num28 = 0;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num28 < 8) {
                        -- 	int num29;
                        -- 	num29 = 0;
                        -- 	while (num29 < 8) {
                        -- 		int num30;
                        -- 		int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                        -- 		remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                        -- 		num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                        -- 		int num31;
                        -- 		int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                        -- 		remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                        -- 		num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                        -- 		uint number;
                        -- 		uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                        -- 		if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                        -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- 		} else {
                        -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- 		}
                        -- 		uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                        -- 		if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                        -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- 		} else {
                        -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- 		}
                        -- 		number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                        -- 		memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                        -- 		num29 = num29 + 1;
                        -- 	}
                        -- 	num28 = num28 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.76\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num29;
                            -- 	num29 = 0;
                            -- 	while (num29 < 8) {
                            -- 		int num30;
                            -- 		int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 		remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 		num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 		int num31;
                            -- 		int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 		remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 		num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 		uint number;
                            -- 		uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 		if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 		} else {
                            -- 			conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 		}
                            -- 		uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 		if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 		} else {
                            -- 			conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 		}
                            -- 		number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 		memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 		num29 = num29 + 1;
                            -- 	}
                            -- 	num28 = num28 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num29 = 0;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num29 < 8) {
                            -- 	int num30;
                            -- 	int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 	remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 	num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 	int num31;
                            -- 	int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 	remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 	num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 	uint number;
                            -- 	uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 	if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 	} else {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 	}
                            -- 	uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 	if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 	} else {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 	}
                            -- 	number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 	memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 	num29 = num29 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\.
                        -- The following section was transformed from the .NET statement below:
                        -- array [num22].Random1.State = array2 [num22].Result.Random1.State;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random1\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random1\.\State\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num22].Random2.State = array2 [num22].Result.Random2.State;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random2\.\State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\Random2\.\State\;
                        -- The following section was transformed from the .NET statement below:
                        -- num22 = num22 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.96\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.96\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_41\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_49\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\ => 
                        -- Repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\.
                        -- The while loop's condition:
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ < to_signed(8, 32);
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.77\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num30;
                            -- 	int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 	remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 	num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 	int num31;
                            -- 	int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                            -- 	remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                            -- 	num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                            -- 	uint number;
                            -- 	uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                            -- 	if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                            -- 	} else {
                            -- 		conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                            -- 	}
                            -- 	uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                            -- 	if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                            -- 	} else {
                            -- 		conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                            -- 	}
                            -- 	number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                            -- 	memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                            -- 	num29 = num29 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num30;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 = (num26 + num28);
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num26\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\;
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.78\);
                            -- The following section was transformed from the .NET statement below:
                            -- num30 = remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 - remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2 / 64 * 64;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_52\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\ => 
                        -- State after the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\.
                        -- The following section was transformed from the .NET statement below:
                        -- num28 = num28 + 1;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.95\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ + to_signed(1, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.95\;
                        -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_47\ if the loop wasn't exited with a state change.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_51\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.79\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_53\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand705c4fa31b8759aeae8b3d83182e085b8fa87800a2f735606b61e0b27b4f37c2\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.80\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.81\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num31;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c = (num27 + num29);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num27\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.82\);
                        -- The following section was transformed from the .NET statement below:
                        -- num31 = remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c - remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c / 64 * 64;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_54\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ / to_signed(64, 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.83\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0.8843
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.remainderOperand1b7c237d4d9a3711645f46d62664030aa44ef74a9e36850b2e3dca7054ebd34c\ - \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.84\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.85\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint number;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (array2 [num22].Result.BramDx [num28 + num29 * 8]) {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- } else {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.86\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\.
                        --     * The false branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.

                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\BramDx\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.87\))) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7747
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (array2 [num22].Result.BramDy [num28 + num29 * 8]) {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- } else {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- }
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ * to_signed(8, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num28\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.88\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\.
                        --     * The false branch starts in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_61\ and ends in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_61\.
                        --     * Execution after either branch will continue in the following state: \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\.

                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.array2\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num22\)).\BramDy\(to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.89\))) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\;
                        else 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_61\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4484
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 1u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\ := to_unsigned(1, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_57\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\ => 
                        -- False branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3 = 0u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_55\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_58\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\ => 
                        -- State after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.
                        -- The following section was transformed from the .NET statement below:
                        -- number = (conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3) | (conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\ := (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional581fa4e0ff39c5302477aab1702d89b34a16c87e2673c16f49f3a1f235e918e3\) or (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.90\;
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteUInt32 (35 + num30 + num31 * 64, number);
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\ := to_signed(35, 32) + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num30\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\ := SmartResize(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num31\ * to_signed(64, 32), 32);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.91\ + \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.92\;
                        -- Begin SimpleMemory write.
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.93\;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.number\);
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0.9162
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\ => 
                        -- True branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 2u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\ := to_unsigned(2, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_60\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_61\ => 
                        -- False branch of the if-else started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e = 0u;
                        -- 
                        \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.conditional7286261368c01060df142c8f543a301b7748687f9a618a95a705ce5d14d7319e\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_56\.
                        if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_61\) then 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num29 = num29 + 1;
                            -- 
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ + to_signed(1, 32);
                            \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.num29\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.binaryOperationResult.94\;
                            -- Returning to the repeated state of the while loop which was started in state \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_48\ if the loop wasn't exited with a state change.
                            if (\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ = \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_62\) then 
                                \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State\ := \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._State_50\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 2 => 
                            if (\Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::GetIndexFromXY(Int32,Int32).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Started.0\;
    \KpzKernels::GetIndexFromXY(Int32,Int32).0.x.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).x.parameter.Out.0\;
    \KpzKernels::GetIndexFromXY(Int32,Int32).0.y.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).y.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32)._Finished.0\ <= \KpzKernels::GetIndexFromXY(Int32,Int32).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetIndexFromXY(Int32,Int32).return.0\ <= \KpzKernels::GetIndexFromXY(Int32,Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.Samples.Kpz.Algorithms.KpzKernels::GetIndexFromXY(System.Int32,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::GetGridDx(Int32).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Started.0\;
    \KpzKernels::GetGridDx(Int32).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.Out.0\;
    \KpzKernels::GetGridDx(Int32).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).index.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32)._Finished.0\ <= \KpzKernels::GetGridDx(Int32).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).return.0\ <= \KpzKernels::GetGridDx(Int32).0.return\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDx(Int32).this.parameter.In.0\ <= \KpzKernels::GetGridDx(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDx(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::GetGridDy(Int32).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Started.0\;
    \KpzKernels::GetGridDy(Int32).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.Out.0\;
    \KpzKernels::GetGridDy(Int32).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).index.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32)._Finished.0\ <= \KpzKernels::GetGridDy(Int32).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).return.0\ <= \KpzKernels::GetGridDy(Int32).0.return\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::GetGridDy(Int32).this.parameter.In.0\ <= \KpzKernels::GetGridDy(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.Samples.Kpz.Algorithms.KpzKernels::GetGridDy(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::SetGridDx(Int32,Boolean).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Started.0\;
    \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.Out.0\;
    \KpzKernels::SetGridDx(Int32,Boolean).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).index.parameter.Out.0\;
    \KpzKernels::SetGridDx(Int32,Boolean).0.value.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).value.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean)._Finished.0\ <= \KpzKernels::SetGridDx(Int32,Boolean).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDx(Int32,Boolean).this.parameter.In.0\ <= \KpzKernels::SetGridDx(Int32,Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDx(System.Int32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean).0 (#0):
    \KpzKernels::SetGridDy(Int32,Boolean).0._Started\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Started.0\;
    \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.Out.0\;
    \KpzKernels::SetGridDy(Int32,Boolean).0.index.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).index.parameter.Out.0\;
    \KpzKernels::SetGridDy(Int32,Boolean).0.value.parameter.In\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).value.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean)._Finished.0\ <= \KpzKernels::SetGridDy(Int32,Boolean).0._Finished\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.KpzKernels::SetGridDy(Int32,Boolean).this.parameter.In.0\ <= \KpzKernels::SetGridDy(Int32,Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::SetGridDy(System.Int32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Started.0\;
    \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory)._Finished.0\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).this.parameter.In.0\ <= \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyFromSimpleMemoryToRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Started.0\;
    \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory)._Finished.0\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::InitializeParametersFromMemory(SimpleMemory).this.parameter.In.0\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::InitializeParametersFromMemory(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::RandomlySwitchFourCells(Boolean).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Started.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.Out.0\;
    \KpzKernels::RandomlySwitchFourCells(Boolean).0.forceSwitch.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).forceSwitch.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean)._Finished.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::RandomlySwitchFourCells(Boolean).this.parameter.In.0\ <= \KpzKernels::RandomlySwitchFourCells(Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::RandomlySwitchFourCells(System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Started\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Started.0\;
    \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.In\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.Out.0\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory)._Finished.0\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0._Finished\;
    \KpzKernelsInterface::DoIterations(SimpleMemory).0.KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).this.parameter.In.0\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernels::CopyToSimpleMemoryFromRawGrid(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object) start
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.0\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.0\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.0\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).0.rawTaskState.parameter.Out\;
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#1):
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.1\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.1\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.1\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.1\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.1\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).1.rawTaskState.parameter.Out\;
    -- Signal connections for System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#2):
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Started\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Started.2\;
    \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.In\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.Out.2\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object)._Finished.2\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2._Finished\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).return.2\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.return\;
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).rawTaskState.parameter.In.2\ <= \KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(Object).2.rawTaskState.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Hast.Samples.Kpz.Algorithms.KpzKernelsTaskState Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface+<>c::<ScheduleIterations>b__9_0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \KpzKernelsInterface::DoIterations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().KpzKernelsInterface::DoIterations(SimpleMemory)._Finished.0\ <= \KpzKernelsInterface::DoIterations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::DoIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \KpzKernelsInterface::TestAdd(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().KpzKernelsInterface::TestAdd(SimpleMemory)._Finished.0\ <= \KpzKernelsInterface::TestAdd(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsInterface::TestAdd(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory)._Finished.0\ <= \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.Kpz.Algorithms.KpzKernelsParallelizedInterface::ScheduleIterations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.CellIndex\) when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ else \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.DataOut\ when \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \KpzKernels::CopyToSimpleMemoryFromRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernels::CopyFromSimpleMemoryToRawGrid(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernelsInterface::TestAdd(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernelsParallelizedInterface::ScheduleIterations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \KpzKernels::InitializeParametersFromMemory(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
