-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- Custom inter-dependent type declarations start
    type \unsigned8_Array\ is array (integer range <>) of unsigned(7 downto 0);
    type \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\ is record 
        \IsNull\: boolean;
        \Fix64Low\: signed(31 downto 0);
        \Fix64High\: signed(31 downto 0);
    end record;
    type \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult_Array\ is array (integer range <>) of \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    type \signed32_Array\ is array (integer range <>) of signed(31 downto 0);
    type \Hast.Algorithms.Fix64\ is record 
        \IsNull\: boolean;
        \RawValue\: signed(63 downto 0);
    end record;
    -- Custom inter-dependent type declarations end


    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 declarations start
    -- State machine states:
    type \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._States\ is (
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_0\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_1\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_2\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_3\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_4\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_5\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_6\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_7\);
    -- Signals:
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Finished\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers().this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Started\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers().return.0\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 declarations end


    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 declarations start
    -- State machine states:
    type \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._States\ is (
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_0\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_1\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_2\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_3\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_4\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_5\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_6\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_7\);
    -- Signals:
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Finished\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers().this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Started\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers().return.0\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 declarations end


    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 declarations start
    -- State machine states:
    type \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._States\ is (
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_0\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_1\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_2\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_3\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_4\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_5\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_6\, 
        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_7\);
    -- Signals:
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Finished\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers().this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Started.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Started\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Finished.0\: boolean := false;
    Signal \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers().return.0\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 declarations end


    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._States\ is (
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_0\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_1\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_2\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_3\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_4\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_5\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_6\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_7\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_8\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_9\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_10\, 
        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_11\);
    -- Signals:
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Finished\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers().this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Started.0\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Started\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Finished.0\: boolean := false;
    Signal \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers().return.0\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._States\ is (
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_0\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_1\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_2\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_3\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_4\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_5\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_6\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_7\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_8\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_9\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_10\, 
        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_11\);
    -- Signals:
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Finished\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.0\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.1\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.1\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.2\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.2\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Started\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.0\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.1\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.2\: boolean := false;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.0\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.1\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    Signal \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.2\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).0 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int64).0._States\ is (
        \Fix64::.ctor(Int64).0._State_0\, 
        \Fix64::.ctor(Int64).0._State_1\, 
        \Fix64::.ctor(Int64).0._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int64).0._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int64).0.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).0._Started\: boolean := false;
    Signal \Fix64::.ctor(Int64).0.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).0.rawValue.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).0 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).1 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int64).1._States\ is (
        \Fix64::.ctor(Int64).1._State_0\, 
        \Fix64::.ctor(Int64).1._State_1\, 
        \Fix64::.ctor(Int64).1._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int64).1._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int64).1.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).1._Started\: boolean := false;
    Signal \Fix64::.ctor(Int64).1.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).1.rawValue.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).1 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).2 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int64).2._States\ is (
        \Fix64::.ctor(Int64).2._State_0\, 
        \Fix64::.ctor(Int64).2._State_1\, 
        \Fix64::.ctor(Int64).2._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int64).2._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int64).2.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).2._Started\: boolean := false;
    Signal \Fix64::.ctor(Int64).2.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).2.rawValue.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).2 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).3 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int64).3._States\ is (
        \Fix64::.ctor(Int64).3._State_0\, 
        \Fix64::.ctor(Int64).3._State_1\, 
        \Fix64::.ctor(Int64).3._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int64).3._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int64).3.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).3._Started\: boolean := false;
    Signal \Fix64::.ctor(Int64).3.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int64).3.rawValue.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).3 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).0 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int32).0._States\ is (
        \Fix64::.ctor(Int32).0._State_0\, 
        \Fix64::.ctor(Int32).0._State_1\, 
        \Fix64::.ctor(Int32).0._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int32).0._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int32).0.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).0._Started\: boolean := false;
    Signal \Fix64::.ctor(Int32).0.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).0.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).0 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).1 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int32).1._States\ is (
        \Fix64::.ctor(Int32).1._State_0\, 
        \Fix64::.ctor(Int32).1._State_1\, 
        \Fix64::.ctor(Int32).1._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int32).1._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int32).1.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).1._Started\: boolean := false;
    Signal \Fix64::.ctor(Int32).1.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).1.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).1 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).2 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int32).2._States\ is (
        \Fix64::.ctor(Int32).2._State_0\, 
        \Fix64::.ctor(Int32).2._State_1\, 
        \Fix64::.ctor(Int32).2._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int32).2._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int32).2.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).2._Started\: boolean := false;
    Signal \Fix64::.ctor(Int32).2.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).2.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).2 declarations end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).3 declarations start
    -- State machine states:
    type \Fix64::.ctor(Int32).3._States\ is (
        \Fix64::.ctor(Int32).3._State_0\, 
        \Fix64::.ctor(Int32).3._State_1\, 
        \Fix64::.ctor(Int32).3._State_2\);
    -- Signals:
    Signal \Fix64::.ctor(Int32).3._Finished\: boolean := false;
    Signal \Fix64::.ctor(Int32).3.this.parameter.Out\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).3._Started\: boolean := false;
    Signal \Fix64::.ctor(Int32).3.this.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64::.ctor(Int32).3.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).3 declarations end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().0 declarations start
    -- State machine states:
    type \Fix64::ToIntegers().0._States\ is (
        \Fix64::ToIntegers().0._State_0\, 
        \Fix64::ToIntegers().0._State_1\, 
        \Fix64::ToIntegers().0._State_2\);
    -- Signals:
    Signal \Fix64::ToIntegers().0._Finished\: boolean := false;
    Signal \Fix64::ToIntegers().0.return\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    Signal \Fix64::ToIntegers().0._Started\: boolean := false;
    Signal \Fix64::ToIntegers().0.this.parameter.In\: \Hast.Algorithms.Fix64\;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().0 declarations end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().1 declarations start
    -- State machine states:
    type \Fix64::ToIntegers().1._States\ is (
        \Fix64::ToIntegers().1._State_0\, 
        \Fix64::ToIntegers().1._State_1\, 
        \Fix64::ToIntegers().1._State_2\);
    -- Signals:
    Signal \Fix64::ToIntegers().1._Finished\: boolean := false;
    Signal \Fix64::ToIntegers().1.return\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    Signal \Fix64::ToIntegers().1._Started\: boolean := false;
    Signal \Fix64::ToIntegers().1.this.parameter.In\: \Hast.Algorithms.Fix64\;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().1 declarations end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().2 declarations start
    -- State machine states:
    type \Fix64::ToIntegers().2._States\ is (
        \Fix64::ToIntegers().2._State_0\, 
        \Fix64::ToIntegers().2._State_1\, 
        \Fix64::ToIntegers().2._State_2\);
    -- Signals:
    Signal \Fix64::ToIntegers().2._Finished\: boolean := false;
    Signal \Fix64::ToIntegers().2.return\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    Signal \Fix64::ToIntegers().2._Started\: boolean := false;
    Signal \Fix64::ToIntegers().2.this.parameter.In\: \Hast.Algorithms.Fix64\;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().2 declarations end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().3 declarations start
    -- State machine states:
    type \Fix64::ToIntegers().3._States\ is (
        \Fix64::ToIntegers().3._State_0\, 
        \Fix64::ToIntegers().3._State_1\, 
        \Fix64::ToIntegers().3._State_2\);
    -- Signals:
    Signal \Fix64::ToIntegers().3._Finished\: boolean := false;
    Signal \Fix64::ToIntegers().3.return\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    Signal \Fix64::ToIntegers().3._Started\: boolean := false;
    Signal \Fix64::ToIntegers().3.this.parameter.In\: \Hast.Algorithms.Fix64\;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().3 declarations end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).0 declarations start
    -- State machine states:
    type \Fix64 Fix64::op_Addition(Fix64,Fix64).0._States\ is (
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_0\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_1\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_2\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_3\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_4\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_5\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_8\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_9\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_10\);
    -- Signals:
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Finished\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.return\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).rawValue.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Started.0\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Started\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.x.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.y.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Finished.0\: boolean := false;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).0 declarations end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).1 declarations start
    -- State machine states:
    type \Fix64 Fix64::op_Addition(Fix64,Fix64).1._States\ is (
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_0\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_1\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_2\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_3\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_4\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_5\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_8\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_9\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_10\);
    -- Signals:
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Finished\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.return\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).rawValue.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Started.0\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Started\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.x.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.y.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Finished.0\: boolean := false;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).1 declarations end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).2 declarations start
    -- State machine states:
    type \Fix64 Fix64::op_Addition(Fix64,Fix64).2._States\ is (
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_0\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_1\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_2\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_3\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_4\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_5\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_8\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_9\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_10\);
    -- Signals:
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Finished\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.return\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).rawValue.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Started.0\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Started\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.x.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.y.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Finished.0\: boolean := false;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).2 declarations end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).3 declarations start
    -- State machine states:
    type \Fix64 Fix64::op_Addition(Fix64,Fix64).3._States\ is (
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_0\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_1\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_2\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_3\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_4\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_5\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_8\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_9\, 
        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_10\);
    -- Signals:
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Finished\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.return\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).this.parameter.Out.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).rawValue.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Started.0\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Started\: boolean := false;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.x.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.y.parameter.In\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).this.parameter.In.0\: \Hast.Algorithms.Fix64\;
    Signal \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Finished.0\: boolean := false;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).3 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 state machine start
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._StateMachine\: process (\Clock\) 
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\: \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._States\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_0\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix2\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.0\: boolean := false;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.0\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.1\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Finished\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_0\;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.num\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.0\ := false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.array\ := (others => to_signed(0, 32));
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.1\ := (others => to_signed(0, 32));
            else 
                case \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ is 
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Started\ = true) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Started\ = true) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Finished\ <= true;
                        else 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Finished\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_2\ => 
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 fix;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- fix = new Fix64 (1);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\.\IsNull\ := false;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).this.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(1, 32);
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Started.0\ <= true;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Fix64 fix2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix2 = fix;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix2\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = 1;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.num\ := to_signed(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num < upToNumberObject) {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_4\ => 
                        -- Repeated state of the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_3\.
                        -- The while loop's condition:
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.0\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.num\ < \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject\;
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix = Fix64.op_Addition (fix, fix2);
                            -- 
                            -- Starting state machine invocation for the following method: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix2\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= true;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_6\;
                        else 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.46515
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_5\ => 
                        -- State after the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = Hast.Algorithms.Fix64.ToIntegers (fix);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers().this.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Started.0\ <= true;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.0\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.fix\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.1\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.num\ + to_signed(1, 32);
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.num\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.binaryOperationResult.1\;
                            -- Returning to the repeated state of the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_3\ if the loop wasn't exited with a state change.
                            if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_6\) then 
                                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.1\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers().return.0\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.array\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- TaskResult objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a = new TaskResult { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\IsNull\ := false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64Low\ := to_signed(0, 32);
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64High\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a.Fix64High = array [1];
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64High\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.array\(to_integer(to_signed(1, 32)));
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a.Fix64Low = array [0];
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64Low\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.array\(to_integer(to_signed(0, 32)));
                            -- The following section was transformed from the .NET statement below:
                            -- return objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 state machine end


    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 state machine start
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._StateMachine\: process (\Clock\) 
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\: \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._States\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_0\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix2\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.0\: boolean := false;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.0\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.1\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Finished\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_0\;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.num\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.0\ := false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.array\ := (others => to_signed(0, 32));
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.1\ := (others => to_signed(0, 32));
            else 
                case \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ is 
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Started\ = true) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Started\ = true) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Finished\ <= true;
                        else 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Finished\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_2\ => 
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 fix;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- fix = new Fix64 (1);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\.\IsNull\ := false;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).this.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(1, 32);
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Started.0\ <= true;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Fix64 fix2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix2 = fix;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix2\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = 1;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.num\ := to_signed(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num < upToNumberObject) {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_4\ => 
                        -- Repeated state of the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_3\.
                        -- The while loop's condition:
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.0\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.num\ < \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject\;
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix = Fix64.op_Addition (fix, fix2);
                            -- 
                            -- Starting state machine invocation for the following method: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix2\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= true;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_6\;
                        else 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.46515
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_5\ => 
                        -- State after the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = Hast.Algorithms.Fix64.ToIntegers (fix);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers().this.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Started.0\ <= true;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.0\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.fix\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.1\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.num\ + to_signed(1, 32);
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.num\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.binaryOperationResult.1\;
                            -- Returning to the repeated state of the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_3\ if the loop wasn't exited with a state change.
                            if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_6\) then 
                                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.1\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers().return.0\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.array\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- TaskResult objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a = new TaskResult { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\IsNull\ := false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64Low\ := to_signed(0, 32);
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64High\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a.Fix64High = array [1];
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64High\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.array\(to_integer(to_signed(1, 32)));
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a.Fix64Low = array [0];
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64Low\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.array\(to_integer(to_signed(0, 32)));
                            -- The following section was transformed from the .NET statement below:
                            -- return objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 state machine end


    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 state machine start
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._StateMachine\: process (\Clock\) 
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\: \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._States\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_0\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix2\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.0\: boolean := false;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.0\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.1\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Finished\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Started.0\ <= false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_0\;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.num\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.0\ := false;
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.array\ := (others => to_signed(0, 32));
                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.1\ := (others => to_signed(0, 32));
            else 
                case \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ is 
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Started\ = true) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Started\ = true) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Finished\ <= true;
                        else 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Finished\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_2\ => 
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 fix;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- fix = new Fix64 (1);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\.\IsNull\ := false;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).this.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(1, 32);
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Started.0\ <= true;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Fix64 fix2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix2 = fix;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix2\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = 1;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.num\ := to_signed(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num < upToNumberObject) {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_4\ => 
                        -- Repeated state of the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_3\.
                        -- The while loop's condition:
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.0\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.num\ < \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject\;
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix = Fix64.op_Addition (fix, fix2);
                            -- 
                            -- Starting state machine invocation for the following method: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix2\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= true;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_6\;
                        else 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.46515
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_5\ => 
                        -- State after the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = Hast.Algorithms.Fix64.ToIntegers (fix);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers().this.parameter.Out.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Started.0\ <= true;
                        \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.0\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.fix\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.1\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.num\ + to_signed(1, 32);
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.num\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.binaryOperationResult.1\;
                            -- Returning to the repeated state of the while loop which was started in state \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_3\ if the loop wasn't exited with a state change.
                            if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_6\) then 
                                \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                    when \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        if (\Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Started.0\ = \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Finished.0\) then 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Started.0\ <= false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.1\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers().return.0\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.array\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- TaskResult objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a = new TaskResult { };
                            -- 
                            -- Initializing record fields to their defaults.
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\IsNull\ := false;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64Low\ := to_signed(0, 32);
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64High\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a.Fix64High = array [1];
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64High\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.array\(to_integer(to_signed(1, 32)));
                            -- The following section was transformed from the .NET statement below:
                            -- objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a.Fix64Low = array [0];
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\.\Fix64Low\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.array\(to_integer(to_signed(0, 32)));
                            -- The following section was transformed from the .NET statement below:
                            -- return objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a;
                            -- 
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.objectf43a9902da0167d287e390b606dc114374bcc299f6ce67c9710c054735745d6a\;
                            \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State\ := \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 state machine end


    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\: \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._States\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_0\;
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix2\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.0\: \Hast.Algorithms.Fix64\;
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
        Variable \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.1\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Finished\ <= false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Started.0\ <= false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Started.0\ <= false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_0\;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num\ := to_signed(0, 32);
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.dataIn.0\ := (others => '0');
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num2\ := to_signed(0, 32);
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.0\ := false;
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.array\ := (others => to_signed(0, 32));
                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.1\ := (others => to_signed(0, 32));
            else 
                case \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ is 
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Started\ = true) then 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Started\ = true) then 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Finished\ <= true;
                        else 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Finished\ <= false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- Fix64 fix;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix = new Fix64 (1);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\.\IsNull\ := false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\.\RawValue\ := to_signed(0, 64);
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).this.parameter.Out.0\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).value.parameter.Out.0\ <= to_signed(1, 32);
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Started.0\ <= true;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int32)
                        if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Started.0\ = \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Finished.0\) then 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Started.0\ <= false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Fix64 fix2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix2 = fix;
                            -- 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix2\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 1;
                            -- 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num2\ := to_signed(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < num) {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_4\.
                        -- The while loop's condition:
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.0\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num2\ < \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num\;
                        if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	fix = Fix64.op_Addition (fix, fix2);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- fix = Fix64.op_Addition (fix, fix2);
                            -- 
                            -- Starting state machine invocation for the following method: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix2\;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= true;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_7\;
                        else 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.46515
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_6\ => 
                        -- State after the while loop which was started in state \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = Hast.Algorithms.Fix64.ToIntegers (fix);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers().this.parameter.Out.0\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\;
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Started.0\ <= true;
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64)
                        if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ = \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\) then 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\ <= false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.0\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.fix\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.1\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num2\ + to_signed(1, 32);
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.num2\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.binaryOperationResult.1\;
                            -- Returning to the repeated state of the while loop which was started in state \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_4\ if the loop wasn't exited with a state change.
                            if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ = \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_7\) then 
                                \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32[] Hast.Algorithms.Fix64::ToIntegers()
                        if (\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Started.0\ = \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Finished.0\) then 
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Started.0\ <= false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.1\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers().return.0\;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.array\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (0, array [0]);
                            -- 
                            -- Begin SimpleMemory write.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.array\(to_integer(to_signed(0, 32))));
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_9\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (1, array [1]);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_10\ => 
                        -- Begin SimpleMemory write.
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.array\(to_integer(to_signed(1, 32))));
                        \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_11\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State\ := \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\: \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._States\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_0\;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.array\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult_Array\(0 to 9);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.0\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.1\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.2\: \Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult\;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.2\: boolean := false;
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Finished\ <= false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.0\ <= to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.0\ <= false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.1\ <= to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.1\ <= false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.2\ <= to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.2\ <= false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_0\;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.0\ := false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num2\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.dataIn.0\ := (others => '0');
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).invocationIndex\ := 0;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.2\ := false;
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num4\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
            else 
                case \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ is 
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Started\ = true) then 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Started\ = true) then 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Finished\ <= true;
                        else 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Finished\ <= false;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- Task<TaskResult>[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new Task<TaskResult>[10];
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 10) {
                        -- 	int num2;
                        -- 	num2 = memory.ReadInt32 (num);
                        -- 	array [num] = Task.Factory.StartNew (<>c.<>9__7_0 ?? (<>c.<>9__7_0 = <>c.<>9.<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0), num2);
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_2\.
                        -- The while loop's condition:
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.0\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\ < to_signed(10, 32);
                        if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num2;
                            -- 	num2 = memory.ReadInt32 (num);
                            -- 	array [num] = Task.Factory.StartNew (<>c.<>9__7_0 ?? (<>c.<>9__7_0 = <>c.<>9.<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0), num2);
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = memory.ReadInt32 (num);
                            -- 
                            -- Begin SimpleMemory read.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_5\;
                        else 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.46515
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_4\ => 
                        -- State after the while loop which was started in state \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array).Wait ();
                        -- 
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num2\ := ConvertStdLogicVectorToInt32(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- array [num] = Task.Factory.StartNew (<>c.<>9__7_0 ?? (<>c.<>9__7_0 = <>c.<>9.<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0), num2);
                            -- 
                            -- Starting state machine invocation for the following method: Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object)
                            case \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).invocationIndex\ is 
                                when 0 => 
                                    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.0\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num2\;
                                    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.0\ <= true;
                                when 1 => 
                                    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.1\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num2\;
                                    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.1\ <= true;
                                when 2 => 
                                    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.2\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num2\;
                                    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.2\ <= true;
                            end case;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).invocationIndex\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).invocationIndex\ + 1;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.1\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\ + to_signed(1, 32);
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.1\;
                            -- Returning to the repeated state of the while loop which was started in state \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_2\ if the loop wasn't exited with a state change.
                            if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ = \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_5\) then 
                                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_3\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object)
                        if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.1\ = \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.1\ and \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.2\ = \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.2\ and \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.0\ = \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.0\) then 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.0\ <= false;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.1\ <= false;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.2\ <= false;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).invocationIndex\ := 0;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.0\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.0\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.1\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.1\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.2\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.2\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.array\(0) := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.0\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.array\(1) := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.1\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.array\(2) := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num3 < 10) {
                            -- 	int num4;
                            -- 	num4 = num3 * 2;
                            -- 	memory.WriteInt32 (num4, array [num3].Result.Fix64Low);
                            -- 	memory.WriteInt32 (num4 + 1, array [num3].Result.Fix64High);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_7\ => 
                        -- Repeated state of the while loop which was started in state \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_6\.
                        -- The while loop's condition:
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.2\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\ < to_signed(10, 32);
                        if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.2\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num4;
                            -- 	num4 = num3 * 2;
                            -- 	memory.WriteInt32 (num4, array [num3].Result.Fix64Low);
                            -- 	memory.WriteInt32 (num4 + 1, array [num3].Result.Fix64High);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num3 * 2;
                            -- 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.3\ := SmartResize(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\ * to_signed(2, 32), 32);
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num4\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (num4, array [num3].Result.Fix64Low);
                            -- 
                            -- Begin SimpleMemory write.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num4\;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.array\(to_integer(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\)).\Fix64Low\);
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_9\;
                        else 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.61725
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_8\ => 
                        -- State after the while loop which was started in state \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_6\.
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_9\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (num4 + 1, array [num3].Result.Fix64High);
                            -- 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.4\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num4\ + to_signed(1, 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_10\ => 
                        -- Begin SimpleMemory write.
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.4\;
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.array\(to_integer(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\)).\Fix64High\);
                        \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_11\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.5\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.num3\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.binaryOperationResult.5\;
                            -- Returning to the repeated state of the while loop which was started in state \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_6\ if the loop wasn't exited with a state change.
                            if (\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ = \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_11\) then 
                                \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State\ := \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._State_7\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3981
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).0 state machine start
    \Fix64::.ctor(Int64).0._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int64).0._State\: \Fix64::.ctor(Int64).0._States\ := \Fix64::.ctor(Int64).0._State_0\;
        Variable \Fix64::.ctor(Int64).0.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int64).0.rawValue\: signed(63 downto 0) := to_signed(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int64).0._Finished\ <= false;
                \Fix64::.ctor(Int64).0._State\ := \Fix64::.ctor(Int64).0._State_0\;
                \Fix64::.ctor(Int64).0.rawValue\ := to_signed(0, 64);
            else 
                case \Fix64::.ctor(Int64).0._State\ is 
                    when \Fix64::.ctor(Int64).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int64).0._Started\ = true) then 
                            \Fix64::.ctor(Int64).0._State\ := \Fix64::.ctor(Int64).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int64).0._Started\ = true) then 
                            \Fix64::.ctor(Int64).0._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int64).0._Finished\ <= false;
                            \Fix64::.ctor(Int64).0._State\ := \Fix64::.ctor(Int64).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int64).0.this.parameter.Out\ <= \Fix64::.ctor(Int64).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).0._State_2\ => 
                        \Fix64::.ctor(Int64).0.this\ := \Fix64::.ctor(Int64).0.this.parameter.In\;
                        \Fix64::.ctor(Int64).0.rawValue\ := \Fix64::.ctor(Int64).0.rawValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = rawValue;
                        -- 
                        \Fix64::.ctor(Int64).0.this\.\RawValue\ := \Fix64::.ctor(Int64).0.rawValue\;
                        \Fix64::.ctor(Int64).0._State\ := \Fix64::.ctor(Int64).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).0 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).1 state machine start
    \Fix64::.ctor(Int64).1._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int64).1._State\: \Fix64::.ctor(Int64).1._States\ := \Fix64::.ctor(Int64).1._State_0\;
        Variable \Fix64::.ctor(Int64).1.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int64).1.rawValue\: signed(63 downto 0) := to_signed(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int64).1._Finished\ <= false;
                \Fix64::.ctor(Int64).1._State\ := \Fix64::.ctor(Int64).1._State_0\;
                \Fix64::.ctor(Int64).1.rawValue\ := to_signed(0, 64);
            else 
                case \Fix64::.ctor(Int64).1._State\ is 
                    when \Fix64::.ctor(Int64).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int64).1._Started\ = true) then 
                            \Fix64::.ctor(Int64).1._State\ := \Fix64::.ctor(Int64).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int64).1._Started\ = true) then 
                            \Fix64::.ctor(Int64).1._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int64).1._Finished\ <= false;
                            \Fix64::.ctor(Int64).1._State\ := \Fix64::.ctor(Int64).1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int64).1.this.parameter.Out\ <= \Fix64::.ctor(Int64).1.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).1._State_2\ => 
                        \Fix64::.ctor(Int64).1.this\ := \Fix64::.ctor(Int64).1.this.parameter.In\;
                        \Fix64::.ctor(Int64).1.rawValue\ := \Fix64::.ctor(Int64).1.rawValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = rawValue;
                        -- 
                        \Fix64::.ctor(Int64).1.this\.\RawValue\ := \Fix64::.ctor(Int64).1.rawValue\;
                        \Fix64::.ctor(Int64).1._State\ := \Fix64::.ctor(Int64).1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).1 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).2 state machine start
    \Fix64::.ctor(Int64).2._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int64).2._State\: \Fix64::.ctor(Int64).2._States\ := \Fix64::.ctor(Int64).2._State_0\;
        Variable \Fix64::.ctor(Int64).2.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int64).2.rawValue\: signed(63 downto 0) := to_signed(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int64).2._Finished\ <= false;
                \Fix64::.ctor(Int64).2._State\ := \Fix64::.ctor(Int64).2._State_0\;
                \Fix64::.ctor(Int64).2.rawValue\ := to_signed(0, 64);
            else 
                case \Fix64::.ctor(Int64).2._State\ is 
                    when \Fix64::.ctor(Int64).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int64).2._Started\ = true) then 
                            \Fix64::.ctor(Int64).2._State\ := \Fix64::.ctor(Int64).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int64).2._Started\ = true) then 
                            \Fix64::.ctor(Int64).2._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int64).2._Finished\ <= false;
                            \Fix64::.ctor(Int64).2._State\ := \Fix64::.ctor(Int64).2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int64).2.this.parameter.Out\ <= \Fix64::.ctor(Int64).2.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).2._State_2\ => 
                        \Fix64::.ctor(Int64).2.this\ := \Fix64::.ctor(Int64).2.this.parameter.In\;
                        \Fix64::.ctor(Int64).2.rawValue\ := \Fix64::.ctor(Int64).2.rawValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = rawValue;
                        -- 
                        \Fix64::.ctor(Int64).2.this\.\RawValue\ := \Fix64::.ctor(Int64).2.rawValue\;
                        \Fix64::.ctor(Int64).2._State\ := \Fix64::.ctor(Int64).2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).2 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).3 state machine start
    \Fix64::.ctor(Int64).3._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int64).3._State\: \Fix64::.ctor(Int64).3._States\ := \Fix64::.ctor(Int64).3._State_0\;
        Variable \Fix64::.ctor(Int64).3.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int64).3.rawValue\: signed(63 downto 0) := to_signed(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int64).3._Finished\ <= false;
                \Fix64::.ctor(Int64).3._State\ := \Fix64::.ctor(Int64).3._State_0\;
                \Fix64::.ctor(Int64).3.rawValue\ := to_signed(0, 64);
            else 
                case \Fix64::.ctor(Int64).3._State\ is 
                    when \Fix64::.ctor(Int64).3._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int64).3._Started\ = true) then 
                            \Fix64::.ctor(Int64).3._State\ := \Fix64::.ctor(Int64).3._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).3._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int64).3._Started\ = true) then 
                            \Fix64::.ctor(Int64).3._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int64).3._Finished\ <= false;
                            \Fix64::.ctor(Int64).3._State\ := \Fix64::.ctor(Int64).3._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int64).3.this.parameter.Out\ <= \Fix64::.ctor(Int64).3.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int64).3._State_2\ => 
                        \Fix64::.ctor(Int64).3.this\ := \Fix64::.ctor(Int64).3.this.parameter.In\;
                        \Fix64::.ctor(Int64).3.rawValue\ := \Fix64::.ctor(Int64).3.rawValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = rawValue;
                        -- 
                        \Fix64::.ctor(Int64).3.this\.\RawValue\ := \Fix64::.ctor(Int64).3.rawValue\;
                        \Fix64::.ctor(Int64).3._State\ := \Fix64::.ctor(Int64).3._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int64).3 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).0 state machine start
    \Fix64::.ctor(Int32).0._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int32).0._State\: \Fix64::.ctor(Int32).0._States\ := \Fix64::.ctor(Int32).0._State_0\;
        Variable \Fix64::.ctor(Int32).0.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int32).0.value\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int32).0._Finished\ <= false;
                \Fix64::.ctor(Int32).0._State\ := \Fix64::.ctor(Int32).0._State_0\;
                \Fix64::.ctor(Int32).0.value\ := to_signed(0, 32);
            else 
                case \Fix64::.ctor(Int32).0._State\ is 
                    when \Fix64::.ctor(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int32).0._Started\ = true) then 
                            \Fix64::.ctor(Int32).0._State\ := \Fix64::.ctor(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int32).0._Started\ = true) then 
                            \Fix64::.ctor(Int32).0._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int32).0._Finished\ <= false;
                            \Fix64::.ctor(Int32).0._State\ := \Fix64::.ctor(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int32).0.this.parameter.Out\ <= \Fix64::.ctor(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).0._State_2\ => 
                        \Fix64::.ctor(Int32).0.this\ := \Fix64::.ctor(Int32).0.this.parameter.In\;
                        \Fix64::.ctor(Int32).0.value\ := \Fix64::.ctor(Int32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = 4294967296L;
                        -- 
                        -- Since the integer literal 4294967296 was out of the VHDL integer range it was substituted with a binary literal (100000000000000000000000000000000).
                        \Fix64::.ctor(Int32).0.this\.\RawValue\ := "0000000000000000000000000000000100000000000000000000000000000000";
                        \Fix64::.ctor(Int32).0._State\ := \Fix64::.ctor(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).0 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).1 state machine start
    \Fix64::.ctor(Int32).1._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int32).1._State\: \Fix64::.ctor(Int32).1._States\ := \Fix64::.ctor(Int32).1._State_0\;
        Variable \Fix64::.ctor(Int32).1.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int32).1.value\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int32).1._Finished\ <= false;
                \Fix64::.ctor(Int32).1._State\ := \Fix64::.ctor(Int32).1._State_0\;
                \Fix64::.ctor(Int32).1.value\ := to_signed(0, 32);
            else 
                case \Fix64::.ctor(Int32).1._State\ is 
                    when \Fix64::.ctor(Int32).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int32).1._Started\ = true) then 
                            \Fix64::.ctor(Int32).1._State\ := \Fix64::.ctor(Int32).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int32).1._Started\ = true) then 
                            \Fix64::.ctor(Int32).1._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int32).1._Finished\ <= false;
                            \Fix64::.ctor(Int32).1._State\ := \Fix64::.ctor(Int32).1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int32).1.this.parameter.Out\ <= \Fix64::.ctor(Int32).1.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).1._State_2\ => 
                        \Fix64::.ctor(Int32).1.this\ := \Fix64::.ctor(Int32).1.this.parameter.In\;
                        \Fix64::.ctor(Int32).1.value\ := \Fix64::.ctor(Int32).1.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = 4294967296L;
                        -- 
                        -- Since the integer literal 4294967296 was out of the VHDL integer range it was substituted with a binary literal (100000000000000000000000000000000).
                        \Fix64::.ctor(Int32).1.this\.\RawValue\ := "0000000000000000000000000000000100000000000000000000000000000000";
                        \Fix64::.ctor(Int32).1._State\ := \Fix64::.ctor(Int32).1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).1 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).2 state machine start
    \Fix64::.ctor(Int32).2._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int32).2._State\: \Fix64::.ctor(Int32).2._States\ := \Fix64::.ctor(Int32).2._State_0\;
        Variable \Fix64::.ctor(Int32).2.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int32).2.value\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int32).2._Finished\ <= false;
                \Fix64::.ctor(Int32).2._State\ := \Fix64::.ctor(Int32).2._State_0\;
                \Fix64::.ctor(Int32).2.value\ := to_signed(0, 32);
            else 
                case \Fix64::.ctor(Int32).2._State\ is 
                    when \Fix64::.ctor(Int32).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int32).2._Started\ = true) then 
                            \Fix64::.ctor(Int32).2._State\ := \Fix64::.ctor(Int32).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int32).2._Started\ = true) then 
                            \Fix64::.ctor(Int32).2._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int32).2._Finished\ <= false;
                            \Fix64::.ctor(Int32).2._State\ := \Fix64::.ctor(Int32).2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int32).2.this.parameter.Out\ <= \Fix64::.ctor(Int32).2.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).2._State_2\ => 
                        \Fix64::.ctor(Int32).2.this\ := \Fix64::.ctor(Int32).2.this.parameter.In\;
                        \Fix64::.ctor(Int32).2.value\ := \Fix64::.ctor(Int32).2.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = 4294967296L;
                        -- 
                        -- Since the integer literal 4294967296 was out of the VHDL integer range it was substituted with a binary literal (100000000000000000000000000000000).
                        \Fix64::.ctor(Int32).2.this\.\RawValue\ := "0000000000000000000000000000000100000000000000000000000000000000";
                        \Fix64::.ctor(Int32).2._State\ := \Fix64::.ctor(Int32).2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).2 state machine end


    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).3 state machine start
    \Fix64::.ctor(Int32).3._StateMachine\: process (\Clock\) 
        Variable \Fix64::.ctor(Int32).3._State\: \Fix64::.ctor(Int32).3._States\ := \Fix64::.ctor(Int32).3._State_0\;
        Variable \Fix64::.ctor(Int32).3.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::.ctor(Int32).3.value\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::.ctor(Int32).3._Finished\ <= false;
                \Fix64::.ctor(Int32).3._State\ := \Fix64::.ctor(Int32).3._State_0\;
                \Fix64::.ctor(Int32).3.value\ := to_signed(0, 32);
            else 
                case \Fix64::.ctor(Int32).3._State\ is 
                    when \Fix64::.ctor(Int32).3._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::.ctor(Int32).3._Started\ = true) then 
                            \Fix64::.ctor(Int32).3._State\ := \Fix64::.ctor(Int32).3._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).3._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::.ctor(Int32).3._Started\ = true) then 
                            \Fix64::.ctor(Int32).3._Finished\ <= true;
                        else 
                            \Fix64::.ctor(Int32).3._Finished\ <= false;
                            \Fix64::.ctor(Int32).3._State\ := \Fix64::.ctor(Int32).3._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Fix64::.ctor(Int32).3.this.parameter.Out\ <= \Fix64::.ctor(Int32).3.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::.ctor(Int32).3._State_2\ => 
                        \Fix64::.ctor(Int32).3.this\ := \Fix64::.ctor(Int32).3.this.parameter.In\;
                        \Fix64::.ctor(Int32).3.value\ := \Fix64::.ctor(Int32).3.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.RawValue = 4294967296L;
                        -- 
                        -- Since the integer literal 4294967296 was out of the VHDL integer range it was substituted with a binary literal (100000000000000000000000000000000).
                        \Fix64::.ctor(Int32).3.this\.\RawValue\ := "0000000000000000000000000000000100000000000000000000000000000000";
                        \Fix64::.ctor(Int32).3._State\ := \Fix64::.ctor(Int32).3._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Algorithms.Fix64::.ctor(System.Int32).3 state machine end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().0 state machine start
    \Fix64::ToIntegers().0._StateMachine\: process (\Clock\) 
        Variable \Fix64::ToIntegers().0._State\: \Fix64::ToIntegers().0._States\ := \Fix64::ToIntegers().0._State_0\;
        Variable \Fix64::ToIntegers().0.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::ToIntegers().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().0.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::ToIntegers().0._Finished\ <= false;
                \Fix64::ToIntegers().0.return\ <= (others => to_signed(0, 32));
                \Fix64::ToIntegers().0._State\ := \Fix64::ToIntegers().0._State_0\;
                \Fix64::ToIntegers().0.num\ := to_signed(0, 32);
                \Fix64::ToIntegers().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Fix64::ToIntegers().0.num2\ := to_signed(0, 32);
                \Fix64::ToIntegers().0.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64::ToIntegers().0.array\ := (others => to_signed(0, 32));
            else 
                case \Fix64::ToIntegers().0._State\ is 
                    when \Fix64::ToIntegers().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::ToIntegers().0._Started\ = true) then 
                            \Fix64::ToIntegers().0._State\ := \Fix64::ToIntegers().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::ToIntegers().0._Started\ = true) then 
                            \Fix64::ToIntegers().0._Finished\ <= true;
                        else 
                            \Fix64::ToIntegers().0._Finished\ <= false;
                            \Fix64::ToIntegers().0._State\ := \Fix64::ToIntegers().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().0._State_2\ => 
                        \Fix64::ToIntegers().0.this\ := \Fix64::ToIntegers().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (int)(@this.RawValue & 4294967295L);
                        -- 
                        -- Since the integer literal 4294967295 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111111).
                        \Fix64::ToIntegers().0.binaryOperationResult.0\ := SmartResize(\Fix64::ToIntegers().0.this\.\RawValue\ and "0000000000000000000000000000000011111111111111111111111111111111", 32);
                        \Fix64::ToIntegers().0.num\ := (\Fix64::ToIntegers().0.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)(@this.RawValue >> 32);
                        -- 
                        \Fix64::ToIntegers().0.binaryOperationResult.1\ := SmartResize(shift_right(\Fix64::ToIntegers().0.this\.\RawValue\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \Fix64::ToIntegers().0.num2\ := (\Fix64::ToIntegers().0.binaryOperationResult.1\);
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[2];
                        -- 
                        \Fix64::ToIntegers().0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- array [0] = num;
                        -- 
                        \Fix64::ToIntegers().0.array\(to_integer(to_signed(0, 32))) := \Fix64::ToIntegers().0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [1] = num2;
                        -- 
                        \Fix64::ToIntegers().0.array\(to_integer(to_signed(1, 32))) := \Fix64::ToIntegers().0.num2\;
                        -- The following section was transformed from the .NET statement below:
                        -- return array;
                        -- 
                        \Fix64::ToIntegers().0.return\ <= \Fix64::ToIntegers().0.array\;
                        \Fix64::ToIntegers().0._State\ := \Fix64::ToIntegers().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6696
                end case;
            end if;
        end if;
    end process;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().0 state machine end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().1 state machine start
    \Fix64::ToIntegers().1._StateMachine\: process (\Clock\) 
        Variable \Fix64::ToIntegers().1._State\: \Fix64::ToIntegers().1._States\ := \Fix64::ToIntegers().1._State_0\;
        Variable \Fix64::ToIntegers().1.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::ToIntegers().1.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().1.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().1.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().1.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().1.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::ToIntegers().1._Finished\ <= false;
                \Fix64::ToIntegers().1.return\ <= (others => to_signed(0, 32));
                \Fix64::ToIntegers().1._State\ := \Fix64::ToIntegers().1._State_0\;
                \Fix64::ToIntegers().1.num\ := to_signed(0, 32);
                \Fix64::ToIntegers().1.binaryOperationResult.0\ := to_signed(0, 32);
                \Fix64::ToIntegers().1.num2\ := to_signed(0, 32);
                \Fix64::ToIntegers().1.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64::ToIntegers().1.array\ := (others => to_signed(0, 32));
            else 
                case \Fix64::ToIntegers().1._State\ is 
                    when \Fix64::ToIntegers().1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::ToIntegers().1._Started\ = true) then 
                            \Fix64::ToIntegers().1._State\ := \Fix64::ToIntegers().1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::ToIntegers().1._Started\ = true) then 
                            \Fix64::ToIntegers().1._Finished\ <= true;
                        else 
                            \Fix64::ToIntegers().1._Finished\ <= false;
                            \Fix64::ToIntegers().1._State\ := \Fix64::ToIntegers().1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().1._State_2\ => 
                        \Fix64::ToIntegers().1.this\ := \Fix64::ToIntegers().1.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (int)(@this.RawValue & 4294967295L);
                        -- 
                        -- Since the integer literal 4294967295 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111111).
                        \Fix64::ToIntegers().1.binaryOperationResult.0\ := SmartResize(\Fix64::ToIntegers().1.this\.\RawValue\ and "0000000000000000000000000000000011111111111111111111111111111111", 32);
                        \Fix64::ToIntegers().1.num\ := (\Fix64::ToIntegers().1.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)(@this.RawValue >> 32);
                        -- 
                        \Fix64::ToIntegers().1.binaryOperationResult.1\ := SmartResize(shift_right(\Fix64::ToIntegers().1.this\.\RawValue\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \Fix64::ToIntegers().1.num2\ := (\Fix64::ToIntegers().1.binaryOperationResult.1\);
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[2];
                        -- 
                        \Fix64::ToIntegers().1.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- array [0] = num;
                        -- 
                        \Fix64::ToIntegers().1.array\(to_integer(to_signed(0, 32))) := \Fix64::ToIntegers().1.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [1] = num2;
                        -- 
                        \Fix64::ToIntegers().1.array\(to_integer(to_signed(1, 32))) := \Fix64::ToIntegers().1.num2\;
                        -- The following section was transformed from the .NET statement below:
                        -- return array;
                        -- 
                        \Fix64::ToIntegers().1.return\ <= \Fix64::ToIntegers().1.array\;
                        \Fix64::ToIntegers().1._State\ := \Fix64::ToIntegers().1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6696
                end case;
            end if;
        end if;
    end process;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().1 state machine end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().2 state machine start
    \Fix64::ToIntegers().2._StateMachine\: process (\Clock\) 
        Variable \Fix64::ToIntegers().2._State\: \Fix64::ToIntegers().2._States\ := \Fix64::ToIntegers().2._State_0\;
        Variable \Fix64::ToIntegers().2.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::ToIntegers().2.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().2.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().2.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().2.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().2.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::ToIntegers().2._Finished\ <= false;
                \Fix64::ToIntegers().2.return\ <= (others => to_signed(0, 32));
                \Fix64::ToIntegers().2._State\ := \Fix64::ToIntegers().2._State_0\;
                \Fix64::ToIntegers().2.num\ := to_signed(0, 32);
                \Fix64::ToIntegers().2.binaryOperationResult.0\ := to_signed(0, 32);
                \Fix64::ToIntegers().2.num2\ := to_signed(0, 32);
                \Fix64::ToIntegers().2.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64::ToIntegers().2.array\ := (others => to_signed(0, 32));
            else 
                case \Fix64::ToIntegers().2._State\ is 
                    when \Fix64::ToIntegers().2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::ToIntegers().2._Started\ = true) then 
                            \Fix64::ToIntegers().2._State\ := \Fix64::ToIntegers().2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::ToIntegers().2._Started\ = true) then 
                            \Fix64::ToIntegers().2._Finished\ <= true;
                        else 
                            \Fix64::ToIntegers().2._Finished\ <= false;
                            \Fix64::ToIntegers().2._State\ := \Fix64::ToIntegers().2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().2._State_2\ => 
                        \Fix64::ToIntegers().2.this\ := \Fix64::ToIntegers().2.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (int)(@this.RawValue & 4294967295L);
                        -- 
                        -- Since the integer literal 4294967295 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111111).
                        \Fix64::ToIntegers().2.binaryOperationResult.0\ := SmartResize(\Fix64::ToIntegers().2.this\.\RawValue\ and "0000000000000000000000000000000011111111111111111111111111111111", 32);
                        \Fix64::ToIntegers().2.num\ := (\Fix64::ToIntegers().2.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)(@this.RawValue >> 32);
                        -- 
                        \Fix64::ToIntegers().2.binaryOperationResult.1\ := SmartResize(shift_right(\Fix64::ToIntegers().2.this\.\RawValue\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \Fix64::ToIntegers().2.num2\ := (\Fix64::ToIntegers().2.binaryOperationResult.1\);
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[2];
                        -- 
                        \Fix64::ToIntegers().2.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- array [0] = num;
                        -- 
                        \Fix64::ToIntegers().2.array\(to_integer(to_signed(0, 32))) := \Fix64::ToIntegers().2.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [1] = num2;
                        -- 
                        \Fix64::ToIntegers().2.array\(to_integer(to_signed(1, 32))) := \Fix64::ToIntegers().2.num2\;
                        -- The following section was transformed from the .NET statement below:
                        -- return array;
                        -- 
                        \Fix64::ToIntegers().2.return\ <= \Fix64::ToIntegers().2.array\;
                        \Fix64::ToIntegers().2._State\ := \Fix64::ToIntegers().2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6696
                end case;
            end if;
        end if;
    end process;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().2 state machine end


    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().3 state machine start
    \Fix64::ToIntegers().3._StateMachine\: process (\Clock\) 
        Variable \Fix64::ToIntegers().3._State\: \Fix64::ToIntegers().3._States\ := \Fix64::ToIntegers().3._State_0\;
        Variable \Fix64::ToIntegers().3.this\: \Hast.Algorithms.Fix64\;
        Variable \Fix64::ToIntegers().3.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().3.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().3.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().3.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Fix64::ToIntegers().3.array\: \signed32_Array\(0 to 1) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64::ToIntegers().3._Finished\ <= false;
                \Fix64::ToIntegers().3.return\ <= (others => to_signed(0, 32));
                \Fix64::ToIntegers().3._State\ := \Fix64::ToIntegers().3._State_0\;
                \Fix64::ToIntegers().3.num\ := to_signed(0, 32);
                \Fix64::ToIntegers().3.binaryOperationResult.0\ := to_signed(0, 32);
                \Fix64::ToIntegers().3.num2\ := to_signed(0, 32);
                \Fix64::ToIntegers().3.binaryOperationResult.1\ := to_signed(0, 32);
                \Fix64::ToIntegers().3.array\ := (others => to_signed(0, 32));
            else 
                case \Fix64::ToIntegers().3._State\ is 
                    when \Fix64::ToIntegers().3._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64::ToIntegers().3._Started\ = true) then 
                            \Fix64::ToIntegers().3._State\ := \Fix64::ToIntegers().3._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().3._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64::ToIntegers().3._Started\ = true) then 
                            \Fix64::ToIntegers().3._Finished\ <= true;
                        else 
                            \Fix64::ToIntegers().3._Finished\ <= false;
                            \Fix64::ToIntegers().3._State\ := \Fix64::ToIntegers().3._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64::ToIntegers().3._State_2\ => 
                        \Fix64::ToIntegers().3.this\ := \Fix64::ToIntegers().3.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (int)(@this.RawValue & 4294967295L);
                        -- 
                        -- Since the integer literal 4294967295 was out of the VHDL integer range it was substituted with a binary literal (11111111111111111111111111111111).
                        \Fix64::ToIntegers().3.binaryOperationResult.0\ := SmartResize(\Fix64::ToIntegers().3.this\.\RawValue\ and "0000000000000000000000000000000011111111111111111111111111111111", 32);
                        \Fix64::ToIntegers().3.num\ := (\Fix64::ToIntegers().3.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)(@this.RawValue >> 32);
                        -- 
                        \Fix64::ToIntegers().3.binaryOperationResult.1\ := SmartResize(shift_right(\Fix64::ToIntegers().3.this\.\RawValue\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        \Fix64::ToIntegers().3.num2\ := (\Fix64::ToIntegers().3.binaryOperationResult.1\);
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[2];
                        -- 
                        \Fix64::ToIntegers().3.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- array [0] = num;
                        -- 
                        \Fix64::ToIntegers().3.array\(to_integer(to_signed(0, 32))) := \Fix64::ToIntegers().3.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [1] = num2;
                        -- 
                        \Fix64::ToIntegers().3.array\(to_integer(to_signed(1, 32))) := \Fix64::ToIntegers().3.num2\;
                        -- The following section was transformed from the .NET statement below:
                        -- return array;
                        -- 
                        \Fix64::ToIntegers().3.return\ <= \Fix64::ToIntegers().3.array\;
                        \Fix64::ToIntegers().3._State\ := \Fix64::ToIntegers().3._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6696
                end case;
            end if;
        end if;
    end process;
    -- System.Int32[] Hast.Algorithms.Fix64::ToIntegers().3 state machine end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).0 state machine start
    \Fix64 Fix64::op_Addition(Fix64,Fix64).0._StateMachine\: process (\Clock\) 
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\: \Fix64 Fix64::op_Addition(Fix64,Fix64).0._States\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_0\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.x\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.y\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.unaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.5\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.6\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).0.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\: \Hast.Algorithms.Fix64\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Finished\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Started.0\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_0\;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.num\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.1\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.unaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.3\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.4\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.5\ := false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.6\ := false;
            else 
                case \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ is 
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Finished\ <= true;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Finished\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_2\ => 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.x\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.x.parameter.In\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.y\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.y.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue = x.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.x\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue2 = y.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.y\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = rawValue + rawValue2;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.0\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\ + \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.num\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((~(rawValue ^ rawValue2) & (rawValue ^ num) & -9223372036854775808L) != 0L) {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.1\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.unaryOperationResult.0\ := not((\Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.1\));
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9249
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).0.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.3\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.unaryOperationResult.0\ and (\Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.2\);
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.4\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.3\ and "1000000000000000000000000000000000000000000000000000000000000000";
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.6687
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.5\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.4\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_5\.

                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.5\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4362
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_5\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237 = new Fix64 (num);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\IsNull\ := false;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).this.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Started.0\ <= true;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawValue > 0L)) {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- } else {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.6\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.rawValue\ > to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_8\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_8\.
                        --     * The false branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_9\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_9\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\.

                        if ((\Fix64 Fix64::op_Addition(Fix64,Fix64).0.binaryOperationResult.6\)) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_8\;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.70275
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.num\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).0.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\);
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_4\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_8\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 
                        -- Since the integer literal 9223372036854775807 was out of the VHDL integer range it was substituted with a binary literal (111111111111111111111111111111111111111111111111111111111111111).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "0111111111111111111111111111111111111111111111111111111111111111";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_8\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_9\ => 
                        -- False branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).0.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "1000000000000000000000000000000000000000000000000000000000000000";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_9\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Started.0\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Finished.0\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Started.0\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                            -- 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0.return\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).0 state machine end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).1 state machine start
    \Fix64 Fix64::op_Addition(Fix64,Fix64).1._StateMachine\: process (\Clock\) 
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\: \Fix64 Fix64::op_Addition(Fix64,Fix64).1._States\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_0\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.x\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.y\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.unaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.5\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.6\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).1.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\: \Hast.Algorithms.Fix64\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Finished\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Started.0\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_0\;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.num\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.1\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.unaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.3\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.4\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.5\ := false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.6\ := false;
            else 
                case \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ is 
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Finished\ <= true;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Finished\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_2\ => 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.x\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.x.parameter.In\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.y\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.y.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue = x.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.x\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue2 = y.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.y\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = rawValue + rawValue2;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.0\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\ + \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.num\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((~(rawValue ^ rawValue2) & (rawValue ^ num) & -9223372036854775808L) != 0L) {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.1\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.unaryOperationResult.0\ := not((\Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.1\));
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9249
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).1.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.3\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.unaryOperationResult.0\ and (\Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.2\);
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.4\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.3\ and "1000000000000000000000000000000000000000000000000000000000000000";
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.6687
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.5\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.4\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_5\.

                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.5\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4362
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_5\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237 = new Fix64 (num);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\IsNull\ := false;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).this.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Started.0\ <= true;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawValue > 0L)) {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- } else {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.6\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.rawValue\ > to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_8\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_8\.
                        --     * The false branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_9\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_9\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\.

                        if ((\Fix64 Fix64::op_Addition(Fix64,Fix64).1.binaryOperationResult.6\)) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_8\;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.70275
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.num\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).1.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\);
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_4\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_8\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 
                        -- Since the integer literal 9223372036854775807 was out of the VHDL integer range it was substituted with a binary literal (111111111111111111111111111111111111111111111111111111111111111).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "0111111111111111111111111111111111111111111111111111111111111111";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_8\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_9\ => 
                        -- False branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).1.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "1000000000000000000000000000000000000000000000000000000000000000";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_9\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Started.0\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Finished.0\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Started.0\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                            -- 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1.return\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).1._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).1 state machine end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).2 state machine start
    \Fix64 Fix64::op_Addition(Fix64,Fix64).2._StateMachine\: process (\Clock\) 
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\: \Fix64 Fix64::op_Addition(Fix64,Fix64).2._States\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_0\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.x\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.y\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.unaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.5\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.6\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).2.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\: \Hast.Algorithms.Fix64\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Finished\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Started.0\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_0\;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.num\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.1\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.unaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.3\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.4\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.5\ := false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.6\ := false;
            else 
                case \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ is 
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Finished\ <= true;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Finished\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_2\ => 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.x\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.x.parameter.In\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.y\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.y.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue = x.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.x\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue2 = y.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.y\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = rawValue + rawValue2;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.0\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\ + \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.num\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((~(rawValue ^ rawValue2) & (rawValue ^ num) & -9223372036854775808L) != 0L) {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.1\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.unaryOperationResult.0\ := not((\Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.1\));
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9249
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).2.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.3\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.unaryOperationResult.0\ and (\Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.2\);
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.4\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.3\ and "1000000000000000000000000000000000000000000000000000000000000000";
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.6687
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.5\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.4\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_5\.

                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.5\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4362
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_5\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237 = new Fix64 (num);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\IsNull\ := false;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).this.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Started.0\ <= true;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawValue > 0L)) {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- } else {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.6\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.rawValue\ > to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_8\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_8\.
                        --     * The false branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_9\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_9\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\.

                        if ((\Fix64 Fix64::op_Addition(Fix64,Fix64).2.binaryOperationResult.6\)) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_8\;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.70275
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.num\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).2.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\);
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_4\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_8\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 
                        -- Since the integer literal 9223372036854775807 was out of the VHDL integer range it was substituted with a binary literal (111111111111111111111111111111111111111111111111111111111111111).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "0111111111111111111111111111111111111111111111111111111111111111";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_8\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_9\ => 
                        -- False branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).2.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "1000000000000000000000000000000000000000000000000000000000000000";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_9\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Started.0\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Finished.0\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Started.0\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                            -- 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2.return\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).2._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).2 state machine end


    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).3 state machine start
    \Fix64 Fix64::op_Addition(Fix64,Fix64).3._StateMachine\: process (\Clock\) 
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\: \Fix64 Fix64::op_Addition(Fix64,Fix64).3._States\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_0\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.x\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.y\: \Hast.Algorithms.Fix64\;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.unaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.5\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.6\: boolean := false;
        Variable \Fix64 Fix64::op_Addition(Fix64,Fix64).3.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\: \Hast.Algorithms.Fix64\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Finished\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Started.0\ <= false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_0\;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.num\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.1\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.unaryOperationResult.0\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.2\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.3\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.4\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.5\ := false;
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := to_signed(0, 64);
                \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.6\ := false;
            else 
                case \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ is 
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3._Started\ = true) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Finished\ <= true;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Finished\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_2\ => 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.x\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.x.parameter.In\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.y\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.y.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue = x.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.x\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long rawValue2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- rawValue2 = y.RawValue;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.y\.\RawValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = rawValue + rawValue2;
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.0\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\ + \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.num\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((~(rawValue ^ rawValue2) & (rawValue ^ num) & -9223372036854775808L) != 0L) {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.1\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue2\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.unaryOperationResult.0\ := not((\Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.1\));
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9249
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.2\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\ xor \Fix64 Fix64::op_Addition(Fix64,Fix64).3.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.3\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.unaryOperationResult.0\ and (\Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.2\);
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.4\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.3\ and "1000000000000000000000000000000000000000000000000000000000000000";
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.6687
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.5\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.4\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_5\.

                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.5\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4362
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_5\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- Fix64 object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237 = new Fix64 (num);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\IsNull\ := false;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\.\RawValue\ := to_signed(0, 64);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).this.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).rawValue.parameter.Out.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.num\;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Started.0\ <= true;
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 	if ((rawValue > 0L)) {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 	} else {
                        -- 		conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 	}
                        -- 	num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((rawValue > 0L)) {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- } else {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.6\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.rawValue\ > to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_8\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_8\.
                        --     * The false branch starts in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_9\ and ends in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_9\.
                        --     * Execution after either branch will continue in the following state: \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\.

                        if ((\Fix64 Fix64::op_Addition(Fix64,Fix64).3.binaryOperationResult.6\)) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_8\;
                        else 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.70275
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\ => 
                        -- State after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00);
                        -- 
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.num\ := (\Fix64 Fix64::op_Addition(Fix64,Fix64).3.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\);
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_4\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_8\ => 
                        -- True branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = 9223372036854775807L;
                        -- 
                        -- Since the integer literal 9223372036854775807 was out of the VHDL integer range it was substituted with a binary literal (111111111111111111111111111111111111111111111111111111111111111).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "0111111111111111111111111111111111111111111111111111111111111111";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_8\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_9\ => 
                        -- False branch of the if-else started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00 = -9223372036854775808L;
                        -- 
                        -- Since the integer literal -9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Fix64 Fix64::op_Addition(Fix64,Fix64).3.conditionalc123fffca9de4da363db1c5bdb782c0b2cee601983878fbd63d7dd211874ee00\ := "1000000000000000000000000000000000000000000000000000000000000000";
                        -- Going to the state after the if-else which was started in state \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_6\.
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_9\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.Algorithms.Fix64::.ctor(System.Int64)
                        if (\Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Started.0\ = \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Finished.0\) then 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Started.0\ <= false;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237;
                            -- 
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3.return\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.object149a4e7d71989f2999aa2a2f6ba6d869325d197c025bf08e3fd5db9eca8c6237\;
                            \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State\ := \Fix64 Fix64::op_Addition(Fix64,Fix64).3._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).3 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Algorithms.Fix64::.ctor(System.Int32) start
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 (#0):
    \Fix64::.ctor(Int32).0._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Started.0\;
    \Fix64::.ctor(Int32).0.this.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).this.parameter.Out.0\;
    \Fix64::.ctor(Int32).0.value.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).value.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32)._Finished.0\ <= \Fix64::.ctor(Int32).0._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::.ctor(Int32).this.parameter.In.0\ <= \Fix64::.ctor(Int32).0.this.parameter.Out\;
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 (#1):
    \Fix64::.ctor(Int32).1._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Started.0\;
    \Fix64::.ctor(Int32).1.this.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).this.parameter.Out.0\;
    \Fix64::.ctor(Int32).1.value.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).value.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32)._Finished.0\ <= \Fix64::.ctor(Int32).1._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::.ctor(Int32).this.parameter.In.0\ <= \Fix64::.ctor(Int32).1.this.parameter.Out\;
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 (#2):
    \Fix64::.ctor(Int32).2._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Started.0\;
    \Fix64::.ctor(Int32).2.this.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).this.parameter.Out.0\;
    \Fix64::.ctor(Int32).2.value.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).value.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32)._Finished.0\ <= \Fix64::.ctor(Int32).2._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::.ctor(Int32).this.parameter.In.0\ <= \Fix64::.ctor(Int32).2.this.parameter.Out\;
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#3):
    \Fix64::.ctor(Int32).3._Started\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Started.0\;
    \Fix64::.ctor(Int32).3.this.parameter.In\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).this.parameter.Out.0\;
    \Fix64::.ctor(Int32).3.value.parameter.In\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).value.parameter.Out.0\;
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32)._Finished.0\ <= \Fix64::.ctor(Int32).3._Finished\;
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::.ctor(Int32).this.parameter.In.0\ <= \Fix64::.ctor(Int32).3.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Algorithms.Fix64::.ctor(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64) start
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 (#0):
    \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).0.x.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).0.y.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.return\;
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 (#1):
    \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).1.x.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).1.y.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.return\;
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 (#2):
    \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).2.x.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).2.y.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.return\;
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#3):
    \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Started\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Started.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).3.x.parameter.In\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).x.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).3.y.parameter.In\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).y.parameter.Out.0\;
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64)._Finished.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3._Finished\;
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64 Fix64::op_Addition(Fix64,Fix64).return.0\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.return\;
    -- System.Void Hast::InternalInvocationProxy().Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64) end


    -- System.Void Hast::InternalInvocationProxy().System.Int32[] Hast.Algorithms.Fix64::ToIntegers() start
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).0 (#0):
    \Fix64::ToIntegers().0._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Started.0\;
    \Fix64::ToIntegers().0.this.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers().this.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers()._Finished.0\ <= \Fix64::ToIntegers().0._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.Fix64::ToIntegers().return.0\ <= \Fix64::ToIntegers().0.return\;
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).1 (#1):
    \Fix64::ToIntegers().1._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Started.0\;
    \Fix64::ToIntegers().1.this.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers().this.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers()._Finished.0\ <= \Fix64::ToIntegers().1._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.Fix64::ToIntegers().return.0\ <= \Fix64::ToIntegers().1.return\;
    -- Signal connections for Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object).2 (#2):
    \Fix64::ToIntegers().2._Started\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Started.0\;
    \Fix64::ToIntegers().2.this.parameter.In\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers().this.parameter.Out.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers()._Finished.0\ <= \Fix64::ToIntegers().2._Finished\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.Fix64::ToIntegers().return.0\ <= \Fix64::ToIntegers().2.return\;
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#3):
    \Fix64::ToIntegers().3._Started\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Started.0\;
    \Fix64::ToIntegers().3.this.parameter.In\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers().this.parameter.Out.0\;
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers()._Finished.0\ <= \Fix64::ToIntegers().3._Finished\;
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.Fix64::ToIntegers().return.0\ <= \Fix64::ToIntegers().3.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32[] Hast.Algorithms.Fix64::ToIntegers() end


    -- System.Void Hast::InternalInvocationProxy().Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#0):
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Started\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.0\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.upToNumberObject.parameter.In\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.0\;
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0._Finished\;
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.0\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).0.return\;
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#1):
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Started\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.1\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.upToNumberObject.parameter.In\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.1\;
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.1\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1._Finished\;
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.1\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).1.return\;
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 (#2):
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Started\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Started.2\;
    \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.upToNumberObject.parameter.In\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).upToNumberObject.parameter.Out.2\;
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object)._Finished.2\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2._Finished\;
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).return.2\ <= \Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(Object).2.return\;
    -- System.Void Hast::InternalInvocationProxy().Hast.Samples.SampleAssembly.Fix64Calculator+TaskResult Hast.Samples.SampleAssembly.Fix64Calculator+<>c::<ParallelizedCalculateIntegerSumUpToNumbers>b__7_0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Algorithms.Fix64::.ctor(System.Int64) start
    -- Signal connections for Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).0 (#0):
    \Fix64::.ctor(Int64).0._Started\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Started.0\;
    \Fix64::.ctor(Int64).0.this.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).this.parameter.Out.0\;
    \Fix64::.ctor(Int64).0.rawValue.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).rawValue.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64)._Finished.0\ <= \Fix64::.ctor(Int64).0._Finished\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).0.Fix64::.ctor(Int64).this.parameter.In.0\ <= \Fix64::.ctor(Int64).0.this.parameter.Out\;
    -- Signal connections for Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).1 (#1):
    \Fix64::.ctor(Int64).1._Started\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Started.0\;
    \Fix64::.ctor(Int64).1.this.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).this.parameter.Out.0\;
    \Fix64::.ctor(Int64).1.rawValue.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).rawValue.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64)._Finished.0\ <= \Fix64::.ctor(Int64).1._Finished\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).1.Fix64::.ctor(Int64).this.parameter.In.0\ <= \Fix64::.ctor(Int64).1.this.parameter.Out\;
    -- Signal connections for Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).2 (#2):
    \Fix64::.ctor(Int64).2._Started\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Started.0\;
    \Fix64::.ctor(Int64).2.this.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).this.parameter.Out.0\;
    \Fix64::.ctor(Int64).2.rawValue.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).rawValue.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64)._Finished.0\ <= \Fix64::.ctor(Int64).2._Finished\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).2.Fix64::.ctor(Int64).this.parameter.In.0\ <= \Fix64::.ctor(Int64).2.this.parameter.Out\;
    -- Signal connections for Hast.Algorithms.Fix64 Hast.Algorithms.Fix64::op_Addition(Hast.Algorithms.Fix64,Hast.Algorithms.Fix64).3 (#3):
    \Fix64::.ctor(Int64).3._Started\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Started.0\;
    \Fix64::.ctor(Int64).3.this.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).this.parameter.Out.0\;
    \Fix64::.ctor(Int64).3.rawValue.parameter.In\ <= \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).rawValue.parameter.Out.0\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64)._Finished.0\ <= \Fix64::.ctor(Int64).3._Finished\;
    \Fix64 Fix64::op_Addition(Fix64,Fix64).3.Fix64::.ctor(Int64).this.parameter.In.0\ <= \Fix64::.ctor(Int64).3.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Algorithms.Fix64::.ctor(System.Int64) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory)._Finished.0\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Fix64Calculator::CalculateIntegerSumUpToNumber(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory)._Finished.0\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.CellIndex\) when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.CellIndex\) when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.DataOut\ when \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\ else \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.DataOut\ when \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \Fix64Calculator::ParallelizedCalculateIntegerSumUpToNumbers(SimpleMemory).0.SimpleMemory.WriteEnable\ or \Fix64Calculator::CalculateIntegerSumUpToNumber(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
