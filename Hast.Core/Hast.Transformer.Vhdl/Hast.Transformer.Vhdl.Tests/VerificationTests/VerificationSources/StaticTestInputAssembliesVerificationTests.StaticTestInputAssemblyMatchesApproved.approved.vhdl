-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor()
-- * System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod()
-- * System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32)
-- * System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32)
-- * System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject()
-- * System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32)
-- * System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32)
-- * System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage()
-- * System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32)
-- * System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32)
-- * System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32)
-- * System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32)
-- * System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32)
-- * System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;

entity Hast_IP is 
    port(
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- Custom inter-dependent type declarations start
    type \signed32_Array\ is array (integer range <>) of signed(31 downto 0);
    type \unsigned32_Array\ is array (integer range <>) of unsigned(31 downto 0);
    type \unsigned8_Array\ is array (integer range <>) of unsigned(7 downto 0);
    type \boolean_Array\ is array (integer range <>) of boolean;
    type \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\ is record 
        \IsNull\: boolean;
        \Array\: \signed32_Array\(0 to 4);
    end record;
    type \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\ is record 
        \IsNull\: boolean;
        \ArrayLength\: unsigned(31 downto 0);
        \ArrayLengthCopy\: unsigned(31 downto 0);
        \NonSubstitutableArrayLengthCopy\: unsigned(31 downto 0);
        \Array\: \unsigned32_Array\(0 to 4);
    end record;
    type \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\ is record 
        \IsNull\: boolean;
        \ArrayLength\: unsigned(31 downto 0);
    end record;
    type \Hast.TestInputs.Static.ObjectUsingCases+MyClass\ is record 
        \IsNull\: boolean;
        \MyProperty\: signed(31 downto 0);
    end record;
    type \Hast.TestInputs.Static.OptionaParametersCases+MyClass\ is record 
        \IsNull\: boolean;
        \_state\: signed(31 downto 0);
    end record;
    type \Hast.TestInputs.Static.ParallelCases+Calculator\ is record 
        \IsNull\: boolean;
        \Number\: unsigned(31 downto 0);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 declarations start
    -- State machine states:
    type \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._States\ is (
        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\, 
        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_1\, 
        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_2\);
    -- Signals:
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\: boolean := false;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.Out\: \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\: boolean := false;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.In\: \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.In\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    -- System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 declarations end


    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor().0 declarations start
    -- State machine states:
    type \ArrayUsingCases::PassArrayToConstructor().0._States\ is (
        \ArrayUsingCases::PassArrayToConstructor().0._State_0\, 
        \ArrayUsingCases::PassArrayToConstructor().0._State_1\, 
        \ArrayUsingCases::PassArrayToConstructor().0._State_2\, 
        \ArrayUsingCases::PassArrayToConstructor().0._State_3\);
    -- Signals:
    Signal \ArrayUsingCases::PassArrayToConstructor().0._Finished\: boolean := false;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.Out.0\: \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\: boolean := false;
    Signal \ArrayUsingCases::PassArrayToConstructor().0._Started\: boolean := false;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.In.0\: \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.In.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor().0 declarations end


    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod().0 declarations start
    -- State machine states:
    type \ArrayUsingCases::PassArrayFromMethod().0._States\ is (
        \ArrayUsingCases::PassArrayFromMethod().0._State_0\, 
        \ArrayUsingCases::PassArrayFromMethod().0._State_1\, 
        \ArrayUsingCases::PassArrayFromMethod().0._State_2\, 
        \ArrayUsingCases::PassArrayFromMethod().0._State_3\);
    -- Signals:
    Signal \ArrayUsingCases::PassArrayFromMethod().0._Finished\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0._Started\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Finished.0\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).return.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod().0 declarations end


    -- System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 declarations start
    -- State machine states:
    type \ArrayUsingCases::ArrayProducingMethod(Int32).0._States\ is (
        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\, 
        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_1\, 
        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_2\);
    -- Signals:
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\: boolean := false;
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\: boolean := false;
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._States\ is (
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_2\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._States\ is (
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_2\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.Out\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.In\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._States\ is (
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_2\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_3\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.Out\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.Out\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.In\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.In\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._States\ is (
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.Out\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.In\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantValuedVariables(Int32).0._States\ is (
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_1\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._States\ is (
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\, 
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_1\, 
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_2\, 
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_3\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).return.0\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantPassingToObject().0._States\ is (
        \ConstantsUsingCases::ConstantPassingToObject().0._State_0\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_1\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_2\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_3\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_4\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_5\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_6\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_7\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_8\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_9\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_10\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_11\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_12\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_13\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_14\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_15\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_16\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_17\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_18\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantPassingToObject().0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.Out.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.Out.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.In.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.In.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 declarations end


    -- System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._States\ is (
        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\, 
        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_1\, 
        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_2\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32).0 declarations start
    -- State machine states:
    type \LoopCases::BreakInLoop(Int32).0._States\ is (
        \LoopCases::BreakInLoop(Int32).0._State_0\, 
        \LoopCases::BreakInLoop(Int32).0._State_1\, 
        \LoopCases::BreakInLoop(Int32).0._State_2\, 
        \LoopCases::BreakInLoop(Int32).0._State_3\, 
        \LoopCases::BreakInLoop(Int32).0._State_4\, 
        \LoopCases::BreakInLoop(Int32).0._State_5\, 
        \LoopCases::BreakInLoop(Int32).0._State_6\);
    -- Signals:
    Signal \LoopCases::BreakInLoop(Int32).0._Finished\: boolean := false;
    Signal \LoopCases::BreakInLoop(Int32).0._Started\: boolean := false;
    Signal \LoopCases::BreakInLoop(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32).0 declarations start
    -- State machine states:
    type \LoopCases::BreakInLoopInLoop(Int32).0._States\ is (
        \LoopCases::BreakInLoopInLoop(Int32).0._State_0\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_1\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_2\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_3\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_4\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_5\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_6\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_7\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_8\);
    -- Signals:
    Signal \LoopCases::BreakInLoopInLoop(Int32).0._Finished\: boolean := false;
    Signal \LoopCases::BreakInLoopInLoop(Int32).0._Started\: boolean := false;
    Signal \LoopCases::BreakInLoopInLoop(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage().0 declarations start
    -- State machine states:
    type \ObjectUsingCases::NullUsage().0._States\ is (
        \ObjectUsingCases::NullUsage().0._State_0\, 
        \ObjectUsingCases::NullUsage().0._State_1\, 
        \ObjectUsingCases::NullUsage().0._State_2\, 
        \ObjectUsingCases::NullUsage().0._State_3\, 
        \ObjectUsingCases::NullUsage().0._State_4\, 
        \ObjectUsingCases::NullUsage().0._State_5\, 
        \ObjectUsingCases::NullUsage().0._State_6\);
    -- Signals:
    Signal \ObjectUsingCases::NullUsage().0._Finished\: boolean := false;
    Signal \ObjectUsingCases::NullUsage().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage().0 declarations end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32).0 declarations start
    -- State machine states:
    type \ObjectUsingCases::VoidReturn(Int32).0._States\ is (
        \ObjectUsingCases::VoidReturn(Int32).0._State_0\, 
        \ObjectUsingCases::VoidReturn(Int32).0._State_1\, 
        \ObjectUsingCases::VoidReturn(Int32).0._State_2\, 
        \ObjectUsingCases::VoidReturn(Int32).0._State_3\);
    -- Signals:
    Signal \ObjectUsingCases::VoidReturn(Int32).0._Finished\: boolean := false;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.Out.0\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\: boolean := false;
    Signal \ObjectUsingCases::VoidReturn(Int32).0._Started\: boolean := false;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.In.0\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32).0 declarations start
    -- State machine states:
    type \ObjectUsingCases::ReferenceAssignment(Int32).0._States\ is (
        \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\, 
        \ObjectUsingCases::ReferenceAssignment(Int32).0._State_1\, 
        \ObjectUsingCases::ReferenceAssignment(Int32).0._State_2\);
    -- Signals:
    Signal \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\: boolean := false;
    Signal \ObjectUsingCases::ReferenceAssignment(Int32).0._Started\: boolean := false;
    Signal \ObjectUsingCases::ReferenceAssignment(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass).0 declarations start
    -- State machine states:
    type \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._States\ is (
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\);
    -- Signals:
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\: boolean := false;
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.Out\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\: boolean := false;
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.In\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass).0 declarations end


    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32).0 declarations start
    -- State machine states:
    type \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._States\ is (
        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_0\, 
        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_1\, 
        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_2\);
    -- Signals:
    Signal \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Finished\: boolean := false;
    Signal \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this.parameter.Out\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Started\: boolean := false;
    Signal \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this.parameter.In\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.add.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32).0 declarations start
    -- State machine states:
    type \OptionaParametersCases+MyClass::Method(Int32,Int32).0._States\ is (
        \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_0\, 
        \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_1\, 
        \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_2\);
    -- Signals:
    Signal \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Finished\: boolean := false;
    Signal \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this.parameter.Out\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Started\: boolean := false;
    Signal \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this.parameter.In\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases+MyClass::Method(Int32,Int32).0.add.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32).0 declarations start
    -- State machine states:
    type \OptionaParametersCases::OmittedOptionalParameters(Int32).0._States\ is (
        \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_0\, 
        \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_1\, 
        \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_2\, 
        \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_3\, 
        \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_4\);
    -- Signals:
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Finished\: boolean := false;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).this.parameter.Out.0\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).input.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).add.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Started.0\: boolean := false;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).this.parameter.Out.0\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).input.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).add.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Started.0\: boolean := false;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Started\: boolean := false;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).this.parameter.In.0\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Finished.0\: boolean := false;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).this.parameter.In.0\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    Signal \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32).0 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().0 declarations start
    -- State machine states:
    type \ParallelCases+Calculator::IsEven().0._States\ is (
        \ParallelCases+Calculator::IsEven().0._State_0\, 
        \ParallelCases+Calculator::IsEven().0._State_1\, 
        \ParallelCases+Calculator::IsEven().0._State_2\);
    -- Signals:
    Signal \ParallelCases+Calculator::IsEven().0._Finished\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().0.return\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().0.this.parameter.Out\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+Calculator::IsEven().0._Started\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().0.this.parameter.In\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().0 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().1 declarations start
    -- State machine states:
    type \ParallelCases+Calculator::IsEven().1._States\ is (
        \ParallelCases+Calculator::IsEven().1._State_0\, 
        \ParallelCases+Calculator::IsEven().1._State_1\, 
        \ParallelCases+Calculator::IsEven().1._State_2\);
    -- Signals:
    Signal \ParallelCases+Calculator::IsEven().1._Finished\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().1.return\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().1.this.parameter.Out\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+Calculator::IsEven().1._Started\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().1.this.parameter.In\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().1 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().2 declarations start
    -- State machine states:
    type \ParallelCases+Calculator::IsEven().2._States\ is (
        \ParallelCases+Calculator::IsEven().2._State_0\, 
        \ParallelCases+Calculator::IsEven().2._State_1\, 
        \ParallelCases+Calculator::IsEven().2._State_2\);
    -- Signals:
    Signal \ParallelCases+Calculator::IsEven().2._Finished\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().2.return\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().2.this.parameter.Out\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+Calculator::IsEven().2._Started\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().2.this.parameter.In\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().2 declarations end


    -- System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input declarations start
    -- Shared (global) variables:
    shared Variable \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._States\ is (
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_1\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_2\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._States\ is (
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_1\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_2\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._States\ is (
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_1\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_2\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 declarations end


    -- System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input declarations start
    -- Shared (global) variables:
    shared Variable \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._States\ is (
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_1\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_2\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.Out.0\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.In.0\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Finished.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().return.0\: boolean := false;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._States\ is (
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_1\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_2\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.Out.0\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.In.0\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Finished.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().return.0\: boolean := false;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 declarations end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._States\ is (
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_1\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_2\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.Out.0\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.In.0\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Finished.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().return.0\: boolean := false;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 declarations end


    -- System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 declarations start
    -- State machine states:
    type \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._States\ is (
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_1\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_3\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_4\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_5\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_6\);
    -- Signals:
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 declarations start
    -- State machine states:
    type \ParallelCases::ObjectUsingTasks(UInt32).0._States\ is (
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_1\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_3\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_4\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_5\);
    -- Signals:
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0._Started\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.input.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.0\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.1\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.2\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.0\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.1\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.2\: boolean := false;
    -- System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32).0 declarations start
    -- State machine states:
    type \UnaryCases::IncrementDecrement(Int32).0._States\ is (
        \UnaryCases::IncrementDecrement(Int32).0._State_0\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_1\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_2\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_3\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_4\);
    -- Signals:
    Signal \UnaryCases::IncrementDecrement(Int32).0._Finished\: boolean := false;
    Signal \UnaryCases::IncrementDecrement(Int32).0._Started\: boolean := false;
    Signal \UnaryCases::IncrementDecrement(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32).0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 state machine start
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\: \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._States\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\;
        Variable \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\: \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\;
        Variable \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\ <= false;
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\ <= (others => to_signed(0, 32));
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\;
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\ := (others => to_signed(0, 32));
            else 
                case \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ is 
                    when \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\ = true) then 
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\ = true) then 
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\ <= true;
                        else 
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\ <= false;
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.Out\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\;
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_2\ => 
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.In\;
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Array = array;
                        -- 
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\.\Array\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\;
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 state machine end


    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor().0 state machine start
    \ArrayUsingCases::PassArrayToConstructor().0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases::PassArrayToConstructor().0._State\: \ArrayUsingCases::PassArrayToConstructor().0._States\ := \ArrayUsingCases::PassArrayToConstructor().0._State_0\;
        Variable \ArrayUsingCases::PassArrayToConstructor().0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
        Variable \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\: \Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder\;
        Variable \ArrayUsingCases::PassArrayToConstructor().0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases::PassArrayToConstructor().0._Finished\ <= false;
                \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\ <= (others => to_signed(0, 32));
                \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ <= false;
                \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_0\;
                \ArrayUsingCases::PassArrayToConstructor().0.array\ := (others => to_signed(0, 32));
                \ArrayUsingCases::PassArrayToConstructor().0.num\ := to_signed(0, 32);
            else 
                case \ArrayUsingCases::PassArrayToConstructor().0._State\ is 
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases::PassArrayToConstructor().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases::PassArrayToConstructor().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayToConstructor().0._Finished\ <= true;
                        else 
                            \ArrayUsingCases::PassArrayToConstructor().0._Finished\ <= false;
                            \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[5];
                        -- 
                        \ArrayUsingCases::PassArrayToConstructor().0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- ArrayHolder arrayHolder;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- arrayHolder = new ArrayHolder (array);
                        -- 
                        -- Initializing record fields to their defaults.
                        \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\.\IsNull\ := false;
                        \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\.\Array\ := (others => to_signed(0, 32));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[])
                        \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.Out.0\ <= \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\;
                        \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\ <= \ArrayUsingCases::PassArrayToConstructor().0.array\;
                        \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ <= true;
                        \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[])
                        if (\ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ = \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Finished.0\) then 
                            \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ <= false;
                            \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\ := \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.In.0\;
                            \ArrayUsingCases::PassArrayToConstructor().0.array\ := \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = 5;
                            -- 
                            \ArrayUsingCases::PassArrayToConstructor().0.num\ := to_signed(5, 32);
                            \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor().0 state machine end


    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod().0 state machine start
    \ArrayUsingCases::PassArrayFromMethod().0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases::PassArrayFromMethod().0._State\: \ArrayUsingCases::PassArrayFromMethod().0._States\ := \ArrayUsingCases::PassArrayFromMethod().0._State_0\;
        Variable \ArrayUsingCases::PassArrayFromMethod().0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
        Variable \ArrayUsingCases::PassArrayFromMethod().0.return.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases::PassArrayFromMethod().0._Finished\ <= false;
                \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\ <= to_signed(0, 32);
                \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ <= false;
                \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_0\;
                \ArrayUsingCases::PassArrayFromMethod().0.array\ := (others => to_signed(0, 32));
                \ArrayUsingCases::PassArrayFromMethod().0.return.0\ := (others => to_signed(0, 32));
            else 
                case \ArrayUsingCases::PassArrayFromMethod().0._State\ is 
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases::PassArrayFromMethod().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases::PassArrayFromMethod().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayFromMethod().0._Finished\ <= true;
                        else 
                            \ArrayUsingCases::PassArrayFromMethod().0._Finished\ <= false;
                            \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = this.ArrayProducingMethod (5);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32)
                        \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\ <= to_signed(5, 32);
                        \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ <= true;
                        \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32)
                        if (\ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ = \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Finished.0\) then 
                            \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ <= false;
                            \ArrayUsingCases::PassArrayFromMethod().0.return.0\ := \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).return.0\;
                            \ArrayUsingCases::PassArrayFromMethod().0.array\ := \ArrayUsingCases::PassArrayFromMethod().0.return.0\;
                            \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod().0 state machine end


    -- System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 state machine start
    \ArrayUsingCases::ArrayProducingMethod(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\: \ArrayUsingCases::ArrayProducingMethod(Int32).0._States\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\;
        Variable \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\ <= false;
                \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\ <= (others => to_signed(0, 32));
                \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\;
                \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength\ := to_signed(0, 32);
                \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\ := (others => to_signed(0, 32));
            else 
                case \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ is 
                    when \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\ = true) then 
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\ = true) then 
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\ <= true;
                        else 
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\ <= false;
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_2\ => 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[5];
                        -- 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- array [3] = 10;
                        -- 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\(to_integer(to_signed(3, 32))) := to_signed(10, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- return array;
                        -- 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\ <= \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\;
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 state machine start
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\: \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._States\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\ <= (others => to_unsigned(0, 32));
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\ := (others => to_unsigned(0, 32));
            else 
                case \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLength = 5u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\ArrayLength\ := to_unsigned(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\ArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.NonSubstitutableArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Array = new uint[5u];
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\Array\ := (others => to_unsigned(0, 32));
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 state machine start
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\: \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._States\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.conditionalb63ca94e1d5893dc23a654922c939ddc1ae51fc0dfe3037e08a28aa0018364d3\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.conditionalb63ca94e1d5893dc23a654922c939ddc1ae51fc0dfe3037e08a28aa0018364d3\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditionalb63ca94e1d5893dc23a654922c939ddc1ae51fc0dfe3037e08a28aa0018364d3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalb63ca94e1d5893dc23a654922c939ddc1ae51fc0dfe3037e08a28aa0018364d3 = 5;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.conditionalb63ca94e1d5893dc23a654922c939ddc1ae51fc0dfe3037e08a28aa0018364d3\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLength = 5u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\ArrayLength\ := to_unsigned(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\ArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.NonSubstitutableArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Array = new uint[5u];
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\Array\ := (others => to_unsigned(0, 32));
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1).0 state machine start
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\: \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._States\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= (others => to_unsigned(0, 32));
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\;
            else 
                case \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1.ArrayHolder1 (@this, previous.Array);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\.\Array\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= true;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\.\Array\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 state machine start
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\: \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._States\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\: boolean := false;
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\;
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2\ := to_signed(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\ := to_signed(0, 64);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\ := false;
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\ := to_unsigned(0, 32);
            else 
                case \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((long)(size - size / 32u * 32u) != 0L)) {
                        -- 	conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2 = 5;
                        -- } else {
                        -- 	conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2 = 0;
                        -- }
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ / to_unsigned(32, 32);
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\ := SmartResize(\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\ * to_unsigned(32, 32), 32);
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\ := signed(SmartResize(\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ - \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\, 64));
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\ := (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\ and ends in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\.
                        --     * The false branch starts in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\ and ends in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\.

                        if ((\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\)) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\;
                        else 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\ => 
                        -- State after the if-else which was started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLength = (size >> 5) + (uint)(conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2);
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\ := shift_right(\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\, to_integer(unsigned(SmartResize(to_signed(5, 32), 5) and "11111")));
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\ := (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\) + unsigned((\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2\));
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\.\ArrayLength\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\;
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6395
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\ => 
                        -- True branch of the if-else started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2 = 5;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2 = 5;
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2\ := to_signed(5, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ = \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\ => 
                        -- False branch of the if-else started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2 = 0;
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditionalbc2f54fcd430c48518a98792bed4a78cab2deaa37c4e5c2036e7f9f8890630b2\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ = \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 state machine start
    \ConstantsUsingCases::ConstantValuedVariables(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\: \ConstantsUsingCases::ConstantValuedVariables(Int32).0._States\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\;
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.array\: \signed32_Array\(0 to 36) := (others => to_signed(0, 32));
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\: boolean := false;
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\ <= false;
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\;
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num3\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.array\ := (others => to_signed(0, 32));
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\ := false;
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ is 
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\ => 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 4;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num\ := to_signed(4, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 36;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\ := to_signed(36, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 37;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\ := to_signed(37, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 148;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num3\ := to_signed(148, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = 8;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\ := to_signed(8, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = 148 + input;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\ := to_signed(148, 32) + \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\;
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[37];
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = 5;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- if (input < 5) {
                        -- 	num5 = 13;
                        -- } else {
                        -- 	num5 = 10;
                        -- }
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\ < to_signed(5, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\ and ends in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\.
                        --     * The false branch starts in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\ and ends in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\.

                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\;
                        else 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\ => 
                        -- State after the if-else which was started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = 153;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\ := to_signed(153, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = 163;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\ := to_signed(163, 32);
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\ => 
                        -- True branch of the if-else started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num5 = 13;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = 13;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(13, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ = \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\ => 
                        -- False branch of the if-else started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num5 = 10;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = 10;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(10, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ = \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 state machine start
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\: \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._States\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\;
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\ <= false;
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\ <= to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\ <= to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\;
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num2\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num3\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ is 
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_2\ => 
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 15;
                        -- 
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num\ := to_signed(15, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 145;
                        -- 
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num2\ := to_signed(145, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = this.ConstantUsingMethod (145, input) + 298;
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32)
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\ <= to_signed(145, 32);
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\;
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32)
                        if (\ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).return.0\;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\ + to_signed(298, 32);
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num3\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 state machine start
    \ConstantsUsingCases::ConstantPassingToObject().0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantPassingToObject().0._State\: \ConstantsUsingCases::ConstantPassingToObject().0._States\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_0\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.array\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayLength\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayLengthCopy\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.nonSubstitutableArrayLengthCopy\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.previous\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\: \Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantPassingToObject().0._Finished\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= (others => to_unsigned(0, 32));
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_0\;
                \ConstantsUsingCases::ConstantPassingToObject().0.num\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.array\ := (others => to_unsigned(0, 32));
                \ConstantsUsingCases::ConstantPassingToObject().0.arrayLength\ := to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.arrayLengthCopy\ := to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.nonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
            else 
                case \ConstantsUsingCases::ConstantPassingToObject().0._State\ is 
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantPassingToObject().0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantPassingToObject().0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantPassingToObject().0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 5;
                        -- 
                        \ConstantsUsingCases::ConstantPassingToObject().0.num\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- uint[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new uint[5];
                        -- 
                        \ConstantsUsingCases::ConstantPassingToObject().0.array\ := (others => to_unsigned(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- ArrayHolder1 arrayHolder;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- arrayHolder = new ArrayHolder1 (array);
                        -- 
                        -- Initializing record fields to their defaults.
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\IsNull\ := false;
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\ArrayLength\ := to_unsigned(0, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\Array\ := (others => to_unsigned(0, 32));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.array\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.array\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint arrayLength;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayLength = 5u;
                            -- 
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayLength\ := to_unsigned(5, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint arrayLengthCopy;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayLengthCopy = 160u;
                            -- 
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayLengthCopy\ := to_unsigned(160, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint nonSubstitutableArrayLengthCopy;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- nonSubstitutableArrayLengthCopy = arrayHolder.NonSubstitutableArrayLengthCopy;
                            -- 
                            \ConstantsUsingCases::ConstantPassingToObject().0.nonSubstitutableArrayLengthCopy\ := \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\NonSubstitutableArrayLengthCopy\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder2 = new ArrayHolder1 (arrayHolder.Array);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_4\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_5\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\Array\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\Array\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 previous;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- previous = new ArrayHolder1 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.previous\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= true;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder3 = new ArrayHolder1 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_8\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_9\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder4 = new ArrayHolder1 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_11\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_12\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder5 = new ArrayHolder1 (previous);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1)
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.previous\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ <= true;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder2 arrayHolder6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder6 = new ArrayHolder2 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\.\ArrayLength\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= true;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder2 arrayHolder7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder7 = new ArrayHolder2 (13u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\.\ArrayLength\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(13, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 state machine end


    -- System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 state machine start
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\: \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._States\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\;
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\ <= false;
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\ <= to_signed(0, 32);
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\;
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ is 
                    when \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_2\ => 
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1.parameter.In\;
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return 298 - input2;
                        -- 
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\ := to_signed(298, 32) - \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\;
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\ <= \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\;
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32).0 state machine start
    \LoopCases::BreakInLoop(Int32).0._StateMachine\: process (\Clock\) 
        Variable \LoopCases::BreakInLoop(Int32).0._State\: \LoopCases::BreakInLoop(Int32).0._States\ := \LoopCases::BreakInLoop(Int32).0._State_0\;
        Variable \LoopCases::BreakInLoop(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\: boolean := false;
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \LoopCases::BreakInLoop(Int32).0._Finished\ <= false;
                \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_0\;
                \LoopCases::BreakInLoop(Int32).0.input\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.num\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.num2\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\ := false;
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\ := false;
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\ := to_signed(0, 32);
            else 
                case \LoopCases::BreakInLoop(Int32).0._State\ is 
                    when \LoopCases::BreakInLoop(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\LoopCases::BreakInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\LoopCases::BreakInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoop(Int32).0._Finished\ <= true;
                        else 
                            \LoopCases::BreakInLoop(Int32).0._Finished\ <= false;
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_2\ => 
                        \LoopCases::BreakInLoop(Int32).0.input\ := \LoopCases::BreakInLoop(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input;
                        -- 
                        \LoopCases::BreakInLoop(Int32).0.num\ := \LoopCases::BreakInLoop(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \LoopCases::BreakInLoop(Int32).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num2 < input) {
                        -- 	num = num + num2;
                        -- 	if (num > 10) {
                        -- 		break;
                        -- 	}
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \LoopCases::BreakInLoop(Int32).0._State_2\.
                        -- The while loop's condition:
                        \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\ := \LoopCases::BreakInLoop(Int32).0.num2\ < \LoopCases::BreakInLoop(Int32).0.input\;
                        if (\LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	num = num + num2;
                            -- 	if (num > 10) {
                            -- 		break;
                            -- 	}
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + num2;
                            -- 
                            \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\ := \LoopCases::BreakInLoop(Int32).0.num\ + \LoopCases::BreakInLoop(Int32).0.num2\;
                            \LoopCases::BreakInLoop(Int32).0.num\ := \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num > 10) {
                            -- 	break;
                            -- }
                            -- 
                            \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\ := \LoopCases::BreakInLoop(Int32).0.num\ > to_signed(10, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \LoopCases::BreakInLoop(Int32).0._State_6\ and ends in state \LoopCases::BreakInLoop(Int32).0._State_6\.
                            --     * Execution after either branch will continue in the following state: \LoopCases::BreakInLoop(Int32).0._State_5\.

                            if (\LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\) then 
                                \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_6\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_5\;
                            end if;
                        else 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8769
                    when \LoopCases::BreakInLoop(Int32).0._State_4\ => 
                        -- State after the while loop which was started in state \LoopCases::BreakInLoop(Int32).0._State_2\.
                        \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_5\ => 
                        -- State after the if-else which was started in state \LoopCases::BreakInLoop(Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + 1;
                        -- 
                        \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\ := \LoopCases::BreakInLoop(Int32).0.num2\ + to_signed(1, 32);
                        \LoopCases::BreakInLoop(Int32).0.num2\ := \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\;
                        -- Returning to the repeated state of the while loop which was started in state \LoopCases::BreakInLoop(Int32).0._State_2\ if the loop wasn't exited with a state change.
                        if (\LoopCases::BreakInLoop(Int32).0._State\ = \LoopCases::BreakInLoop(Int32).0._State_5\) then 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \LoopCases::BreakInLoop(Int32).0._State_6\ => 
                        -- True branch of the if-else started in state \LoopCases::BreakInLoop(Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	break;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- break;
                        -- 
                        -- Exiting the while loop with a break statement.
                        \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_4\;
                        -- Going to the state after the if-else which was started in state \LoopCases::BreakInLoop(Int32).0._State_3\.
                        if (\LoopCases::BreakInLoop(Int32).0._State\ = \LoopCases::BreakInLoop(Int32).0._State_6\) then 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32).0 state machine start
    \LoopCases::BreakInLoopInLoop(Int32).0._StateMachine\: process (\Clock\) 
        Variable \LoopCases::BreakInLoopInLoop(Int32).0._State\: \LoopCases::BreakInLoopInLoop(Int32).0._States\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_0\;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\: boolean := false;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\: boolean := false;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \LoopCases::BreakInLoopInLoop(Int32).0._Finished\ <= false;
                \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_0\;
                \LoopCases::BreakInLoopInLoop(Int32).0.input\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.num\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.num2\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\ := false;
                \LoopCases::BreakInLoopInLoop(Int32).0.num3\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\ := false;
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\ := false;
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\ := to_signed(0, 32);
            else 
                case \LoopCases::BreakInLoopInLoop(Int32).0._State\ is 
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._Finished\ <= true;
                        else 
                            \LoopCases::BreakInLoopInLoop(Int32).0._Finished\ <= false;
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_2\ => 
                        \LoopCases::BreakInLoopInLoop(Int32).0.input\ := \LoopCases::BreakInLoopInLoop(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.num\ := \LoopCases::BreakInLoopInLoop(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num2 < input) {
                        -- 	int num3;
                        -- 	num3 = 0;
                        -- 	while (num3 < num2) {
                        -- 		num = num + num2;
                        -- 		if (num > 10) {
                        -- 			break;
                        -- 		}
                        -- 		num3 = num3 + 1;
                        -- 	}
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_2\.
                        -- The while loop's condition:
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\ := \LoopCases::BreakInLoopInLoop(Int32).0.num2\ < \LoopCases::BreakInLoopInLoop(Int32).0.input\;
                        if (\LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = 0;
                            -- 	while (num3 < num2) {
                            -- 		num = num + num2;
                            -- 		if (num > 10) {
                            -- 			break;
                            -- 		}
                            -- 		num3 = num3 + 1;
                            -- 	}
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \LoopCases::BreakInLoopInLoop(Int32).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num3 < num2) {
                            -- 	num = num + num2;
                            -- 	if (num > 10) {
                            -- 		break;
                            -- 	}
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_5\;
                        else 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_4\ => 
                        -- State after the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_2\.
                        \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_3\.
                        -- The while loop's condition:
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\ := \LoopCases::BreakInLoopInLoop(Int32).0.num3\ < \LoopCases::BreakInLoopInLoop(Int32).0.num2\;
                        if (\LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	num = num + num2;
                            -- 	if (num > 10) {
                            -- 		break;
                            -- 	}
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + num2;
                            -- 
                            \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\ := \LoopCases::BreakInLoopInLoop(Int32).0.num\ + \LoopCases::BreakInLoopInLoop(Int32).0.num2\;
                            \LoopCases::BreakInLoopInLoop(Int32).0.num\ := \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num > 10) {
                            -- 	break;
                            -- }
                            -- 
                            \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\ := \LoopCases::BreakInLoopInLoop(Int32).0.num\ > to_signed(10, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \LoopCases::BreakInLoopInLoop(Int32).0._State_8\ and ends in state \LoopCases::BreakInLoopInLoop(Int32).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \LoopCases::BreakInLoopInLoop(Int32).0._State_7\.

                            if (\LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\) then 
                                \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_8\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_7\;
                            end if;
                        else 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8769
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_6\ => 
                        -- State after the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + 1;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\ := \LoopCases::BreakInLoopInLoop(Int32).0.num2\ + to_signed(1, 32);
                        \LoopCases::BreakInLoopInLoop(Int32).0.num2\ := \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\;
                        -- Returning to the repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_2\ if the loop wasn't exited with a state change.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._State\ = \LoopCases::BreakInLoopInLoop(Int32).0._State_6\) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_7\ => 
                        -- State after the if-else which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num3 + 1;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\ := \LoopCases::BreakInLoopInLoop(Int32).0.num3\ + to_signed(1, 32);
                        \LoopCases::BreakInLoopInLoop(Int32).0.num3\ := \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\;
                        -- Returning to the repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_3\ if the loop wasn't exited with a state change.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._State\ = \LoopCases::BreakInLoopInLoop(Int32).0._State_7\) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_8\ => 
                        -- True branch of the if-else started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	break;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- break;
                        -- 
                        -- Exiting the while loop with a break statement.
                        \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_6\;
                        -- Going to the state after the if-else which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_5\.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._State\ = \LoopCases::BreakInLoopInLoop(Int32).0._State_8\) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage().0 state machine start
    \ObjectUsingCases::NullUsage().0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::NullUsage().0._State\: \ObjectUsingCases::NullUsage().0._States\ := \ObjectUsingCases::NullUsage().0._State_0\;
        Variable \ObjectUsingCases::NullUsage().0.myClass\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
        Variable \ObjectUsingCases::NullUsage().0.binaryOperationResult.0\: boolean := false;
        Variable \ObjectUsingCases::NullUsage().0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::NullUsage().0._Finished\ <= false;
                \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_0\;
                \ObjectUsingCases::NullUsage().0.binaryOperationResult.0\ := false;
                \ObjectUsingCases::NullUsage().0.binaryOperationResult.1\ := false;
            else 
                case \ObjectUsingCases::NullUsage().0._State\ is 
                    when \ObjectUsingCases::NullUsage().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::NullUsage().0._Started\ = true) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::NullUsage().0._Started\ = true) then 
                            \ObjectUsingCases::NullUsage().0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::NullUsage().0._Finished\ <= false;
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = 5;
                        -- 
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass == null) {
                        -- 	myClass = new MyClass ();
                        -- }
                        -- 
                        \ObjectUsingCases::NullUsage().0.binaryOperationResult.0\ := \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ = true;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::NullUsage().0._State_4\ and ends in state \ObjectUsingCases::NullUsage().0._State_4\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::NullUsage().0._State_3\.

                        if (\ObjectUsingCases::NullUsage().0.binaryOperationResult.0\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \ObjectUsingCases::NullUsage().0._State_3\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = null;
                        -- 
                        \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ := true;
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass != null) {
                        -- 	myClass.MyProperty = 10;
                        -- }
                        -- 
                        \ObjectUsingCases::NullUsage().0.binaryOperationResult.1\ := \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ /= true;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::NullUsage().0._State_6\ and ends in state \ObjectUsingCases::NullUsage().0._State_6\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::NullUsage().0._State_5\.

                        if (\ObjectUsingCases::NullUsage().0.binaryOperationResult.1\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \ObjectUsingCases::NullUsage().0._State_4\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::NullUsage().0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	myClass = new MyClass ();
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass ();
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_2\.
                        if (\ObjectUsingCases::NullUsage().0._State\ = \ObjectUsingCases::NullUsage().0._State_4\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_5\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_3\.
                        \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_6\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::NullUsage().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	myClass.MyProperty = 10;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = 10;
                        -- 
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(10, 32);
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_3\.
                        if (\ObjectUsingCases::NullUsage().0._State\ = \ObjectUsingCases::NullUsage().0._State_6\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage().0 state machine end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32).0 state machine start
    \ObjectUsingCases::VoidReturn(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::VoidReturn(Int32).0._State\: \ObjectUsingCases::VoidReturn(Int32).0._States\ := \ObjectUsingCases::VoidReturn(Int32).0._State_0\;
        Variable \ObjectUsingCases::VoidReturn(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::VoidReturn(Int32).0.myClass\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::VoidReturn(Int32).0._Finished\ <= false;
                \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ <= false;
                \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_0\;
                \ObjectUsingCases::VoidReturn(Int32).0.input\ := to_signed(0, 32);
            else 
                case \ObjectUsingCases::VoidReturn(Int32).0._State\ is 
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::VoidReturn(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::VoidReturn(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::VoidReturn(Int32).0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::VoidReturn(Int32).0._Finished\ <= false;
                            \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_2\ => 
                        \ObjectUsingCases::VoidReturn(Int32).0.input\ := \ObjectUsingCases::VoidReturn(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::VoidReturn(Int32).0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::VoidReturn(Int32).0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = input;
                        -- 
                        \ObjectUsingCases::VoidReturn(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::VoidReturn(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- this.VoidMethod (myClass);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass)
                        \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.Out.0\ <= \ObjectUsingCases::VoidReturn(Int32).0.myClass\;
                        \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ <= true;
                        \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass)
                        if (\ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ = \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Finished.0\) then 
                            \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ <= false;
                            \ObjectUsingCases::VoidReturn(Int32).0.myClass\ := \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.In.0\;
                            \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32).0 state machine start
    \ObjectUsingCases::ReferenceAssignment(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0._State\: \ObjectUsingCases::ReferenceAssignment(Int32).0._States\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\;
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\ <= false;
                \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\;
                \ObjectUsingCases::ReferenceAssignment(Int32).0.input\ := to_signed(0, 32);
                \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ is 
                    when \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::ReferenceAssignment(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::ReferenceAssignment(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::ReferenceAssignment(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\ <= false;
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::ReferenceAssignment(Int32).0._State_2\ => 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.input\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = input;
                        -- 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = myClass.MyProperty + 1;
                        -- 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ + to_signed(1, 32);
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = myClass.MyProperty + 1;
                        -- 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ + to_signed(1, 32);
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\;
                        \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass).0 state machine start
    \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\: \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._States\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\;
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\: \Hast.TestInputs.Static.ObjectUsingCases+MyClass\;
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\: boolean := false;
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\ <= false;
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\;
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\ := false;
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\ := to_signed(0, 32);
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\ := false;
            else 
                case \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ is 
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\ = true) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\ = true) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\ <= false;
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.Out\ <= \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\ => 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass.MyProperty < 10) {
                        -- 	myClass.MyProperty = myClass.MyProperty * 10;
                        -- 	if (myClass.MyProperty == 10) {
                        -- 		return;
                        -- 	}
                        -- }
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ < to_signed(10, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\ and ends in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\.

                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = 5;
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ := to_signed(5, 32);
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	myClass.MyProperty = myClass.MyProperty * 10;
                        -- 	if (myClass.MyProperty == 10) {
                        -- 		return;
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = myClass.MyProperty * 10;
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\ := SmartResize(\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ * to_signed(10, 32), 32);
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass.MyProperty == 10) {
                        -- 	return;
                        -- }
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ = to_signed(10, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\ and ends in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\.

                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6848
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\.
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ = \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return;
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\;
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ = \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass).0 state machine end


    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32).0 state machine start
    \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._StateMachine\: process (\Clock\) 
        Variable \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State\: \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._States\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_0\;
        Variable \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
        Variable \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.add\: signed(31 downto 0) := to_signed(0, 32);
        Variable \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Finished\ <= false;
                \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_0\;
                \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input\ := to_signed(0, 32);
                \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.add\ := to_signed(0, 32);
                \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State\ is 
                    when \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Started\ = true) then 
                            \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Started\ = true) then 
                            \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Finished\ <= true;
                        else 
                            \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Finished\ <= false;
                            \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this.parameter.Out\ <= \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_2\ => 
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this.parameter.In\;
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input.parameter.In\;
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.add\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.add.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this._state = input + 10;
                        -- 
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.binaryOperationResult.0\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input\ + to_signed(10, 32);
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this\.\_state\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.binaryOperationResult.0\;
                        \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32).0 state machine start
    \OptionaParametersCases+MyClass::Method(Int32,Int32).0._StateMachine\: process (\Clock\) 
        Variable \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State\: \OptionaParametersCases+MyClass::Method(Int32,Int32).0._States\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_0\;
        Variable \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
        Variable \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \OptionaParametersCases+MyClass::Method(Int32,Int32).0.add\: signed(31 downto 0) := to_signed(0, 32);
        Variable \OptionaParametersCases+MyClass::Method(Int32,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Finished\ <= false;
                \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_0\;
                \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input\ := to_signed(0, 32);
                \OptionaParametersCases+MyClass::Method(Int32,Int32).0.add\ := to_signed(0, 32);
                \OptionaParametersCases+MyClass::Method(Int32,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State\ is 
                    when \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\OptionaParametersCases+MyClass::Method(Int32,Int32).0._Started\ = true) then 
                            \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\OptionaParametersCases+MyClass::Method(Int32,Int32).0._Started\ = true) then 
                            \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Finished\ <= true;
                        else 
                            \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Finished\ <= false;
                            \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this.parameter.Out\ <= \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_2\ => 
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this.parameter.In\;
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input.parameter.In\;
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0.add\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0.add.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this._state = input + 11;
                        -- 
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0.binaryOperationResult.0\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input\ + to_signed(11, 32);
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this\.\_state\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0.binaryOperationResult.0\;
                        \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State\ := \OptionaParametersCases+MyClass::Method(Int32,Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32).0 state machine start
    \OptionaParametersCases::OmittedOptionalParameters(Int32).0._StateMachine\: process (\Clock\) 
        Variable \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\: \OptionaParametersCases::OmittedOptionalParameters(Int32).0._States\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_0\;
        Variable \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\: \Hast.TestInputs.Static.OptionaParametersCases+MyClass\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Finished\ <= false;
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).input.parameter.Out.0\ <= to_signed(0, 32);
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).add.parameter.Out.0\ <= to_signed(0, 32);
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Started.0\ <= false;
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).input.parameter.Out.0\ <= to_signed(0, 32);
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).add.parameter.Out.0\ <= to_signed(0, 32);
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Started.0\ <= false;
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_0\;
                \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input\ := to_signed(0, 32);
            else 
                case \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ is 
                    when \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\OptionaParametersCases::OmittedOptionalParameters(Int32).0._Started\ = true) then 
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\OptionaParametersCases::OmittedOptionalParameters(Int32).0._Started\ = true) then 
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Finished\ <= true;
                        else 
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Finished\ <= false;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_2\ => 
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass (input, 10);
                        -- 
                        -- Initializing record fields to their defaults.
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\.\IsNull\ := false;
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\.\_state\ := to_signed(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32)
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).this.parameter.Out.0\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\;
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).input.parameter.Out.0\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input\;
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).add.parameter.Out.0\ <= to_signed(10, 32);
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Started.0\ <= true;
                        \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32)
                        if (\OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Started.0\ = \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Finished.0\) then 
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Started.0\ <= false;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Hast.TestInputs.Static.OptionaParametersCases+MyClass.Method (myClass, input, 11);
                            -- 
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32)
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).this.parameter.Out.0\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).input.parameter.Out.0\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.input\;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).add.parameter.Out.0\ <= to_signed(11, 32);
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Started.0\ <= true;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32)
                        if (\OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Started.0\ = \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Finished.0\) then 
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Started.0\ <= false;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0.myClass\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).this.parameter.In.0\;
                            \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State\ := \OptionaParametersCases::OmittedOptionalParameters(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32).0 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().0 state machine start
    \ParallelCases+Calculator::IsEven().0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+Calculator::IsEven().0._State\: \ParallelCases+Calculator::IsEven().0._States\ := \ParallelCases+Calculator::IsEven().0._State_0\;
        Variable \ParallelCases+Calculator::IsEven().0.this\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
        Variable \ParallelCases+Calculator::IsEven().0.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+Calculator::IsEven().0._Finished\ <= false;
                \ParallelCases+Calculator::IsEven().0.return\ <= false;
                \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_0\;
                \ParallelCases+Calculator::IsEven().0.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\ := to_signed(0, 64);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\ := false;
            else 
                case \ParallelCases+Calculator::IsEven().0._State\ is 
                    when \ParallelCases+Calculator::IsEven().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+Calculator::IsEven().0._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+Calculator::IsEven().0._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().0._Finished\ <= true;
                        else 
                            \ParallelCases+Calculator::IsEven().0._Finished\ <= false;
                            \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ParallelCases+Calculator::IsEven().0.this.parameter.Out\ <= \ParallelCases+Calculator::IsEven().0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().0._State_2\ => 
                        \ParallelCases+Calculator::IsEven().0.this\ := \ParallelCases+Calculator::IsEven().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd = @this.Number;
                        -- 
                        \ParallelCases+Calculator::IsEven().0.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ := \ParallelCases+Calculator::IsEven().0.this\.\Number\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd - remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\ := \ParallelCases+Calculator::IsEven().0.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ / to_unsigned(2, 32);
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\ := SmartResize(\ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\ * to_unsigned(2, 32), 32);
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\ := signed(SmartResize(\ParallelCases+Calculator::IsEven().0.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ - \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\, 64));
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\ := (\ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\) = to_signed(0, 64);
                        \ParallelCases+Calculator::IsEven().0.return\ <= \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\;
                        \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().0 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().1 state machine start
    \ParallelCases+Calculator::IsEven().1._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+Calculator::IsEven().1._State\: \ParallelCases+Calculator::IsEven().1._States\ := \ParallelCases+Calculator::IsEven().1._State_0\;
        Variable \ParallelCases+Calculator::IsEven().1.this\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
        Variable \ParallelCases+Calculator::IsEven().1.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+Calculator::IsEven().1._Finished\ <= false;
                \ParallelCases+Calculator::IsEven().1.return\ <= false;
                \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_0\;
                \ParallelCases+Calculator::IsEven().1.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\ := to_signed(0, 64);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\ := false;
            else 
                case \ParallelCases+Calculator::IsEven().1._State\ is 
                    when \ParallelCases+Calculator::IsEven().1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+Calculator::IsEven().1._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+Calculator::IsEven().1._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().1._Finished\ <= true;
                        else 
                            \ParallelCases+Calculator::IsEven().1._Finished\ <= false;
                            \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ParallelCases+Calculator::IsEven().1.this.parameter.Out\ <= \ParallelCases+Calculator::IsEven().1.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().1._State_2\ => 
                        \ParallelCases+Calculator::IsEven().1.this\ := \ParallelCases+Calculator::IsEven().1.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd = @this.Number;
                        -- 
                        \ParallelCases+Calculator::IsEven().1.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ := \ParallelCases+Calculator::IsEven().1.this\.\Number\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd - remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\ := \ParallelCases+Calculator::IsEven().1.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ / to_unsigned(2, 32);
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\ := SmartResize(\ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\ * to_unsigned(2, 32), 32);
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\ := signed(SmartResize(\ParallelCases+Calculator::IsEven().1.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ - \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\, 64));
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\ := (\ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\) = to_signed(0, 64);
                        \ParallelCases+Calculator::IsEven().1.return\ <= \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\;
                        \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().1 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().2 state machine start
    \ParallelCases+Calculator::IsEven().2._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+Calculator::IsEven().2._State\: \ParallelCases+Calculator::IsEven().2._States\ := \ParallelCases+Calculator::IsEven().2._State_0\;
        Variable \ParallelCases+Calculator::IsEven().2.this\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
        Variable \ParallelCases+Calculator::IsEven().2.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+Calculator::IsEven().2._Finished\ <= false;
                \ParallelCases+Calculator::IsEven().2.return\ <= false;
                \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_0\;
                \ParallelCases+Calculator::IsEven().2.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\ := to_signed(0, 64);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\ := false;
            else 
                case \ParallelCases+Calculator::IsEven().2._State\ is 
                    when \ParallelCases+Calculator::IsEven().2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+Calculator::IsEven().2._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+Calculator::IsEven().2._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().2._Finished\ <= true;
                        else 
                            \ParallelCases+Calculator::IsEven().2._Finished\ <= false;
                            \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ParallelCases+Calculator::IsEven().2.this.parameter.Out\ <= \ParallelCases+Calculator::IsEven().2.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().2._State_2\ => 
                        \ParallelCases+Calculator::IsEven().2.this\ := \ParallelCases+Calculator::IsEven().2.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd = @this.Number;
                        -- 
                        \ParallelCases+Calculator::IsEven().2.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ := \ParallelCases+Calculator::IsEven().2.this\.\Number\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd - remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\ := \ParallelCases+Calculator::IsEven().2.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ / to_unsigned(2, 32);
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\ := SmartResize(\ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\ * to_unsigned(2, 32), 32);
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\ := signed(SmartResize(\ParallelCases+Calculator::IsEven().2.remainderOperanda17176910f602958a5265fc6d8012b6047fe73ddf347fffbb058652bd7701ddd\ - \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\, 64));
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\ := (\ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\) = to_signed(0, 64);
                        \ParallelCases+Calculator::IsEven().2.return\ <= \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\;
                        \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven().2 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 state machine start
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\: \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._States\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\;
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\ := to_signed(0, 64);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ is 
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_2\ => 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ + \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(num - num / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ / to_unsigned(2, 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\ := SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\ * to_unsigned(2, 32), 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\ := signed(SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ - \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\, 64));
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\ := (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\) = to_signed(0, 64);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 state machine start
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\: \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._States\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\;
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\ := to_signed(0, 64);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ is 
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_2\ => 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ + \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(num - num / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ / to_unsigned(2, 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\ := SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\ * to_unsigned(2, 32), 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\ := signed(SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ - \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\, 64));
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\ := (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\) = to_signed(0, 64);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 state machine start
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\: \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._States\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\;
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\ := to_signed(0, 64);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ is 
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_2\ => 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ + \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(num - num / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ / to_unsigned(2, 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\ := SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\ * to_unsigned(2, 32), 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\ := signed(SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ - \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\, 64));
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\ := (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\) = to_signed(0, 64);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 state machine start
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\: \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._States\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ is 
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_2\ => 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ + \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- Calculator object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42 = new Calculator { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\IsNull\ := false;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\Number\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42.Number = num;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\Number\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- return Hast.TestInputs.Static.ParallelCases+Calculator.IsEven (object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven()
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.Out.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ <= true;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven()
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ = \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Finished.0\) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.In.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 state machine start
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\: \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._States\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ is 
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_2\ => 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ + \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- Calculator object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42 = new Calculator { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\IsNull\ := false;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\Number\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42.Number = num;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\Number\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- return Hast.TestInputs.Static.ParallelCases+Calculator.IsEven (object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven()
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.Out.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ <= true;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven()
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ = \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Finished.0\) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.In.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 state machine end


    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 state machine start
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\: \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._States\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\: \Hast.TestInputs.Static.ParallelCases+Calculator\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ is 
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_2\ => 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ + \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- Calculator object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42 = new Calculator { };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\IsNull\ := false;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\Number\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42.Number = num;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\.\Number\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- return Hast.TestInputs.Static.ParallelCases+Calculator.IsEven (object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven()
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.Out.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ <= true;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven()
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ = \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Finished.0\) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.object821d1309860362c4b98c1dfa6f55910e50fe5780ab44fb1231bfdde4be1cfd42\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.In.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 state machine end


    -- System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 state machine start
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\: \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._States\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\: \boolean_Array\(0 to 2) := (others => false);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\ <= to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\ <= to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\ <= to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\ := to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\ := (others => false);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\ := to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := 0;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\ := false;
            else 
                case \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ is 
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\ <= true;
                        else 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\ => 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass0_0 <>c__DisplayClass0_;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass0_ = new <>c__DisplayClass0_0 ();
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass0_.input = input;
                        -- 
                        \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::input\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- Task<bool>[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new Task<bool>[3];
                        -- 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\ := (others => false);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0u;
                        -- 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num) < 3L) {
                        -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass0_.<>9__0 ?? (<>c__DisplayClass0_.<>9__0 = <>c__DisplayClass0_.<WhenAllWhenAnyAwaitedTasks>b__0), num);
                        -- 	num = (uint)((long)(num) + 1L);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\.
                        -- The while loop's condition:
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\ := signed(SmartResize((\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\), 64)) < to_signed(3, 64);
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass0_.<>9__0 ?? (<>c__DisplayClass0_.<>9__0 = <>c__DisplayClass0_.<WhenAllWhenAnyAwaitedTasks>b__0), num);
                            -- 	num = (uint)((long)(num) + 1L);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array [num] = Task.Factory.StartNew (<>c__DisplayClass0_.<>9__0 ?? (<>c__DisplayClass0_.<>9__0 = <>c__DisplayClass0_.<WhenAllWhenAnyAwaitedTasks>b__0), num);
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object)
                            case \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ is 
                                when 0 => 
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\;
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= true;
                                when 1 => 
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\;
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= true;
                                when 2 => 
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\;
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= true;
                            end case;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ + 1;
                            -- The following section was transformed from the .NET statement below:
                            -- num = (uint)((long)(num) + 1L);
                            -- 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\ := (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\);
                        else 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6795
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_4\ => 
                        -- State after the while loop which was started in state \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array).Wait ();
                        -- 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object)
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\ and \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\ and \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := 0;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(0) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(1) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(2) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- Task.WhenAny (array).Wait ();
                            -- 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object)
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\ or \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\ or \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := 0;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(0) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(1) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(2) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 state machine start
    \ParallelCases::ObjectUsingTasks(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0._State\: \ParallelCases::ObjectUsingTasks(UInt32).0._States\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.input\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.array\: \boolean_Array\(0 to 2) := (others => false);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\: boolean := false;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\: boolean := false;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\ <= to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\ <= to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\ <= to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\;
                \ParallelCases::ObjectUsingTasks(UInt32).0.input\ := to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.array\ := (others => false);
                \ParallelCases::ObjectUsingTasks(UInt32).0.num\ := to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\ := false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ := 0;
                \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\ := false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\ := false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\ := false;
            else 
                case \ParallelCases::ObjectUsingTasks(UInt32).0._State\ is 
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\ <= true;
                        else 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\ => 
                        \ParallelCases::ObjectUsingTasks(UInt32).0.input\ := \ParallelCases::ObjectUsingTasks(UInt32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass1_0 <>c__DisplayClass1_;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass1_ = new <>c__DisplayClass1_0 ();
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass1_.input = input;
                        -- 
                        \System.UInt32 Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::input\ := \ParallelCases::ObjectUsingTasks(UInt32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- Task<bool>[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new Task<bool>[3];
                        -- 
                        \ParallelCases::ObjectUsingTasks(UInt32).0.array\ := (others => false);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0u;
                        -- 
                        \ParallelCases::ObjectUsingTasks(UInt32).0.num\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num) < 3L) {
                        -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass1_.<>9__0 ?? (<>c__DisplayClass1_.<>9__0 = <>c__DisplayClass1_.<ObjectUsingTasks>b__0), num);
                        -- 	num = (uint)((long)(num) + 1L);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\.
                        -- The while loop's condition:
                        \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\ := signed(SmartResize((\ParallelCases::ObjectUsingTasks(UInt32).0.num\), 64)) < to_signed(3, 64);
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass1_.<>9__0 ?? (<>c__DisplayClass1_.<>9__0 = <>c__DisplayClass1_.<ObjectUsingTasks>b__0), num);
                            -- 	num = (uint)((long)(num) + 1L);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array [num] = Task.Factory.StartNew (<>c__DisplayClass1_.<>9__0 ?? (<>c__DisplayClass1_.<>9__0 = <>c__DisplayClass1_.<ObjectUsingTasks>b__0), num);
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object)
                            case \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ is 
                                when 0 => 
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.num\;
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ <= true;
                                when 1 => 
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.num\;
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ <= true;
                                when 2 => 
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.num\;
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ <= true;
                            end case;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ + 1;
                            -- The following section was transformed from the .NET statement below:
                            -- num = (uint)((long)(num) + 1L);
                            -- 
                            \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\ParallelCases::ObjectUsingTasks(UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                            \ParallelCases::ObjectUsingTasks(UInt32).0.num\ := (\ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\);
                        else 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6795
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_4\ => 
                        -- State after the while loop which was started in state \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array).Wait ();
                        -- 
                        \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object)
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ = \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.1\ and \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ = \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.2\ and \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ = \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.0\) then 
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ := 0;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.0\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.1\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.2\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.array\(0) := \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.array\(1) := \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.array\(2) := \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32).0 state machine start
    \UnaryCases::IncrementDecrement(Int32).0._StateMachine\: process (\Clock\) 
        Variable \UnaryCases::IncrementDecrement(Int32).0._State\: \UnaryCases::IncrementDecrement(Int32).0._States\ := \UnaryCases::IncrementDecrement(Int32).0._State_0\;
        Variable \UnaryCases::IncrementDecrement(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
        Variable \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \UnaryCases::IncrementDecrement(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UnaryCases::IncrementDecrement(Int32).0._Finished\ <= false;
                \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_0\;
                \UnaryCases::IncrementDecrement(Int32).0.input\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.array\ := (others => to_signed(0, 32));
                \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\ := false;
                \UnaryCases::IncrementDecrement(Int32).0.num\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.num2\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
            else 
                case \UnaryCases::IncrementDecrement(Int32).0._State\ is 
                    when \UnaryCases::IncrementDecrement(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UnaryCases::IncrementDecrement(Int32).0._Started\ = true) then 
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnaryCases::IncrementDecrement(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UnaryCases::IncrementDecrement(Int32).0._Started\ = true) then 
                            \UnaryCases::IncrementDecrement(Int32).0._Finished\ <= true;
                        else 
                            \UnaryCases::IncrementDecrement(Int32).0._Finished\ <= false;
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnaryCases::IncrementDecrement(Int32).0._State_2\ => 
                        \UnaryCases::IncrementDecrement(Int32).0.input\ := \UnaryCases::IncrementDecrement(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[5];
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- if (input < 10) {
                        -- 	int num;
                        -- 	num = input;
                        -- 	input = num + 1;
                        -- 	array [num] = 3;
                        -- 	int num2;
                        -- 	num2 = input;
                        -- 	input = num2 - 1;
                        -- 	array [num2] = 3;
                        -- }
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\ := \UnaryCases::IncrementDecrement(Int32).0.input\ < to_signed(10, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \UnaryCases::IncrementDecrement(Int32).0._State_4\ and ends in state \UnaryCases::IncrementDecrement(Int32).0._State_4\.
                        --     * Execution after either branch will continue in the following state: \UnaryCases::IncrementDecrement(Int32).0._State_3\.

                        if (\UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\) then 
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \UnaryCases::IncrementDecrement(Int32).0._State_3\ => 
                        -- State after the if-else which was started in state \UnaryCases::IncrementDecrement(Int32).0._State_2\.
                        \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnaryCases::IncrementDecrement(Int32).0._State_4\ => 
                        -- True branch of the if-else started in state \UnaryCases::IncrementDecrement(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num;
                        -- 	num = input;
                        -- 	input = num + 1;
                        -- 	array [num] = 3;
                        -- 	int num2;
                        -- 	num2 = input;
                        -- 	input = num2 - 1;
                        -- 	array [num2] = 3;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.num\ := \UnaryCases::IncrementDecrement(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- input = num + 1;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\ := \UnaryCases::IncrementDecrement(Int32).0.num\ + to_signed(1, 32);
                        \UnaryCases::IncrementDecrement(Int32).0.input\ := \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num] = 3;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.array\(to_integer(\UnaryCases::IncrementDecrement(Int32).0.num\)) := to_signed(3, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = input;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.num2\ := \UnaryCases::IncrementDecrement(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- input = num2 - 1;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\ := \UnaryCases::IncrementDecrement(Int32).0.num2\ - to_signed(1, 32);
                        \UnaryCases::IncrementDecrement(Int32).0.input\ := \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num2] = 3;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.array\(to_integer(\UnaryCases::IncrementDecrement(Int32).0.num2\)) := to_signed(3, 32);
                        -- Going to the state after the if-else which was started in state \UnaryCases::IncrementDecrement(Int32).0._State_2\.
                        if (\UnaryCases::IncrementDecrement(Int32).0._State\ = \UnaryCases::IncrementDecrement(Int32).0._State_4\) then 
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32).0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ = \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ = \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 2 => 
                            if (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 3 => 
                            if (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 4 => 
                            if (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ = \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 5 => 
                            if (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 6 => 
                            if (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 7 => 
                            if (\Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ = \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 8 => 
                            if (\Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 9 => 
                            if (\Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 10 => 
                            if (\Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 11 => 
                            if (\Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ = \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 12 => 
                            if (\Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ = \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 13 => 
                            if (\Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor().0 (#0):
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\ <= \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\;
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.In\ <= \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.Out.0\;
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.In\ <= \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\;
    \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Finished.0\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\;
    \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.In.0\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.Out\;
    \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.In.0\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]) end


    -- System.Void Hast::InternalInvocationProxy().System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod().0 (#0):
    \ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\ <= \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\;
    \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength.parameter.In\ <= \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\;
    \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Finished.0\ <= \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\;
    \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).return.0\ <= \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32[] Hast.TestInputs.Static.ArrayUsingCases::ArrayProducingMethod(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]) start
    \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := WaitingForStarted;
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1).0
                case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\ := 0;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= true;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\ is 
                            when 0 => 
                                if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := AfterFinished;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= true;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= false;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := WaitingForStarted;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0
                case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\ := 0;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= true;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := AfterFinished;
                                    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= true;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= false;
                                    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\;
                                    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := WaitingForStarted;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]) end


    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 (#0):
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\;
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\;
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Finished.0\ <= \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).return.0\ <= \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.TestInputs.Static.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 (#0):
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 (#0):
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.Out.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Finished.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.Out\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder1) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject().0 (#0):
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\;
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\;
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\ <= \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32).0 (#0):
    \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\ <= \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\;
    \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.In\ <= \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.Out.0\;
    \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Finished.0\ <= \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\;
    \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.In.0\ <= \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidMethod(Hast.TestInputs.Static.ObjectUsingCases+MyClass) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32) start
    -- Signal connections for System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32).0 (#0):
    \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Started\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Started.0\;
    \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this.parameter.In\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).this.parameter.Out.0\;
    \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.input.parameter.In\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).input.parameter.Out.0\;
    \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.add.parameter.In\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).add.parameter.Out.0\;
    \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32)._Finished.0\ <= \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0._Finished\;
    \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::.ctor(Int32,Int32).this.parameter.In.0\ <= \OptionaParametersCases+MyClass::.ctor(Int32,Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::.ctor(System.Int32,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32) start
    -- Signal connections for System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32).0 (#0):
    \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Started\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Started.0\;
    \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this.parameter.In\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).this.parameter.Out.0\;
    \OptionaParametersCases+MyClass::Method(Int32,Int32).0.input.parameter.In\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).input.parameter.Out.0\;
    \OptionaParametersCases+MyClass::Method(Int32,Int32).0.add.parameter.In\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).add.parameter.Out.0\;
    \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32)._Finished.0\ <= \OptionaParametersCases+MyClass::Method(Int32,Int32).0._Finished\;
    \OptionaParametersCases::OmittedOptionalParameters(Int32).0.OptionaParametersCases+MyClass::Method(Int32,Int32).this.parameter.In.0\ <= \OptionaParametersCases+MyClass::Method(Int32,Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.OptionaParametersCases+MyClass::Method(System.Int32,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven() start
    -- Signal connections for System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 (#0):
    \ParallelCases+Calculator::IsEven().0._Started\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\;
    \ParallelCases+Calculator::IsEven().0.this.parameter.In\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.Out.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Finished.0\ <= \ParallelCases+Calculator::IsEven().0._Finished\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().return.0\ <= \ParallelCases+Calculator::IsEven().0.return\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.In.0\ <= \ParallelCases+Calculator::IsEven().0.this.parameter.Out\;
    -- Signal connections for System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 (#1):
    \ParallelCases+Calculator::IsEven().1._Started\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\;
    \ParallelCases+Calculator::IsEven().1.this.parameter.In\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.Out.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Finished.0\ <= \ParallelCases+Calculator::IsEven().1._Finished\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().return.0\ <= \ParallelCases+Calculator::IsEven().1.return\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.In.0\ <= \ParallelCases+Calculator::IsEven().1.this.parameter.Out\;
    -- Signal connections for System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 (#2):
    \ParallelCases+Calculator::IsEven().2._Started\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\;
    \ParallelCases+Calculator::IsEven().2.this.parameter.In\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.Out.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Finished.0\ <= \ParallelCases+Calculator::IsEven().2._Finished\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().return.0\ <= \ParallelCases+Calculator::IsEven().2.return\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.In.0\ <= \ParallelCases+Calculator::IsEven().2.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Static.ParallelCases+Calculator::IsEven() end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 (#0):
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\;
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject.parameter.In\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\;
    -- Signal connections for System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 (#1):
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\;
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject.parameter.In\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\;
    -- Signal connections for System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 (#2):
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\;
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject.parameter.In\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object) start
    -- Signal connections for System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 (#0):
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject.parameter.In\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\;
    -- Signal connections for System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 (#1):
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject.parameter.In\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.1\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.1\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\;
    -- Signal connections for System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32).0 (#2):
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject.parameter.In\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.2\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.2\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Static.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ArrayUsingCases::PassArrayToConstructor().0._Started\ <= \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\;
    \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Finished.0\ <= \ArrayUsingCases::PassArrayToConstructor().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayToConstructor() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ArrayUsingCases::PassArrayFromMethod().0._Started\ <= \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\;
    \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Finished.0\ <= \ArrayUsingCases::PassArrayFromMethod().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ArrayUsingCases::PassArrayFromMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Finished.0\ <= \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantValuedVariables(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Finished.0\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToMethod(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ConstantsUsingCases::ConstantPassingToObject().0._Started\ <= \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\;
    \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Finished.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ConstantsUsingCases::ConstantPassingToObject() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \LoopCases::BreakInLoop(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Finished.0\ <= \LoopCases::BreakInLoop(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.LoopCases::BreakInLoop(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \LoopCases::BreakInLoopInLoop(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Finished.0\ <= \LoopCases::BreakInLoopInLoop(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.LoopCases::BreakInLoopInLoop(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ObjectUsingCases::NullUsage().0._Started\ <= \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\;
    \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Finished.0\ <= \ObjectUsingCases::NullUsage().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::NullUsage() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ObjectUsingCases::VoidReturn(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Finished.0\ <= \ObjectUsingCases::VoidReturn(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::VoidReturn(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ObjectUsingCases::ReferenceAssignment(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Finished.0\ <= \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ObjectUsingCases::ReferenceAssignment(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().OptionaParametersCases::OmittedOptionalParameters(Int32)._Finished.0\ <= \OptionaParametersCases::OmittedOptionalParameters(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.OptionaParametersCases::OmittedOptionalParameters(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\ <= \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\;
    \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Finished.0\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ParallelCases::ObjectUsingTasks(UInt32).0._Started\ <= \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\;
    \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Finished.0\ <= \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.ParallelCases::ObjectUsingTasks(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \UnaryCases::IncrementDecrement(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Finished.0\ <= \UnaryCases::IncrementDecrement(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Static.UnaryCases::IncrementDecrement(System.Int32) end

end Imp;
