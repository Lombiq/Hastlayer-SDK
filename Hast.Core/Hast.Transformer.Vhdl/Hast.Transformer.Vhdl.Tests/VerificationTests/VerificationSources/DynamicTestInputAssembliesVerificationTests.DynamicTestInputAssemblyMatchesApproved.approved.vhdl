-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)
-- * System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- When put on variables and signals this attribute instructs Vivado not to merge them, thus allowing us to define multi-cycle paths properly.
    attribute dont_touch: string;


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\, 
        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\, 
        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\, 
        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_49\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_42\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_39\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_39\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_72\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_24\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_5\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\: signed(63 downto 0) := to_signed(0, 64);
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._States\ is (
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_0\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_1\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_2\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_3\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_4\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_5\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_6\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_7\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_8\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_9\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_10\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_11\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_12\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_13\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_14\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_15\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_16\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_17\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_18\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_19\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_20\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_21\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_22\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_23\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_24\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_25\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_26\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_27\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_28\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_29\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_30\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_31\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_32\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_33\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_34\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_35\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_36\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_37\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_38\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_39\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_40\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_41\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_42\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_43\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_44\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_45\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_46\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_47\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_48\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_49\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_50\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_51\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_52\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_53\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_54\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_55\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_56\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_57\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_58\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_59\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_60\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_61\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_62\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_63\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_64\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_65\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_66\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_67\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_68\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_69\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_70\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_71\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_72\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_73\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_74\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_75\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_76\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_77\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_78\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_79\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_80\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_81\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_82\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_83\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_84\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_85\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_86\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_87\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_88\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_89\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_90\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_91\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_92\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_93\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_94\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_95\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_96\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_97\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_98\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_99\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_100\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_101\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_102\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_103\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_104\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_105\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_106\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_107\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_108\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_109\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_110\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_111\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_112\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_113\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_114\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_115\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_116\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_117\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_118\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_119\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_120\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_121\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_122\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_123\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_124\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_125\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_126\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_127\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_128\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_129\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_130\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_131\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_132\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_133\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_134\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_135\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_136\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_137\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_138\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_139\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_140\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_141\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_142\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_143\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_144\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_145\, 
        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_146\);
    -- Signals:
    Signal \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Finished\: boolean := false;
    Signal \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \InlinedCases::InlinedMultiReturn(SimpleMemory).0._States\ is (
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_0\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_1\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_2\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_3\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_4\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_5\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_6\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_7\, 
        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_8\);
    -- Signals:
    Signal \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Finished\: boolean := false;
    Signal \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._States\ is (
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_0\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_1\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_2\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_4\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_5\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_6\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_7\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_8\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_9\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_10\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_11\, 
        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_12\);
    -- Signals:
    Signal \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Finished\: boolean := false;
    Signal \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand16\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand18\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand16\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand18\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- byte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, (int)((int)(b) << (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, (int)((int)(b) >> (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand7 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand7\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand8;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand8 = (int)b2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand8\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (int)((int)(b) + (int)(b2)), (int)((int)(b) - (int)(b2)), (int)((int)(b) * (int)(b2)), (int)b / (int)b2, remainderOperand7 - remainderOperand7 / remainderOperand8 * remainderOperand8, (int)((int)(b) & (int)(b2)), (int)((int)(b) | (int)(b2)), (int)((int)(b) ^ (int)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand7\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand8\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand8\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand7\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b3 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, (int)((int)(b) << (int)b3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, (int)((int)(b) >> (int)b3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand9;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand9 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand9\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand10;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand10 = (int)b3;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand10\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (int)((int)(b) + (int)(b3)), (int)((int)(b) - (int)(b3)), (int)((int)(b) * (int)(b3)), (int)b / (int)b3, remainderOperand9 - remainderOperand9 / remainderOperand10 * remainderOperand10, (int)((int)(b) & (int)(b3)), (int)((int)(b) | (int)(b3)), (int)((int)(b) ^ (int)(b3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand9\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand10\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand10\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand9\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, (int)((int)(b) << (int)num2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, (int)((int)(b) >> (int)num2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand11;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand11 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand11\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand12;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand12 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand12\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (int)((int)(b) + (int)(num2)), (int)((int)(b) - (int)(num2)), (int)((int)(b) * (int)(num2)), (int)b / (int)num2, remainderOperand11 - remainderOperand11 / remainderOperand12 * remainderOperand12, (int)((int)(b) & (int)(num2)), (int)((int)(b) | (int)(num2)), (int)((int)(b) ^ (int)(num2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand11\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand12\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand12\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand11\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, (int)((int)(b) << (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, (int)((int)(b) >> (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand13;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand13 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand13\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand14;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand14 = (int)num3;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand14\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (int)((int)(b) + (int)(num3)), (int)((int)(b) - (int)(num3)), (int)((int)(b) * (int)(num3)), (int)b / (int)num3, remainderOperand13 - remainderOperand13 / remainderOperand14 * remainderOperand14, (int)((int)(b) & (int)(num3)), (int)((int)(b) | (int)(num3)), (int)((int)(b) ^ (int)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand13\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand14\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand14\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand13\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, (int)((int)(b) << num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, (int)((int)(b) >> num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand15;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand15 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand15\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, (int)((int)(b) + (int)(num4)), (int)((int)(b) - (int)(num4)), (int)((int)(b) * (int)(num4)), (int)b / num4, remainderOperand15 - remainderOperand15 / num4 * num4, (int)((int)(b) & (int)(num4)), (int)((int)(b) | (int)(num4)), (int)((int)(b) ^ (int)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) + (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) - (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) * (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)) / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand15\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand15\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) and (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) or (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)) xor (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, (int)((int)(b) << (int)num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, (int)((int)(b) >> (int)num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint remainderOperand16;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand16 = (uint)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand16\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, (uint)((uint)(b) + num5), (uint)((uint)(b) - num5), (uint)((uint)(b) * num5), (uint)((uint)(b) / num5), (uint)(remainderOperand16 - remainderOperand16 / num5 * num5), (uint)((uint)(b) & num5), (uint)((uint)(b) | num5), (uint)((uint)(b) ^ num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) + \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand16\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand16\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) and \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) or \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) xor \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, (int)((int)(b) << (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, (int)((int)(b) >> (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand17;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand17 = (long)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand17\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, (long)((long)(b) + num6), (long)((long)(b) - num6), (long)((long)(b) * num6), (long)b / num6, remainderOperand17 - remainderOperand17 / num6 * num6, (long)((long)(b) & num6), (long)((long)(b) | num6), (long)((long)(b) ^ num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64)) + \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64)) - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64)) * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 64)) / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand17\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand17\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64)) and \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64)) or \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64)) xor \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, (int)((int)(b) << (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, (int)((int)(b) >> (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong remainderOperand18;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand18 = (ulong)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand18\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 144, (long)((ulong)(b) + num7), (long)((ulong)(b) - num7), (long)((ulong)(b) * num7), (long)((ulong)(b) / num7), (long)(remainderOperand18 - remainderOperand18 / num7 * num7), (long)((ulong)(b) & num7), (long)((ulong)(b) | num7), (long)((ulong)(b) ^ num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) + \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand18\ / \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ * \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\ := signed(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand18\ - \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) and \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) or \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) xor \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(144, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\);
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand29\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand30\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand31\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand29\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand30\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand31\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- byte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, (int)((int)(b) << (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, (int)((int)(b) >> (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand19;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand19 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand20;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand20 = (int)b2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand20\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (int)((int)(b) + (int)(b2)), (int)((int)(b) - (int)(b2)), (int)((int)(b) * (int)(b2)), (int)b / (int)b2, remainderOperand19 - remainderOperand19 / remainderOperand20 * remainderOperand20, (int)((int)(b) & (int)(b2)), (int)((int)(b) | (int)(b2)), (int)((int)(b) ^ (int)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand19\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand20\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand20\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand19\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b3 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, (int)((int)(b) << (int)b3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, (int)((int)(b) >> (int)b3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand21;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand21 = (int)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand21\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand22;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand22 = (int)(b3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand22\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (int)((int)(b) + (int)(b3)), (int)((int)(b) - (int)(b3)), (int)((int)(b) * (int)(b3)), (int)((int)(b) / (int)(b3)), (int)(remainderOperand21 - remainderOperand21 / remainderOperand22 * remainderOperand22), (int)((int)(b) & (int)(b3)), (int)((int)(b) | (int)(b3)), (int)((int)(b) ^ (int)(b3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand21\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand22\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand22\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand21\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b3\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, (int)((int)(b) << (int)num2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, (int)((int)(b) >> (int)num2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand23;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand23 = (int)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand23\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand24;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand24 = (int)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand24\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (int)((int)(b) + (int)(num2)), (int)((int)(b) - (int)(num2)), (int)((int)(b) * (int)(num2)), (int)((int)(b) / (int)(num2)), (int)(remainderOperand23 - remainderOperand23 / remainderOperand24 * remainderOperand24), (int)((int)(b) & (int)(num2)), (int)((int)(b) | (int)(num2)), (int)((int)(b) ^ (int)(num2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand23\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand24\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand24\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand23\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, (int)((int)(b) << (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, (int)((int)(b) >> (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand25;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand25 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand25\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand26;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand26 = (int)num3;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand26\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (int)((int)(b) + (int)(num3)), (int)((int)(b) - (int)(num3)), (int)((int)(b) * (int)(num3)), (int)b / (int)num3, remainderOperand25 - remainderOperand25 / remainderOperand26 * remainderOperand26, (int)((int)(b) & (int)(num3)), (int)((int)(b) | (int)(num3)), (int)((int)(b) ^ (int)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand25\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand26\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand26\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand25\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, (int)((int)(b) << num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, (int)((int)(b) >> num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand27;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand27 = (int)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand27\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand28;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand28 = (int)(num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand28\ := (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, (int)((int)(b) + (int)(num4)), (int)((int)(b) - (int)(num4)), (int)((int)(b) * (int)(num4)), (int)((int)(b) / (int)(num4)), (int)(remainderOperand27 - remainderOperand27 / remainderOperand28 * remainderOperand28), (int)((int)(b) & (int)(num4)), (int)((int)(b) | (int)(num4)), (int)((int)(b) ^ (int)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) + (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) - (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) * (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) / (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand27\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand28\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand28\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand27\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) and (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) or (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32) xor (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, (int)((int)(b) << (int)num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, (int)((int)(b) >> (int)num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand29 = (long)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand29\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand30;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand30 = (long)num5;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand30\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, (long)((long)(b) + (long)(num5)), (long)((long)(b) - (long)(num5)), (long)((long)(b) * (long)(num5)), (long)b / (long)num5, remainderOperand29 - remainderOperand29 / remainderOperand30 * remainderOperand30, (long)((long)(b) & (long)(num5)), (long)((long)(b) | (long)(num5)), (long)((long)(b) ^ (long)(num5)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 64) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand29\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand30\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand30\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand29\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, (int)((int)(b) << (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, (int)((int)(b) >> (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand31;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand31 = (long)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand31\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, (long)((long)(b) + num6), (long)((long)(b) - num6), (long)((long)(b) * num6), (long)((long)(b) / num6), (long)(remainderOperand31 - remainderOperand31 / num6 * num6), (long)((long)(b) & num6), (long)((long)(b) | num6), (long)((long)(b) ^ num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) + \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand31\ / \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand31\ - \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) and \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) or \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 64) xor \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, (int)((int)(b) << (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, (int)((int)(b) >> (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand42\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand43\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand44\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand42\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand43\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand44\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- short num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, (int)((int)(num2) << (int)b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, (int)((int)(num2) >> (int)b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand32;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand32 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand32\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand33;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand33 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand33\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (int)((int)(num2) + (int)(b)), (int)((int)(num2) - (int)(b)), (int)((int)(num2) * (int)(b)), (int)num2 / (int)b, remainderOperand32 - remainderOperand32 / remainderOperand33 * remainderOperand33, (int)((int)(num2) & (int)(b)), (int)((int)(num2) | (int)(b)), (int)((int)(num2) ^ (int)(b)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand32\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand33\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand33\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand32\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, (int)((int)(num2) << (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, (int)((int)(num2) >> (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand34;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand34 = (int)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand34\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand35;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand35 = (int)(b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand35\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (int)((int)(num2) + (int)(b2)), (int)((int)(num2) - (int)(b2)), (int)((int)(num2) * (int)(b2)), (int)((int)(num2) / (int)(b2)), (int)(remainderOperand34 - remainderOperand34 / remainderOperand35 * remainderOperand35), (int)((int)(num2) & (int)(b2)), (int)((int)(num2) | (int)(b2)), (int)((int)(num2) ^ (int)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand34\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand35\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand35\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand34\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, (int)((int)(num2) << (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, (int)((int)(num2) >> (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand36;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand36 = (int)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand36\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand37;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand37 = (int)(num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand37\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (int)((int)(num2) + (int)(num3)), (int)((int)(num2) - (int)(num3)), (int)((int)(num2) * (int)(num3)), (int)((int)(num2) / (int)(num3)), (int)(remainderOperand36 - remainderOperand36 / remainderOperand37 * remainderOperand37), (int)((int)(num2) & (int)(num3)), (int)((int)(num2) | (int)(num3)), (int)((int)(num2) ^ (int)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand36\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand37\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand37\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand36\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, (int)((int)(num2) << (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, (int)((int)(num2) >> (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand38;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand38 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand38\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand39;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand39 = (int)num4;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand39\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (int)((int)(num2) + (int)(num4)), (int)((int)(num2) - (int)(num4)), (int)((int)(num2) * (int)(num4)), (int)num2 / (int)num4, remainderOperand38 - remainderOperand38 / remainderOperand39 * remainderOperand39, (int)((int)(num2) & (int)(num4)), (int)((int)(num2) | (int)(num4)), (int)((int)(num2) ^ (int)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand38\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand39\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand39\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand38\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, (int)((int)(num2) << num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, (int)((int)(num2) >> num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand40;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand40 = (int)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand40\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand41;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand41 = (int)(num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand41\ := (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, (int)((int)(num2) + (int)(num5)), (int)((int)(num2) - (int)(num5)), (int)((int)(num2) * (int)(num5)), (int)((int)(num2) / (int)(num5)), (int)(remainderOperand40 - remainderOperand40 / remainderOperand41 * remainderOperand41), (int)((int)(num2) & (int)(num5)), (int)((int)(num2) | (int)(num5)), (int)((int)(num2) ^ (int)(num5)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) + (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) - (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) * (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) / (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand40\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand41\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand41\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand40\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) and (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) or (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) xor (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, (int)((int)(num2) << (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, (int)((int)(num2) >> (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand42;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand42 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand42\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand43;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand43 = (long)num6;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand43\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, (long)((long)(num2) + (long)(num6)), (long)((long)(num2) - (long)(num6)), (long)((long)(num2) * (long)(num6)), (long)num2 / (long)num6, remainderOperand42 - remainderOperand42 / remainderOperand43 * remainderOperand43, (long)((long)(num2) & (long)(num6)), (long)((long)(num2) | (long)(num6)), (long)((long)(num2) ^ (long)(num6)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand42\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand43\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand43\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand42\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, (int)((int)(num2) << (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, (int)((int)(num2) >> (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand44;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand44 = (long)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand44\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, (long)((long)(num2) + num7), (long)((long)(num2) - num7), (long)((long)(num2) * num7), (long)((long)(num2) / num7), (long)(remainderOperand44 - remainderOperand44 / num7 * num7), (long)((long)(num2) & num7), (long)((long)(num2) | num7), (long)((long)(num2) ^ num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) + \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand44\ / \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\ => 
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand44\ - \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) and \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) or \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) xor \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num8;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num8 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, (int)((int)(num2) << (int)num8));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := shift_left(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, (int)((int)(num2) >> (int)num8));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := shift_right(SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand54\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand55\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand56\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand54\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand55\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand56\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, (int)((int)(num2) << (int)b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, (int)((int)(num2) >> (int)b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand45;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand45 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand45\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand46;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand46 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand46\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (int)((int)(num2) + (int)(b)), (int)((int)(num2) - (int)(b)), (int)((int)(num2) * (int)(b)), (int)num2 / (int)b, remainderOperand45 - remainderOperand45 / remainderOperand46 * remainderOperand46, (int)((int)(num2) & (int)(b)), (int)((int)(num2) | (int)(b)), (int)((int)(num2) ^ (int)(b)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand45\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand46\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand46\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand45\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, (int)((int)(num2) << (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, (int)((int)(num2) >> (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand47;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand47 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand47\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand48;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand48 = (int)b2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand48\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (int)((int)(num2) + (int)(b2)), (int)((int)(num2) - (int)(b2)), (int)((int)(num2) * (int)(b2)), (int)num2 / (int)b2, remainderOperand47 - remainderOperand47 / remainderOperand48 * remainderOperand48, (int)((int)(num2) & (int)(b2)), (int)((int)(num2) | (int)(b2)), (int)((int)(num2) ^ (int)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand47\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand48\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand48\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand47\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, (int)((int)(num2) << (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, (int)((int)(num2) >> (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand49;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand49 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand49\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand50;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand50 = (int)num3;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand50\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (int)((int)(num2) + (int)(num3)), (int)((int)(num2) - (int)(num3)), (int)((int)(num2) * (int)(num3)), (int)num2 / (int)num3, remainderOperand49 - remainderOperand49 / remainderOperand50 * remainderOperand50, (int)((int)(num2) & (int)(num3)), (int)((int)(num2) | (int)(num3)), (int)((int)(num2) ^ (int)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand49\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand50\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand50\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand49\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, (int)((int)(num2) << (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, (int)((int)(num2) >> (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand51;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand51 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand51\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand52;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand52 = (int)num4;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand52\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (int)((int)(num2) + (int)(num4)), (int)((int)(num2) - (int)(num4)), (int)((int)(num2) * (int)(num4)), (int)num2 / (int)num4, remainderOperand51 - remainderOperand51 / remainderOperand52 * remainderOperand52, (int)((int)(num2) & (int)(num4)), (int)((int)(num2) | (int)(num4)), (int)((int)(num2) ^ (int)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand51\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand52\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand52\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand51\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, (int)((int)(num2) << num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, (int)((int)(num2) >> num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand53;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand53 = (int)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand53\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, (int)((int)(num2) + (int)(num5)), (int)((int)(num2) - (int)(num5)), (int)((int)(num2) * (int)(num5)), (int)num2 / num5, remainderOperand53 - remainderOperand53 / num5 * num5, (int)((int)(num2) & (int)(num5)), (int)((int)(num2) | (int)(num5)), (int)((int)(num2) ^ (int)(num5)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) + (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) - (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) * (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 32)) / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand53\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand53\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) and (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) or (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)) xor (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, (int)((int)(num2) << (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, (int)((int)(num2) >> (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint remainderOperand54;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand54 = (uint)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand54\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, (uint)((uint)(num2) + num6), (uint)((uint)(num2) - num6), (uint)((uint)(num2) * num6), (uint)((uint)(num2) / num6), (uint)(remainderOperand54 - remainderOperand54 / num6 * num6), (uint)((uint)(num2) & num6), (uint)((uint)(num2) | num6), (uint)((uint)(num2) ^ num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) + \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand54\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand54\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) and \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) or \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32) xor \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, (int)((int)(num2) << (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, (int)((int)(num2) >> (int)num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand55;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand55 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand55\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, (long)((long)(num2) + num7), (long)((long)(num2) - num7), (long)((long)(num2) * num7), (long)num2 / num7, remainderOperand55 - remainderOperand55 / num7 * num7, (long)((long)(num2) & num7), (long)((long)(num2) | num7), (long)((long)(num2) ^ num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) + \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64)) / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand55\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand55\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) and \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) or \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) xor \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num8;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num8 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, (int)((int)(num2) << (int)num8));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := shift_left(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, (int)((int)(num2) >> (int)num8));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := shift_right(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong remainderOperand56;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand56 = (ulong)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand56\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 144, (long)((ulong)(num2) + num8), (long)((ulong)(num2) - num8), (long)((ulong)(num2) * num8), (long)((ulong)(num2) / num8), (long)(remainderOperand56 - remainderOperand56 / num8 * num8), (long)((ulong)(num2) & num8), (long)((ulong)(num2) | num8), (long)((ulong)(num2) ^ num8));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) + \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand56\ / \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ * \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\ := signed(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand56\ - \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) and \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) or \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) xor \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(144, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\);
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand62\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand63\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand64\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand65\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand62\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand63\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand64\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand65\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := to_signed(0, 32);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, num2 << (int)b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, num2 >> (int)b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand57;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand57 = (int)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand57\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (int)((int)(num2) + (int)(b)), (int)((int)(num2) - (int)(b)), (int)((int)(num2) * (int)(b)), num2 / (int)b, num2 - num2 / remainderOperand57 * remainderOperand57, (int)((int)(num2) & (int)(b)), (int)((int)(num2) | (int)(b)), (int)((int)(num2) ^ (int)(b)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand57\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand57\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, num2 << (int)b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, num2 >> (int)b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand58;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand58 = (int)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand58\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand59;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand59 = (int)(b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand59\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (int)((int)(num2) + (int)(b2)), (int)((int)(num2) - (int)(b2)), (int)((int)(num2) * (int)(b2)), (int)((int)(num2) / (int)(b2)), (int)(remainderOperand58 - remainderOperand58 / remainderOperand59 * remainderOperand59), (int)((int)(num2) & (int)(b2)), (int)((int)(num2) | (int)(b2)), (int)((int)(num2) ^ (int)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand58\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand59\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand59\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand58\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, num2 << (int)num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, num2 >> (int)num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand60;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand60 = (int)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand60\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\);
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand61;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand61 = (int)(num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand61\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (int)((int)(num2) + (int)(num3)), (int)((int)(num2) - (int)(num3)), (int)((int)(num2) * (int)(num3)), (int)((int)(num2) / (int)(num3)), (int)(remainderOperand60 - remainderOperand60 / remainderOperand61 * remainderOperand61), (int)((int)(num2) & (int)(num3)), (int)((int)(num2) | (int)(num3)), (int)((int)(num2) ^ (int)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand60\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand61\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand61\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand60\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, num2 << (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, num2 >> (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int remainderOperand62;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand62 = (int)num4;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand62\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (int)((int)(num2) + (int)(num4)), (int)((int)(num2) - (int)(num4)), (int)((int)(num2) * (int)(num4)), num2 / (int)num4, num2 - num2 / remainderOperand62 * remainderOperand62, (int)((int)(num2) & (int)(num4)), (int)((int)(num2) | (int)(num4)), (int)((int)(num2) ^ (int)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand62\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand62\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, num2 << num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, num2 >> num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, num2 + num5, num2 - num5, num2 * num5, num2 / num5, num2 - num2 / num5 * num5, num2 & num5, num2 | num5, num2 ^ num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ + \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ and \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ or \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ xor \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num5\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, num2 << (int)num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, num2 >> (int)num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand63;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand63 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand63\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand64;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand64 = (long)num6;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand64\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, (long)((long)(num2) + (long)(num6)), (long)((long)(num2) - (long)(num6)), (long)((long)(num2) * (long)(num6)), (long)num2 / (long)num6, remainderOperand63 - remainderOperand63 / remainderOperand64 * remainderOperand64, (long)((long)(num2) & (long)(num6)), (long)((long)(num2) | (long)(num6)), (long)((long)(num2) ^ (long)(num6)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand63\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand64\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand64\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand63\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, num2 << (int)num7);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, num2 >> (int)num7);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand65;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand65 = (long)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand65\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, (long)((long)(num2) + num7), (long)((long)(num2) - num7), (long)((long)(num2) * num7), (long)((long)(num2) / num7), (long)(remainderOperand65 - remainderOperand65 / num7 * num7), (long)((long)(num2) & num7), (long)((long)(num2) | num7), (long)((long)(num2) ^ num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) + \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand65\ / \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\ => 
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand65\ - \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) and \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) or \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) xor \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num8;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num8 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, num2 << (int)num8);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, num2 >> (int)num8);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand66\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand67\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand68\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand69\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand70\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand71\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand72\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand73\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand75\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand66\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand67\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand68\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand69\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand70\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand71\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand72\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand73\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand75\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadUInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToUInt32(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, num2 << (int)b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, num2 >> (int)b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint remainderOperand66;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand66 = (uint)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand66\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (uint)(num2 + (uint)(b)), (uint)(num2 - (uint)(b)), (uint)(num2 * (uint)(b)), (uint)(num2 / (uint)(b)), (uint)(num2 - num2 / remainderOperand66 * remainderOperand66), (uint)(num2 & (uint)(b)), (uint)(num2 | (uint)(b)), (uint)(num2 ^ (uint)(b)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand66\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand66\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.3\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.5\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.8\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.9\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.10\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.11\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 8));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, num2 << (int)b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.12\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, num2 >> (int)b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.13\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand67;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand67 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand67\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand68;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand68 = (long)b2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand68\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (long)((long)(num2) + (long)(b2)), (long)((long)(num2) - (long)(b2)), (long)((long)(num2) * (long)(b2)), (long)num2 / (long)b2, remainderOperand67 - remainderOperand67 / remainderOperand68 * remainderOperand68, (long)((long)(num2) & (long)(b2)), (long)((long)(num2) | (long)(b2)), (long)((long)(num2) ^ (long)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\, 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand67\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand68\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand68\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand67\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.b2\), 64);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.14\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.15\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.16\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.17\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.20\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.21\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.22\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.23\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, num2 << (int)num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.24\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, num2 >> (int)num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.25\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand69;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand69 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand69\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand70;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand70 = (long)num3;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand70\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (long)((long)(num2) + (long)(num3)), (long)((long)(num2) - (long)(num3)), (long)((long)(num2) * (long)(num3)), (long)num2 / (long)num3, remainderOperand69 - remainderOperand69 / remainderOperand70 * remainderOperand70, (long)((long)(num2) & (long)(num3)), (long)((long)(num2) | (long)(num3)), (long)((long)(num2) ^ (long)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\, 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand69\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand70\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand70\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand69\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num3\), 64);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.26\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.27\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.28\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.29\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.32\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.33\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.34\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.35\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, num2 << (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.36\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, num2 >> (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.37\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint remainderOperand71;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand71 = (uint)(num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand71\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (uint)(num2 + (uint)(num4)), (uint)(num2 - (uint)(num4)), (uint)(num2 * (uint)(num4)), (uint)(num2 / (uint)(num4)), (uint)(num2 - num2 / remainderOperand71 * remainderOperand71), (uint)(num2 & (uint)(num4)), (uint)(num2 | (uint)(num4)), (uint)(num2 ^ (uint)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand71\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand71\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num4\), 32);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.38\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.39\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.40\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.41\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.44\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.45\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.46\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.47\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (int)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\ := signed(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, num2 << num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.48\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, num2 >> num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.49\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand72;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand72 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand72\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand73;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand73 = (long)num5;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand73\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, (long)((long)(num2) + (long)(num5)), (long)((long)(num2) - (long)(num5)), (long)((long)(num2) * (long)(num5)), (long)num2 / (long)num5, remainderOperand72 - remainderOperand72 / remainderOperand73 * remainderOperand73, (long)((long)(num2) & (long)(num5)), (long)((long)(num2) | (long)(num5)), (long)((long)(num2) ^ (long)(num5)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\, 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand72\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand73\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand73\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand72\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num5\), 64);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.50\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.51\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.52\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.53\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.56\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.57\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.58\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.59\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, num2 << (int)num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.60\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, num2 >> (int)num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.61\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, num2 + num6, num2 - num6, num2 * num6, num2 / num6, num2 - num2 / num6 * num6, num2 & num6, num2 | num6, num2 ^ num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ + \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.4208
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ and \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ or \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\ xor \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.62\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.63\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.64\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.65\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.68\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.69\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.70\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.71\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.2772
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, num2 << (int)num7);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.72\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, num2 >> (int)num7);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 32), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.73\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_73\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand74;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand74 = (long)num2;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand74\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, (long)((long)(num2) + num7), (long)((long)(num2) - num7), (long)((long)(num2) * num7), (long)num2 / num7, remainderOperand74 - remainderOperand74 / num7 * num7, (long)((long)(num2) & num7), (long)((long)(num2) | num7), (long)((long)(num2) ^ num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) + \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_74\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_75\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64)) / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_76\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_77\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand74\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_78\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_79\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand74\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) and \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) or \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64)) xor \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num7\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.74\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.75\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.76\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.77\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.80\;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.81\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.82\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.83\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num8;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num8 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, num2 << (int)num8);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5))));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.84\, 64));
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, num2 >> (int)num8);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 32)), 5) and "11111")));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_82\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_83\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.85\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong remainderOperand75;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand75 = (ulong)(num2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand75\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 144, (long)((ulong)(num2) + num8), (long)((ulong)(num2) - num8), (long)((ulong)(num2) * num8), (long)((ulong)(num2) / num8), (long)(remainderOperand75 - remainderOperand75 / num8 * num8), (long)((ulong)(num2) & num8), (long)((ulong)(num2) | num8), (long)((ulong)(num2) ^ num8));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) + \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_85\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_86\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.14\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_87\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_88\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.15\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand75\ / \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_89\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.90\ * \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_90\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\ := signed(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.remainderOperand75\ - \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.91\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) and \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) or \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num2\), 64) xor \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.num8\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(144, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.86\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.87\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.88\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.89\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.92\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.93\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.94\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.95\);
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_91\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.30\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.31\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.32\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.33\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.34\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.35\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.36\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.37\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.38\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.39\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.40\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.41\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.42\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.43\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.44\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.45\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.46\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.47\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.48\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.49\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.31\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.32\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.43\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.44\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.40\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.41\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.42\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.43\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.44\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.45\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.46\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.47\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.48\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.49\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (long)(((long)memory.ReadInt32 (0) << 32) | (long)((uint)memory.ReadInt32 (1)));
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\ := (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\) or signed(SmartResize((unsigned(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\))), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\ := (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- long num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, num2 << (int)b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\, 32)), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7334
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, num2 >> (int)b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\, 32)), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_7\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_8\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand76;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand76 = (long)b;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand76\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (long)(num2 + (long)(b)), (long)(num2 - (long)(b)), (long)(num2 * (long)(b)), num2 / (long)b, num2 - num2 / remainderOperand76 * remainderOperand76, (long)(num2 & (long)(b)), (long)(num2 | (long)(b)), (long)(num2 ^ (long)(b)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_13\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_14\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand76\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_14\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand76\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_16\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, num2 << (int)b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\, 32), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_17\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, num2 >> (int)b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\, 32), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_18\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_19\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_20\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand77;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand77 = (long)(b2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand77\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (long)(num2 + (long)(b2)), (long)(num2 - (long)(b2)), (long)(num2 * (long)(b2)), (long)(num2 / (long)(b2)), (long)(num2 - num2 / remainderOperand77 * remainderOperand77), (long)(num2 & (long)(b2)), (long)(num2 | (long)(b2)), (long)(num2 ^ (long)(b2)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_21\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_24\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_25\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand77\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_25\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand77\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_26\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\), 64);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_27\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, num2 << (int)num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\, 32), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_28\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, num2 >> (int)num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\, 32), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_29\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_30\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_31\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand78;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand78 = (long)(num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand78\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (long)(num2 + (long)(num3)), (long)(num2 - (long)(num3)), (long)(num2 * (long)(num3)), (long)(num2 / (long)(num3)), (long)(num2 - num2 / remainderOperand78 * remainderOperand78), (long)(num2 & (long)(num3)), (long)(num2 | (long)(num3)), (long)(num2 ^ (long)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_32\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_32\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.30\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.31\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.31\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_35\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.32\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_36\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand78\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_36\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.33\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.32\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand78\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_37\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.34\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.33\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.35\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.36\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.37\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\), 64);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.30\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.31\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.34\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.35\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.36\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.37\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_38\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 60, num2 << (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.38\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\, 32)), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(60, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.38\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 62, num2 >> (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.39\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\, 32)), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_40\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_41\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_41\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(62, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.39\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_42\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand79;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand79 = (long)num4;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand79\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 64, (long)(num2 + (long)(num4)), (long)(num2 - (long)(num4)), (long)(num2 * (long)(num4)), num2 / (long)num4, num2 - num2 / remainderOperand79 * remainderOperand79, (long)(num2 & (long)(num4)), (long)(num2 | (long)(num4)), (long)(num2 ^ (long)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.40\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.41\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_43\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_43\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.42\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_44\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.43\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_45\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.43\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_45\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_46\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.44\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_47\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand79\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_47\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.45\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.44\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand79\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_48\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_48\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.46\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.45\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.47\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.48\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.49\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(64, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.40\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.41\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.42\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.46\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.47\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.48\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.49\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_49\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_49\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.30\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.31\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.32\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.33\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.34\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.35\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.36\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.37\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.38\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.39\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.31\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.32\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.30\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.31\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.32\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.33\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.34\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.35\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.36\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.37\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.38\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.39\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (long)(((long)memory.ReadInt32 (0) << 32) | (long)((uint)memory.ReadInt32 (1)));
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\ := (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\) or signed(SmartResize((unsigned(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\))), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\ := (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- long num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (int)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, num2 << num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\, 64), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7334
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 82, num2 >> num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\, 64), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_7\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_8\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(82, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand80;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand80 = (long)(num3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand80\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 84, (long)(num2 + (long)(num3)), (long)(num2 - (long)(num3)), (long)(num2 * (long)(num3)), (long)(num2 / (long)(num3)), (long)(num2 - num2 / remainderOperand80 * remainderOperand80), (long)(num2 & (long)(num3)), (long)(num2 | (long)(num3)), (long)(num2 ^ (long)(num3)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_13\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_14\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand80\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_14\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand80\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\), 64);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(84, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_16\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 100, num2 << (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(100, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_17\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 102, num2 >> (int)num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_18\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_19\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(102, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_20\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long remainderOperand81;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand81 = (long)num4;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand81\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 104, (long)(num2 + (long)(num4)), (long)(num2 - (long)(num4)), (long)(num2 * (long)(num4)), num2 / (long)num4, num2 - num2 / remainderOperand81 * remainderOperand81, (long)(num2 & (long)(num4)), (long)(num2 | (long)(num4)), (long)(num2 ^ (long)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_21\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_22\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_23\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_23\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_24\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_25\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand81\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_25\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand81\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_26\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(104, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_27\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 120, num2 << (int)num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\, 32), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(120, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_28\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 122, num2 >> (int)num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\, 32), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_29\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_30\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(122, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_31\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 124, num2 + num5, num2 - num5, num2 * num5, num2 / num5, num2 - num2 / num5 * num5, num2 & num5, num2 | num5, num2 ^ num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ + \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_32\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_32\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.30\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.31\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.31\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_35\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.32\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_36\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_36\ => 
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.33\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.32\ * \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_37\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.34\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.33\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.35\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ and \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.36\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.37\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ xor \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\;
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(124, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.30\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.34\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.35\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.36\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.37\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_38\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 140, num2 << (int)num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.38\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\, 32)), 6)))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(140, 32);
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.38\;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 142, num2 >> (int)num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.39\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\, 32)), 6) and "111111"))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_40\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_41\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_41\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(142, 32);
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.39\;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_42\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand82\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand83\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand82\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand83\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ulong)(((long)memory.ReadInt32 (0) << 32) | (long)((uint)memory.ReadInt32 (1)));
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.0\) or signed(SmartResize((unsigned(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.dataIn.1\))), 64)));
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\ := (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, (long)(num2 << (int)b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\, 32)), 6))))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.2\);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7334
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, (long)(num2 >> (int)b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\, 32)), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_7\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_8\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.3\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong remainderOperand82;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand82 = (ulong)(b);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand82\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, (long)(num2 + (ulong)(b)), (long)(num2 - (ulong)(b)), (long)(num2 * (ulong)(b)), (long)(num2 / (ulong)(b)), (long)(num2 - num2 / remainderOperand82 * remainderOperand82), (long)(num2 & (ulong)(b)), (long)(num2 | (ulong)(b)), (long)(num2 ^ (ulong)(b)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64)), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_11\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_12\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_12\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_13\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_14\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand82\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_14\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.8\ * \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand82\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_15\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.9\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.4\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.5\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.6\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.7\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.10\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.11\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.12\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.13\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_16\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\, 8));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, (long)(num2 << (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\, 32), 6))))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.14\);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_17\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, (long)(num2 >> (int)b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.b2\, 32), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_18\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_19\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.15\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_20\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\, 16));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, (long)(num2 << (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\, 32), 6))))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_21\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_22\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.16\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 26, (long)(num2 >> (int)num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num3\, 32), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_24\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_25\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(26, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.17\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 28, (long)(num2 << (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\, 32)), 6))))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(28, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.18\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 30, (long)(num2 >> (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\, 32)), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_30\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_31\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(30, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.19\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_32\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong remainderOperand83;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand83 = (ulong)(num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand83\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 32, (long)(num2 + (ulong)(num4)), (long)(num2 - (ulong)(num4)), (long)(num2 * (ulong)(num4)), (long)(num2 / (ulong)(num4)), (long)(num2 - num2 / remainderOperand83 * remainderOperand83), (long)(num2 & (ulong)(num4)), (long)(num2 | (ulong)(num4)), (long)(num2 ^ (ulong)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64)), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_33\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_34\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_35\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_35\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_36\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_37\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand83\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_37\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.24\ * \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.remainderOperand83\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_38\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.25\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.num4\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(32, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.20\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.21\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.22\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.23\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.26\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.27\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.28\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.binaryOperationResult.29\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand84\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\: signed(63 downto 0) := to_signed(0, 64);
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\: Variable is "true";
        attribute dont_touch of \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand84\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\ := to_signed(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ulong)(((long)memory.ReadInt32 (0) << 32) | (long)((uint)memory.ReadInt32 (1)));
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.0\) or signed(SmartResize((unsigned(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.dataIn.1\))), 64)));
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\ := (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (int)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\, 32));
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 48, (long)(num2 << num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\, 64), 6))))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(48, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.2\);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7334
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 50, (long)(num2 >> num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num3\, 64), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_7\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_8\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(50, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.3\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 52, (long)(num2 << (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 6))))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_10\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_11\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(52, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.4\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 54, (long)(num2 >> (int)num4));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_13\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_14\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(54, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.5\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong remainderOperand84;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- remainderOperand84 = (ulong)(num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand84\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 56, (long)(num2 + (ulong)(num4)), (long)(num2 - (ulong)(num4)), (long)(num2 * (ulong)(num4)), (long)(num2 / (ulong)(num4)), (long)(num2 - num2 / remainderOperand84 * remainderOperand84), (long)(num2 & (ulong)(num4)), (long)(num2 | (ulong)(num4)), (long)(num2 ^ (ulong)(num4)));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64)), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_16\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_17\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_18\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_18\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_19\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_20\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand84\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_20\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.10\ * \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.remainderOperand84\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_21\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.11\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num4\), 64));
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(56, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.6\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.7\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.8\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.9\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.12\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.13\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.14\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.15\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_22\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (long)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 72, (long)(num2 << (int)num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\, 32), 6))))), 64);
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(72, 32);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.16\);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 74, (long)(num2 >> (int)num5));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num5\, 32), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_24\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_25\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(74, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.17\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 76, (long)(num2 << (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\ := SmartResize(signed(shift_left(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\, 32)), 6))))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_27\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_28\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(76, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.18\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_29\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 78, (long)(num2 >> (int)num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\ := SmartResize(signed(shift_right(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\, 32)), 6) and "111111")))), 64);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_30\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_31\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(78, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.19\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_32\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 80, (long)(num2 + num6), (long)(num2 - num6), (long)(num2 * num6), (long)(num2 / num6), (long)(num2 - num2 / num6 * num6), (long)(num2 & num6), (long)(num2 | num6), (long)(num2 ^ num6));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ + \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\), 64);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\);
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_33\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\ := SmartResize(signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ * \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_34\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_35\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_35\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_36\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_37\;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ / \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_37\ => 
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.24\ * \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_38\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ - \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.25\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ and \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\ := signed(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num2\ xor \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.num6\);
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\ <= to_signed(80, 32);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.20\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.21\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.22\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.23\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.26\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.27\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.28\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\ <= (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.binaryOperationResult.29\);
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\: \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._States\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num2\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.11\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.12\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.13\: unsigned(63 downto 0) := to_unsigned(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.1\ := (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num2\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num3\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num5\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.10\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.11\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.12\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num7\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.13\ := to_unsigned(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- long num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (long)(((long)memory.ReadInt32 (0) << 32) | (long)((uint)memory.ReadInt32 (1)));
                        -- 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.0\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\ := (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.0\) or signed(SmartResize((unsigned(ConvertStdLogicVectorToInt32(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.dataIn.1\))), 64));
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\ := (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 0, ~(int)(b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.0\ := not(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b\), 32)));
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.0\, 64);
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3182
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 2, (int)b);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_7\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_8\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(2, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b\, 32)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 4, -(int)(b));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.1\ := -signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b\), 32));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_10\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_11\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(4, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.1\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (sbyte)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 6, ~(int)(b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.2\ := not(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1448
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_13\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_14\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(6, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.2\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 8, b2);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(8, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b2\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 10, -(int)(b2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.3\ := -SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.b2\), 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_19\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_20\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(10, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.3\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_21\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (short)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 12, ~(int)(num2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.4\ := not(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1448
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_22\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_23\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(12, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.4\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 14, num2);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_25\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_26\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(14, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num2\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_27\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_27\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 16, -(int)(num2));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.5\ := -SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num2\), 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_28\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_29\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(16, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.5\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_30\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ushort)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num3\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 18, ~(int)(num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.6\ := not(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32)));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1448
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_31\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_32\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(18, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.6\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_33\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 20, (int)num3);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_34\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_34\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_35\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(20, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num3\, 32)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 22, -(int)(num3));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.7\ := -signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num3\), 32));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_37\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_38\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(22, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.7\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_39\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (int)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 24, ~num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.8\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num4\);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1448
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_40\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_41\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_41\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(24, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.8\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 26, num4);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_43\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_43\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_44\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(26, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num4\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_45\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_45\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 28, -num4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.9\ := -\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num4\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_46\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_46\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_47\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(28, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.9\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_48\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (uint)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num5\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\), 32);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 30, ~num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.10\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num5\);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1448
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_49\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_50\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(30, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.10\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_51\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_51\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 32, num5);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_52\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_53\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(32, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num5\, 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_54\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_54\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 34, 0L - (long)num5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 64) - signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num5\, 64));
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_55\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_55\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_56\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_56\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(34, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.binaryOperationResult.2\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_57\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num6\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 36, ~num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.11\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num6\);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_58\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1441
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_58\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_59\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_59\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(36, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.11\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_60\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_60\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 38, num6);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_61\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_61\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_62\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(38, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_63\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_63\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 40, -num6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.12\ := -\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num6\;
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_64\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3603
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_64\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_65\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_65\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(40, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.12\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = (ulong)num;
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num7\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 42, (long)(~num7));
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.13\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_67\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1441
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_67\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_68\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(42, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.unaryOperationResult.13\));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_69\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, 44, (long)num7);
                            -- 
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_70\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_70\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_71\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_71\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(44, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= signed(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.num7\);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_72\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\: \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._States\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.6\ := to_signed(0, 32);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_2\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- this.SaveResult (memory, startCellIndex, number0);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 2, number1);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(2, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_4\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_5\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.0\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 4, number2);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(4, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_7\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_8\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.1\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 6, number3);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(6, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_10\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_11\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.2\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 8, number4);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(8, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_13\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_14\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.3\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_15\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 10, number5);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(10, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.4\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 12, number6);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(12, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_19\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_20\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.5\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_21\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.SaveResult (memory, startCellIndex + 14, number7);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex\ + to_signed(14, 32);
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_22\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_23\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.binaryOperationResult.6\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64)
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\: \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._States\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.DataOut\ <= (others => '0');
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.ReadEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_2\ => 
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteInt32 (startCellIndex, (int)(number >> 32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.0\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                        -- Begin SimpleMemory write.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.CellIndex\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.0\));
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (startCellIndex + 1, (int)number);
                            -- 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex\ + to_signed(1, 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_4\ => 
                        -- Begin SimpleMemory write.
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.CellIndex\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.binaryOperationResult.1\;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ <= true;
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number\, 32));
                        \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State\ := \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\: \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._States\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_0\;
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.2\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\: signed(15 downto 0) := to_signed(0, 16);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\: signed(7 downto 0) := to_signed(0, 8);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Finished\ <= false;
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_0\;
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.0\ := (others => '0');
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\ := to_signed(0, 64);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.1\ := (others => '0');
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.0\ := to_signed(0, 64);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.2\ := (others => '0');
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.1\ := to_signed(0, 64);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := to_unsigned(0, 64);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := to_signed(0, 64);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.4\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.5\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\ := to_unsigned(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.6\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.7\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\ := to_signed(0, 16);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\ := to_unsigned(0, 16);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.10\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\ := to_signed(0, 8);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\ := to_unsigned(0, 8);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
            else 
                case \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ is 
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Started\ = true) then 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Started\ = true) then 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Finished\ <= true;
                        else 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Finished\ <= false;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadInt32 (1);
                        -- 
                        -- Begin SimpleMemory read.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\ := ConvertStdLogicVectorToInt32(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- long num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (long)(((long)memory.ReadInt32 (0) << 32) | (long)((uint)memory.ReadInt32 (1)));
                            -- 
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_4\ => 
                        -- Begin SimpleMemory read.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.0\ := SmartResize(shift_left(SmartResize(ConvertStdLogicVectorToInt32(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.1\), 64), to_integer(unsigned(SmartResize(to_signed(32, 32), 6)))), 64);
                            -- The last SimpleMemory read just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1071
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_6\ => 
                        -- Begin SimpleMemory read.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_7\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.2\ := \DataIn\;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.1\ := (\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.0\) or signed(SmartResize((unsigned(ConvertStdLogicVectorToInt32(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.dataIn.2\))), 64));
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\ := (\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- ulong num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ulong)num2;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (0, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.2\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- Begin SimpleMemory write.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.2\));
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6188
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (1, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_9\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(1, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_10\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (2, (int)num2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_11\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(2, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_12\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (3, (uint)num2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_13\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(3, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_14\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (4, (short)num2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_15\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(4, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\, 16), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_16\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (5, (ushort)num2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_17\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(5, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\), 16), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_18\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (6, (sbyte)num2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_19\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(6, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\, 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_20\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (7, (byte)num2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_21\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(7, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num2\), 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_22\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- long num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (long)num3;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := signed(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (8, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.3\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_23\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(8, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.3\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_24\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (9, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_25\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(9, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_26\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (10, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_27\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(10, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_28\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (11, (uint)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_29\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_29\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(11, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_30\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (12, (short)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_31\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(12, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 16)), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_32\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (13, (ushort)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_33\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(13, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 16), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_34\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (14, (sbyte)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_35\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(14, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 8)), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_36\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (15, (byte)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_37\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(15, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_38\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (16, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.4\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_39\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(16, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.4\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_40\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (17, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_41\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(17, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_42\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ulong)num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := ToUnsignedAndExpand(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (18, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.5\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_43\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_43\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(18, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.5\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_44\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (19, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_45\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_45\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(19, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_46\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (20, (uint)num);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_47\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_47\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(20, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_48\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_48\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (21, (short)num);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_49\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(21, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\, 16), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_50\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (22, (ushort)num);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_51\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_51\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(22, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\), 16), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_52\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_52\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (23, (sbyte)num);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_53\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_53\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(23, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\, 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_54\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_54\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (24, (byte)num);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_55\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_55\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(24, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\), 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_56\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_56\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num5 = (uint)num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\ := unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\);
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num5;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (25, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.6\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_57\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_57\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(25, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.6\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_58\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_58\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (26, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_59\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(26, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_60\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_60\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num5;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (27, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.7\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_61\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_61\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(27, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.7\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_62\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (28, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_63\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_63\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(28, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_64\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (29, (int)num5);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_65\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_65\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(29, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_66\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_66\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (30, (short)num5);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_67\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_67\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(30, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\, 16)), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_68\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (31, (ushort)num5);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_69\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_69\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(31, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\, 16), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_70\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_70\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (32, (sbyte)num5);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_71\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(32, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\, 8)), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_72\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (33, (byte)num5);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_73\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_73\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(33, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num5\, 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_74\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_74\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- short num6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = (short)num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num6;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (34, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.8\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_75\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_75\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(34, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.8\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_76\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_76\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (35, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_77\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_77\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(35, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_78\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_78\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ulong)num6;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := ToUnsignedAndExpand(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (36, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.9\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_79\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_79\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(36, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.9\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_80\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_80\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (37, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_81\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_81\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(37, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_82\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_82\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (38, num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_83\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_83\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(38, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_84\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (39, (uint)num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_85\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_85\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(39, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(ToUnsignedAndExpand(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_86\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_86\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (40, (ushort)num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_87\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_87\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(40, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_88\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_88\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (41, (sbyte)num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_89\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_89\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(41, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_90\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_90\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (42, (byte)num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_91\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_91\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(42, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\), 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_92\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_92\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = (ushort)num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\ := SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = num7;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (43, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.10\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_93\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_93\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(43, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.10\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_94\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_94\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (44, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_95\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_95\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(44, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_96\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_96\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num7;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (45, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.11\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_97\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_97\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(45, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.11\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_98\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_98\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (46, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_99\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_99\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(46, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_100\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_100\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (47, num7);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_101\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_101\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(47, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_102\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_102\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (48, num7);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_103\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_103\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(48, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_104\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_104\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (49, (short)num7);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_105\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_105\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(49, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_106\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_106\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (50, (sbyte)num7);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_107\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_107\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(50, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 8)), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_108\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_108\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (51, (byte)num7);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_109\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_109\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(51, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 8), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_110\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_110\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = (sbyte)num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\, 8);
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = b;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (52, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.12\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_111\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_111\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(52, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.12\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_112\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_112\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (53, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_113\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_113\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(53, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_114\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_114\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ulong)b;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := ToUnsignedAndExpand(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (54, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.13\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_115\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_115\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(54, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.13\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_116\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_116\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (55, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_117\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_117\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(55, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_118\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_118\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (56, b);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_119\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_119\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(56, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_120\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_120\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (57, (uint)b);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_121\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_121\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(57, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(ToUnsignedAndExpand(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_122\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_122\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = b;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (58, num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_123\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_123\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(58, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_124\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_124\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (59, (ushort)b);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_125\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_125\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(59, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(ToUnsignedAndExpand(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\, 16), 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_126\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_126\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (60, (byte)b);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_127\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_127\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(60, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b\), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_128\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_128\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b2 = (byte)num;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\ := SmartResize(unsigned(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num\), 8);
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = b2;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\ := signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\, 64));
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (61, (int)(num4 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.14\ := SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32);
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_129\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_129\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(61, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.14\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_130\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_130\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (62, (int)num4);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_131\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_131\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(62, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num4\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_132\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_132\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = b2;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (63, (int)(num3 >> 32));
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.15\ := signed(SmartResize(shift_right(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, to_integer(unsigned(SmartResize(to_signed(32, 32), 6) and "111111"))), 32));
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_133\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4454
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_133\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(63, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector((\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.binaryOperationResult.15\));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_134\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_134\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (64, (int)num3);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_135\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_135\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(64, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num3\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_136\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_136\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (65, b2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_137\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_137\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(65, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\, 32)));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_138\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_138\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (66, b2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_139\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_139\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(66, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_140\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_140\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num6 = b2;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\ := signed(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\, 16));
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (67, num6);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_141\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_141\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(67, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num6\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_142\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_142\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- num7 = b2;
                            -- 
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\ := SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\, 16);
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (68, num7);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_143\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_143\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(68, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(SmartResize(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.num7\, 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_144\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_144\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteInt32 (69, (sbyte)b2);
                            -- 
                            -- The last SimpleMemory write just finished, so need to start the next one in the next state.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_145\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_145\ => 
                        -- Begin SimpleMemory write.
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(69, 32);
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(SmartResize(signed(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.b2\), 32));
                        \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_146\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_146\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State\ := \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \InlinedCases::InlinedMultiReturn(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\: \InlinedCases::InlinedMultiReturn(SimpleMemory).0._States\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_0\;
        Variable \InlinedCases::InlinedMultiReturn(SimpleMemory).0.input_1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::InlinedMultiReturn(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \InlinedCases::InlinedMultiReturn(SimpleMemory).0.return_1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::InlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Finished\ <= false;
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_0\;
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.input_1\ := to_signed(0, 32);
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.dataIn.0\ := (others => '0');
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.return_1\ := to_signed(0, 32);
                \InlinedCases::InlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\ := false;
            else 
                case \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ is 
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\InlinedCases::InlinedMultiReturn(SimpleMemory).0._Started\ = true) then 
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\InlinedCases::InlinedMultiReturn(SimpleMemory).0._Started\ = true) then 
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Finished\ <= true;
                        else 
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Finished\ <= false;
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturnInternal(System.Int32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int input_1;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- input_1 = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_3\ => 
                        -- State for the label Exit_1.
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteInt32 (0, return_1);
                        -- 
                        -- Begin SimpleMemory write.
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(\InlinedCases::InlinedMultiReturn(SimpleMemory).0.return_1\);
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_4\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0.input_1\ := ConvertStdLogicVectorToInt32(\InlinedCases::InlinedMultiReturn(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int return_1;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (input_1 > 0) {
                            -- 	return_1 = 1;
                            -- 	goto Exit_1;
                            -- }
                            -- 
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0.input_1\ > to_signed(0, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_6\ and ends in state \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_5\.

                            if (\InlinedCases::InlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\) then 
                                \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_6\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_5\ => 
                        -- State after the if-else which was started in state \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_1 = 2;
                        -- 
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.return_1\ := to_signed(2, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- Exit_1:
                        -- // Ending inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturnInternal(System.Int32).
                        -- 
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_6\ => 
                        -- True branch of the if-else started in state \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return_1 = 1;
                        -- 	goto Exit_1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_1 = 1;
                        -- 
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0.return_1\ := to_signed(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- goto Exit_1;
                        -- 
                        \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_7\ => 
                        -- Going to the state after the if-else which was started in state \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_4\.
                        if (\InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ = \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_7\) then 
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_8\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::InlinedMultiReturn(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine start
    \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\: \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._States\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_0\;
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\: boolean := false;
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.1\: boolean := false;
        Variable \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Finished\ <= false;
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_0\;
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_2\ := to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.dataIn.0\ := (others => '0');
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_2\ := to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_5\ := to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_5\ := to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\ := false;
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_6\ := to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_6\ := to_signed(0, 32);
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.1\ := false;
                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.2\ := to_signed(0, 32);
            else 
                case \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ is 
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Started\ = true) then 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Started\ = true) then 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Finished\ <= true;
                        else 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Finished\ <= false;
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturnInternal(System.Int32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int input_2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- input_2 = memory.ReadInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\ => 
                        -- State for the label Exit_5.
                        -- The following section was transformed from the .NET statement below:
                        -- int input_6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- input_6 = input_2;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_6\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_2\;
                        -- The following section was transformed from the .NET statement below:
                        -- int return_6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (input_6 > 0) {
                        -- 	return_6 = 1;
                        -- 	goto Exit_6;
                        -- }
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.1\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_6\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_10\ and ends in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_11\.
                        --     * Execution after either branch will continue in the following state: \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_9\.

                        if (\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.1\) then 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_10\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_4\ => 
                        -- State for the label Exit_6.
                        -- The following section was transformed from the .NET statement below:
                        -- return_2 = return_5 + return_6;
                        -- // Ending inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturnInternal(System.Int32).
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.2\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_5\ + \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_6\;
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_2\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.2\;
                        -- The following section was transformed from the .NET statement below:
                        -- memory.WriteInt32 (0, return_2);
                        -- 
                        -- Begin SimpleMemory write.
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertInt32ToStdLogicVector(\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_2\);
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_5\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_2\ := ConvertStdLogicVectorToInt32(\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- int return_2;
                            -- // Starting inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturnInternal(System.Int32).
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int input_5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- input_5 = input_2;
                            -- 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_5\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_2\;
                            -- The following section was transformed from the .NET statement below:
                            -- int return_5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (input_5 > 0) {
                            -- 	return_5 = 1;
                            -- 	goto Exit_5;
                            -- }
                            -- 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.input_5\ > to_signed(0, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_7\ and ends in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_6\.

                            if (\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.binaryOperationResult.0\) then 
                                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_7\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_6\ => 
                        -- State after the if-else which was started in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_5 = 2;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_5\ := to_signed(2, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- Exit_5:
                        -- // Ending inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturnInternal(System.Int32).
                        -- // Starting inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturnInternal(System.Int32).
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_7\ => 
                        -- True branch of the if-else started in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return_5 = 1;
                        -- 	goto Exit_5;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_5 = 1;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_5\ := to_signed(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- goto Exit_5;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_8\ => 
                        -- Going to the state after the if-else which was started in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_5\.
                        if (\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ = \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_8\) then 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_9\ => 
                        -- State after the if-else which was started in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_6 = 2;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_6\ := to_signed(2, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- Exit_6:
                        -- // Ending inlined block of the method System.Int32 Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturnInternal(System.Int32).
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_10\ => 
                        -- True branch of the if-else started in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return_6 = 1;
                        -- 	goto Exit_6;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_6 = 1;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.return_6\ := to_signed(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- goto Exit_6;
                        -- 
                        \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_11\ => 
                        -- Going to the state after the if-else which was started in state \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_3\.
                        if (\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ = \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_11\) then 
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_12\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State\ := \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 2 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 3 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 4 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 5 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 6 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 7 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 8 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 9 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 10 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 11 => 
                            if (\Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 12 => 
                            if (\Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 13 => 
                            if (\Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64) start
    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningState.0\ := WaitingForStarted;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.number.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).number.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64) start
    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\) then 
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ := 0;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= true;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.startCellIndex.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).startCellIndex.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number0.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number0.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number1.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number1.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number2.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number2.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number3.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number3.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number4.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number4.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number5.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number5.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number6.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number6.parameter.Out.0\;
                            \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0.number7.parameter.In\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).number7.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= true;
                                    \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64).BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SaveResult(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().CastExpressionCases::AllNumberCastingVariations(SimpleMemory)._Finished.0\ <= \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.CastExpressionCases::AllNumberCastingVariations(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().InlinedCases::InlinedMultiReturn(SimpleMemory)._Finished.0\ <= \InlinedCases::InlinedMultiReturn(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.InlinedCases::InlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().InlinedCases::NestedInlinedMultiReturn(SimpleMemory)._Finished.0\ <= \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Dynamic.InlinedCases::NestedInlinedMultiReturn(Hast.Transformer.Abstractions.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.CellIndex\) when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ else to_integer(\CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.CellIndex\) when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\) when \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ or \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ else to_integer(\InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.CellIndex\) when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ or \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.DataOut\ when \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ else \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.DataOut\ when \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ else \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\ when \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ else \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.DataOut\ when \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.ReadEnable\ or \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.ReadEnable\ or \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ or \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.ReadEnable\ or \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \BinaryAndUnaryOperatorExpressionCases::SbyteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::ShortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::UshortBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::IntBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::UintBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::LongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsLow(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::UlongBinaryOperatorExpressionVariationsHigh(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::SaveResult(SimpleMemory,Int32,Int64).0.SimpleMemory.WriteEnable\ or \CastExpressionCases::AllNumberCastingVariations(SimpleMemory).0.SimpleMemory.WriteEnable\ or \InlinedCases::InlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ or \InlinedCases::NestedInlinedMultiReturn(SimpleMemory).0.SimpleMemory.WriteEnable\ or \BinaryAndUnaryOperatorExpressionCases::ByteBinaryOperatorExpressionVariations(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
