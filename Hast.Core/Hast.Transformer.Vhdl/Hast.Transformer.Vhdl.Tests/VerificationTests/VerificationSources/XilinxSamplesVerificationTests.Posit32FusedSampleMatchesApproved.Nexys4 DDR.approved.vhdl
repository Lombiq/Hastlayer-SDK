-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- When put on variables and signals this attribute instructs Vivado not to merge them, thus allowing us to define multi-cycle paths properly.
    attribute dont_touch: string;


    -- Custom inter-dependent type declarations start
    type \Lombiq.Arithmetics.Posit32\ is record 
        \IsNull\: boolean;
        \PositBits\: unsigned(31 downto 0);
    end record;
    type \Lombiq.Arithmetics.Posit32_Array\ is array (integer range <>) of \Lombiq.Arithmetics.Posit32\;
    type \unsigned64_Array\ is array (integer range <>) of unsigned(63 downto 0);
    type \Lombiq.Arithmetics.Quire\ is record 
        \IsNull\: boolean;
        \Size\: unsigned(15 downto 0);
        \SegmentCount\: unsigned(15 downto 0);
        \Segments\: \unsigned64_Array\(0 to 7);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._States\ is (
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_1\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_2\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_3\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_4\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_5\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_6\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_7\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_8\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_9\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_14\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_16\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_20\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_21\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_26\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_27\);
    -- Signals:
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.Out.0\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.In.0\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Finished.0\: boolean := false;
    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(UInt32,Boolean).0._States\ is (
        \Posit32::.ctor(UInt32,Boolean).0._State_0\, 
        \Posit32::.ctor(UInt32,Boolean).0._State_1\, 
        \Posit32::.ctor(UInt32,Boolean).0._State_2\);
    -- Signals:
    Signal \Posit32::.ctor(UInt32,Boolean).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32,Boolean).0._Started\: boolean := false;
    Signal \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\: boolean := false;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(Quire).0._States\ is (
        \Posit32::.ctor(Quire).0._State_0\, 
        \Posit32::.ctor(Quire).0._State_1\, 
        \Posit32::.ctor(Quire).0._State_2\, 
        \Posit32::.ctor(Quire).0._State_3\, 
        \Posit32::.ctor(Quire).0._State_4\, 
        \Posit32::.ctor(Quire).0._State_5\, 
        \Posit32::.ctor(Quire).0._State_6\, 
        \Posit32::.ctor(Quire).0._State_7\, 
        \Posit32::.ctor(Quire).0._State_8\, 
        \Posit32::.ctor(Quire).0._State_9\, 
        \Posit32::.ctor(Quire).0._State_10\, 
        \Posit32::.ctor(Quire).0._State_11\, 
        \Posit32::.ctor(Quire).0._State_12\, 
        \Posit32::.ctor(Quire).0._State_13\, 
        \Posit32::.ctor(Quire).0._State_14\, 
        \Posit32::.ctor(Quire).0._State_15\, 
        \Posit32::.ctor(Quire).0._State_16\, 
        \Posit32::.ctor(Quire).0._State_17\, 
        \Posit32::.ctor(Quire).0._State_18\, 
        \Posit32::.ctor(Quire).0._State_19\, 
        \Posit32::.ctor(Quire).0._State_20\, 
        \Posit32::.ctor(Quire).0._State_21\, 
        \Posit32::.ctor(Quire).0._State_22\, 
        \Posit32::.ctor(Quire).0._State_23\, 
        \Posit32::.ctor(Quire).0._State_24\);
    -- Signals:
    Signal \Posit32::.ctor(Quire).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Quire).0.q.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0._Started\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Quire).0.q.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(UInt32).0._States\ is (
        \Posit32::.ctor(UInt32).0._State_0\, 
        \Posit32::.ctor(UInt32).0._State_1\, 
        \Posit32::.ctor(UInt32).0._State_2\);
    -- Signals:
    Signal \Posit32::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(UInt32).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32).0._Started\: boolean := false;
    Signal \Posit32::.ctor(UInt32).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32).0.value.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(Int32).0._States\ is (
        \Posit32::.ctor(Int32).0._State_0\, 
        \Posit32::.ctor(Int32).0._State_1\, 
        \Posit32::.ctor(Int32).0._State_2\, 
        \Posit32::.ctor(Int32).0._State_3\);
    -- Signals:
    Signal \Posit32::.ctor(Int32).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(Int32).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Int32).0._Started\: boolean := false;
    Signal \Posit32::.ctor(Int32).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\: boolean := false;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 declarations end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 declarations start
    -- State machine states:
    type \Posit32::IsNaN().0._States\ is (
        \Posit32::IsNaN().0._State_0\, 
        \Posit32::IsNaN().0._State_1\, 
        \Posit32::IsNaN().0._State_2\);
    -- Signals:
    Signal \Posit32::IsNaN().0._Finished\: boolean := false;
    Signal \Posit32::IsNaN().0.return\: boolean := false;
    Signal \Posit32::IsNaN().0._Started\: boolean := false;
    Signal \Posit32::IsNaN().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 declarations start
    -- State machine states:
    type \Posit32::EncodeRegimeBits(Int32).0._States\ is (
        \Posit32::EncodeRegimeBits(Int32).0._State_0\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_1\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_2\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_3\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_4\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_5\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_6\, 
        \Posit32::EncodeRegimeBits(Int32).0._State_7\);
    -- Signals:
    Signal \Posit32::EncodeRegimeBits(Int32).0._Finished\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0._Started\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0.regimeKValue.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._States\ is (
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\);
    -- Signals:
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 declarations end


    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 declarations start
    -- State machine states:
    type \Posit32::GetRegimeKValue().0._States\ is (
        \Posit32::GetRegimeKValue().0._State_0\, 
        \Posit32::GetRegimeKValue().0._State_1\, 
        \Posit32::GetRegimeKValue().0._State_2\, 
        \Posit32::GetRegimeKValue().0._State_3\);
    -- Signals:
    Signal \Posit32::GetRegimeKValue().0._Finished\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.return\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0._Started\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 declarations end


    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 declarations start
    -- State machine states:
    type \Posit32::CalculateScaleFactor().0._States\ is (
        \Posit32::CalculateScaleFactor().0._State_0\, 
        \Posit32::CalculateScaleFactor().0._State_1\, 
        \Posit32::CalculateScaleFactor().0._State_2\, 
        \Posit32::CalculateScaleFactor().0._State_3\, 
        \Posit32::CalculateScaleFactor().0._State_4\, 
        \Posit32::CalculateScaleFactor().0._State_5\, 
        \Posit32::CalculateScaleFactor().0._State_6\, 
        \Posit32::CalculateScaleFactor().0._State_7\);
    -- Signals:
    Signal \Posit32::CalculateScaleFactor().0._Finished\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.return\: signed(15 downto 0) := to_signed(0, 16);
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0._Started\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().return.0\: signed(7 downto 0) := to_signed(0, 8);
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\: boolean := false;
    Signal \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 declarations start
    -- State machine states:
    type \Posit32::ExponentSize().0._States\ is (
        \Posit32::ExponentSize().0._State_0\, 
        \Posit32::ExponentSize().0._State_1\, 
        \Posit32::ExponentSize().0._State_2\, 
        \Posit32::ExponentSize().0._State_3\, 
        \Posit32::ExponentSize().0._State_4\, 
        \Posit32::ExponentSize().0._State_5\, 
        \Posit32::ExponentSize().0._State_6\, 
        \Posit32::ExponentSize().0._State_7\, 
        \Posit32::ExponentSize().0._State_8\, 
        \Posit32::ExponentSize().0._State_9\);
    -- Signals:
    Signal \Posit32::ExponentSize().0._Finished\: boolean := false;
    Signal \Posit32::ExponentSize().0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::ExponentSize().0._Started\: boolean := false;
    Signal \Posit32::ExponentSize().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 declarations start
    -- State machine states:
    type \Posit32::GetExponentValue().0._States\ is (
        \Posit32::GetExponentValue().0._State_0\, 
        \Posit32::GetExponentValue().0._State_1\, 
        \Posit32::GetExponentValue().0._State_2\, 
        \Posit32::GetExponentValue().0._State_3\, 
        \Posit32::GetExponentValue().0._State_4\, 
        \Posit32::GetExponentValue().0._State_5\, 
        \Posit32::GetExponentValue().0._State_6\, 
        \Posit32::GetExponentValue().0._State_7\, 
        \Posit32::GetExponentValue().0._State_8\, 
        \Posit32::GetExponentValue().0._State_9\);
    -- Signals:
    Signal \Posit32::GetExponentValue().0._Finished\: boolean := false;
    Signal \Posit32::GetExponentValue().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0._Started\: boolean := false;
    Signal \Posit32::GetExponentValue().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Finished.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::ExponentSize().return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\: boolean := false;
    Signal \Posit32::GetExponentValue().0.Posit32::FractionSize().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 declarations start
    -- State machine states:
    type \Posit32::FractionSize().0._States\ is (
        \Posit32::FractionSize().0._State_0\, 
        \Posit32::FractionSize().0._State_1\, 
        \Posit32::FractionSize().0._State_2\, 
        \Posit32::FractionSize().0._State_3\, 
        \Posit32::FractionSize().0._State_4\, 
        \Posit32::FractionSize().0._State_5\, 
        \Posit32::FractionSize().0._State_6\, 
        \Posit32::FractionSize().0._State_7\);
    -- Signals:
    Signal \Posit32::FractionSize().0._Finished\: boolean := false;
    Signal \Posit32::FractionSize().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\: boolean := false;
    Signal \Posit32::FractionSize().0._Started\: boolean := false;
    Signal \Posit32::FractionSize().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\: boolean := false;
    Signal \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().0 declarations start
    -- State machine states:
    type \Posit32::FractionWithHiddenBit().0._States\ is (
        \Posit32::FractionWithHiddenBit().0._State_0\, 
        \Posit32::FractionWithHiddenBit().0._State_1\, 
        \Posit32::FractionWithHiddenBit().0._State_2\, 
        \Posit32::FractionWithHiddenBit().0._State_3\, 
        \Posit32::FractionWithHiddenBit().0._State_4\, 
        \Posit32::FractionWithHiddenBit().0._State_5\, 
        \Posit32::FractionWithHiddenBit().0._State_6\, 
        \Posit32::FractionWithHiddenBit().0._State_7\, 
        \Posit32::FractionWithHiddenBit().0._State_8\, 
        \Posit32::FractionWithHiddenBit().0._State_9\);
    -- Signals:
    Signal \Posit32::FractionWithHiddenBit().0._Finished\: boolean := false;
    Signal \Posit32::FractionWithHiddenBit().0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBit().0._Started\: boolean := false;
    Signal \Posit32::FractionWithHiddenBit().0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Finished.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::GetMostSignificantOnePosition(UInt32).0._States\ is (
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_1\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_3\, 
        \Posit32::GetMostSignificantOnePosition(UInt32).0._State_4\);
    -- Signals:
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\: boolean := false;
    Signal \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 declarations start
    -- State machine states:
    type \Posit32::SetOne(UInt32,UInt16).0._States\ is (
        \Posit32::SetOne(UInt32,UInt16).0._State_0\, 
        \Posit32::SetOne(UInt32,UInt16).0._State_1\, 
        \Posit32::SetOne(UInt32,UInt16).0._State_2\);
    -- Signals:
    Signal \Posit32::SetOne(UInt32,UInt16).0._Finished\: boolean := false;
    Signal \Posit32::SetOne(UInt32,UInt16).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetOne(UInt32,UInt16).0._Started\: boolean := false;
    Signal \Posit32::SetOne(UInt32,UInt16).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetOne(UInt32,UInt16).0.index.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 declarations start
    -- State machine states:
    type \Posit32::SetZero(UInt32,UInt16).0._States\ is (
        \Posit32::SetZero(UInt32,UInt16).0._State_0\, 
        \Posit32::SetZero(UInt32,UInt16).0._State_1\, 
        \Posit32::SetZero(UInt32,UInt16).0._State_2\);
    -- Signals:
    Signal \Posit32::SetZero(UInt32,UInt16).0._Finished\: boolean := false;
    Signal \Posit32::SetZero(UInt32,UInt16).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetZero(UInt32,UInt16).0._Started\: boolean := false;
    Signal \Posit32::SetZero(UInt32,UInt16).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::SetZero(UInt32,UInt16).0.index.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 declarations end


    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 declarations start
    -- State machine states:
    type \Posit32::LengthOfRunOfBits(UInt32,Byte).0._States\ is (
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_1\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_4\, 
        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\);
    -- Signals:
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\: boolean := false;
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\: unsigned(7 downto 0) := to_unsigned(0, 8);
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\: boolean := false;
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\: unsigned(7 downto 0) := to_unsigned(0, 8);
    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::GetTwosComplement(UInt32).0._States\ is (
        \Posit32::GetTwosComplement(UInt32).0._State_0\, 
        \Posit32::GetTwosComplement(UInt32).0._State_1\, 
        \Posit32::GetTwosComplement(UInt32).0._State_2\);
    -- Signals:
    Signal \Posit32::GetTwosComplement(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::GetTwosComplement(UInt32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::GetTwosComplement(UInt32).0._Started\: boolean := false;
    Signal \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Posit32::FusedSum(Posit32[],Quire).0._States\ is (
        \Posit32::FusedSum(Posit32[],Quire).0._State_0\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_1\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_2\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_3\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_4\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_5\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_6\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_7\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_8\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_9\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_10\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_11\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_12\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_13\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_14\);
    -- Signals:
    Signal \Posit32::FusedSum(Posit32[],Quire).0._Finished\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.Out\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0._Started\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.In\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).return.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN().return.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 declarations start
    -- State machine states:
    type \Quire Posit32::op_Explicit(Posit32).0._States\ is (
        \Quire Posit32::op_Explicit(Posit32).0._State_0\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_1\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_2\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_3\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_4\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_5\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_6\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_7\);
    -- Signals:
    Signal \Quire Posit32::op_Explicit(Posit32).0._Finished\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor().this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0._Started\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize().return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor().return.0\: signed(15 downto 0) := to_signed(0, 16);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 declarations end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 declarations start
    -- State machine states:
    type \Quire::.ctor(UInt64[],UInt16).0._States\ is (
        \Quire::.ctor(UInt64[],UInt16).0._State_0\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_1\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_2\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_3\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_4\);
    -- Signals:
    Signal \Quire::.ctor(UInt64[],UInt16).0._Finished\: boolean := false;
    Signal \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire::.ctor(UInt64[],UInt16).0._Started\: boolean := false;
    Signal \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 declarations end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 declarations start
    -- State machine states:
    type \Quire::.ctor(UInt32,UInt16).0._States\ is (
        \Quire::.ctor(UInt32,UInt16).0._State_0\, 
        \Quire::.ctor(UInt32,UInt16).0._State_1\, 
        \Quire::.ctor(UInt32,UInt16).0._State_2\, 
        \Quire::.ctor(UInt32,UInt16).0._State_3\, 
        \Quire::.ctor(UInt32,UInt16).0._State_4\, 
        \Quire::.ctor(UInt32,UInt16).0._State_5\, 
        \Quire::.ctor(UInt32,UInt16).0._State_6\, 
        \Quire::.ctor(UInt32,UInt16).0._State_7\, 
        \Quire::.ctor(UInt32,UInt16).0._State_8\);
    -- Signals:
    Signal \Quire::.ctor(UInt32,UInt16).0._Finished\: boolean := false;
    Signal \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt32,UInt16).0._Started\: boolean := false;
    Signal \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Quire Quire::op_Addition(Quire,Quire).0._States\ is (
        \Quire Quire::op_Addition(Quire,Quire).0._State_0\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_1\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_2\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_3\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_4\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_5\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_6\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_7\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_8\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_9\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_10\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_11\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_12\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_13\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_14\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_15\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_16\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_17\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_18\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_19\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_20\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_21\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_22\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_23\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_24\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_25\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_26\);
    -- Signals:
    Signal \Quire Quire::op_Addition(Quire,Quire).0._Finished\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,Quire).0._Started\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 declarations start
    -- State machine states:
    type \Quire Quire::op_Addition(Quire,UInt32).0._States\ is (
        \Quire Quire::op_Addition(Quire,UInt32).0._State_0\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_1\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_2\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_3\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_4\);
    -- Signals:
    Signal \Quire Quire::op_Addition(Quire,UInt32).0._Finished\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0._Started\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Quire Quire::op_OnesComplement(Quire).0._States\ is (
        \Quire Quire::op_OnesComplement(Quire).0._State_0\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_1\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_2\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_3\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_4\);
    -- Signals:
    Signal \Quire Quire::op_OnesComplement(Quire).0._Finished\: boolean := false;
    Signal \Quire Quire::op_OnesComplement(Quire).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_OnesComplement(Quire).0._Started\: boolean := false;
    Signal \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Boolean Quire::op_Equality(Quire,Quire).0._States\ is (
        \Boolean Quire::op_Equality(Quire,Quire).0._State_0\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_1\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_2\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_3\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_4\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_5\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_6\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_7\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_8\);
    -- Signals:
    Signal \Boolean Quire::op_Equality(Quire,Quire).0._Finished\: boolean := false;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.return\: boolean := false;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0._Started\: boolean := false;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations start
    -- State machine states:
    type \Quire Quire::op_RightShift(Quire,Int32).0._States\ is (
        \Quire Quire::op_RightShift(Quire,Int32).0._State_0\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_1\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_2\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_3\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_4\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_5\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_6\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_7\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_8\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_9\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_10\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_11\);
    -- Signals:
    Signal \Quire Quire::op_RightShift(Quire,Int32).0._Finished\: boolean := false;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0._Started\: boolean := false;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.right.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations start
    -- State machine states:
    type \Quire Quire::op_LeftShift(Quire,Int32).0._States\ is (
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_1\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_4\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_9\);
    -- Signals:
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\: boolean := false;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0._Started\: boolean := false;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations end


    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \UInt64 Quire::op_Explicit(Quire).0._States\ is (
        \UInt64 Quire::op_Explicit(Quire).0._State_0\, 
        \UInt64 Quire::op_Explicit(Quire).0._State_1\, 
        \UInt64 Quire::op_Explicit(Quire).0._State_2\);
    -- Signals:
    Signal \UInt64 Quire::op_Explicit(Quire).0._Finished\: boolean := false;
    Signal \UInt64 Quire::op_Explicit(Quire).0.return\: unsigned(63 downto 0) := to_unsigned(0, 64);
    Signal \UInt64 Quire::op_Explicit(Quire).0.x.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \UInt64 Quire::op_Explicit(Quire).0._Started\: boolean := false;
    Signal \UInt64 Quire::op_Explicit(Quire).0.x.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \UInt32 Quire::op_Explicit(Quire).0._States\ is (
        \UInt32 Quire::op_Explicit(Quire).0._State_0\, 
        \UInt32 Quire::op_Explicit(Quire).0._State_1\, 
        \UInt32 Quire::op_Explicit(Quire).0._State_2\);
    -- Signals:
    Signal \UInt32 Quire::op_Explicit(Quire).0._Finished\: boolean := false;
    Signal \UInt32 Quire::op_Explicit(Quire).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \UInt32 Quire::op_Explicit(Quire).0.x.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \UInt32 Quire::op_Explicit(Quire).0._Started\: boolean := false;
    Signal \UInt32 Quire::op_Explicit(Quire).0.x.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 state machine start
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\: \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._States\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.1\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\: \Lombiq.Arithmetics.Posit32\;
        attribute dont_touch of \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\: Variable is "true";
        attribute dont_touch of \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\ := (others => '0');
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 64);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 64);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\ := (others => '0');
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
            else 
                case \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ is 
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\ = true) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\ = true) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\ <= true;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadUInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ := ConvertStdLogicVectorToUInt32(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32[] array;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array = new Posit32[160];
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Quire quire;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 object29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- object29 = new Posit32 (0);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\.\IsNull\ := false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\.\PositBits\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- quire = Posit32.op_Explicit (object29);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.0\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).return.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num / 160u;
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_6\ => 
                        -- Waiting for the result to appear in \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(9, 32)) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_7\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ / to_unsigned(160, 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_7\ => 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((long)(num - num / 160u * 160u) != 0L) {
                        -- 	num2 = (uint)((long)(num2) + 1L);
                        -- }
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_8\ => 
                        -- Waiting for the result to appear in \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(9, 32)) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_9\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ / to_unsigned(160, 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_9\ => 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ * to_unsigned(160, 32), 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\ := signed(SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ - \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\, 64));
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\ := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\ and ends in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\.
                        --     * Execution after either branch will continue in the following state: \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\.

                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\ => 
                        -- State after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 0;
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num3) < (long)(num2)) {
                        -- 	int num4;
                        -- 	num4 = 0;
                        -- 	while (num4 < 160) {
                        -- 		Posit32 conditional1;
                        -- 		if (((long)(num3 * 160 + num4) < (long)(num))) {
                        -- 			conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                        -- 		} else {
                        -- 			conditional1 = new Posit32 (0);
                        -- 		}
                        -- 		array [num4] = (conditional1);
                        -- 		num4 = num4 + 1;
                        -- 	}
                        -- 	quire = Posit32.FusedSum (array, quire);
                        -- 	num3 = num3 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\ => 
                        -- True branch of the if-else started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num2 = (uint)((long)(num2) + 1L);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)((long)(num2) + 1L);
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\ := SmartResize(unsigned(signed(SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\), 64)) + to_signed(1, 64)), 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\ := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\);
                        -- Going to the state after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\ => 
                        -- Repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\.
                        -- The while loop's condition:
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\ := SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\), 64) < signed(SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\), 64));
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num4;
                            -- 	num4 = 0;
                            -- 	while (num4 < 160) {
                            -- 		Posit32 conditional1;
                            -- 		if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 			conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- 		} else {
                            -- 			conditional1 = new Posit32 (0);
                            -- 		}
                            -- 		array [num4] = (conditional1);
                            -- 		num4 = num4 + 1;
                            -- 	}
                            -- 	quire = Posit32.FusedSum (array, quire);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = 0;
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num4 < 160) {
                            -- 	Posit32 conditional1;
                            -- 	if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 		conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- 	} else {
                            -- 		conditional1 = new Posit32 (0);
                            -- 	}
                            -- 	array [num4] = (conditional1);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_14\ => 
                        -- State after the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object30;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object30 = new Posit32 (quire);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\.\IsNull\ := false;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire)
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\ => 
                        -- Repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\.
                        -- The while loop's condition:
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ < to_signed(160, 32);
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Posit32 conditional1;
                            -- 	if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 		conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- 	} else {
                            -- 		conditional1 = new Posit32 (0);
                            -- 	}
                            -- 	array [num4] = (conditional1);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 conditional1;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 	conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- } else {
                            -- 	conditional1 = new Posit32 (0);
                            -- }
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ * to_signed(160, 32), 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6961
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_16\ => 
                        -- State after the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- quire = Posit32.FusedSum (array, quire);
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire)
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\ + \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\, 64);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\ := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\) < signed(SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\), 64));

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\ and ends in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\.
                        --     * The false branch starts in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\ and ends in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\.
                        --     * Execution after either branch will continue in the following state: \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\.

                        if ((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\)) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.616
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\ => 
                        -- State after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                        -- The following section was transformed from the .NET statement below:
                        -- array [num4] = (conditional1);
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\(to_integer(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\)) := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\);
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num4 + 1;
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ + to_signed(1, 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\;
                        -- Returning to the repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\ if the loop wasn't exited with a state change.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\ => 
                        -- True branch of the if-else started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\IsNull\ := false;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ * to_signed(160, 32), 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\ := to_signed(1, 32) + \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\ + \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\;
                        -- Begin SimpleMemory read.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_21\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= ConvertStdLogicVectorToUInt32(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- Going to the state after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                            if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\) then 
                                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\ => 
                        -- False branch of the if-else started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional1 = new Posit32 (0);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional1 = new Posit32 (0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\IsNull\ := false;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\;
                            -- Going to the state after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                            if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\) then 
                                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).return.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.In.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.In.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\ if the loop wasn't exited with a state change.
                            if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\) then 
                                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.In.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (0, object30.PositBits);
                            -- 
                            -- Begin SimpleMemory write.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\.\PositBits\);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_27\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 state machine start
    \Posit32::.ctor(UInt32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(UInt32,Boolean).0._State\: \Posit32::.ctor(UInt32,Boolean).0._States\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
        Variable \Posit32::.ctor(UInt32,Boolean).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(UInt32,Boolean).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\: boolean := false;
        Variable \Posit32::.ctor(UInt32,Boolean).0.conditional2\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= false;
                \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
                \Posit32::.ctor(UInt32,Boolean).0.bits\ := to_unsigned(0, 32);
                \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\ := false;
                \Posit32::.ctor(UInt32,Boolean).0.conditional2\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(UInt32,Boolean).0._State\ is 
                    when \Posit32::.ctor(UInt32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(UInt32,Boolean).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(UInt32,Boolean).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= false;
                            \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\ <= \Posit32::.ctor(UInt32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32,Boolean).0._State_2\ => 
                        \Posit32::.ctor(UInt32,Boolean).0.this\ := \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\;
                        \Posit32::.ctor(UInt32,Boolean).0.bits\ := \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\;
                        \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\ := \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional2 = bits;
                        -- 
                        \Posit32::.ctor(UInt32,Boolean).0.conditional2\ := \Posit32::.ctor(UInt32,Boolean).0.bits\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = (conditional2);
                        -- 
                        \Posit32::.ctor(UInt32,Boolean).0.this\.\PositBits\ := (\Posit32::.ctor(UInt32,Boolean).0.conditional2\);
                        \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 state machine start
    \Posit32::.ctor(Quire).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(Quire).0._State\: \Posit32::.ctor(Quire).0._States\ := \Posit32::.ctor(Quire).0._State_0\;
        Variable \Posit32::.ctor(Quire).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(Quire).0.q\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.signBit\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.num2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.return.2\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.3\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.4\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.return.6\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.return.7\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.9\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.return.9\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.return.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(Quire).0._Finished\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= false;
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_0\;
                \Posit32::.ctor(Quire).0.signBit\ := false;
                \Posit32::.ctor(Quire).0.num\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.num2\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.return.1\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.binaryOperationResult.0\ := false;
                \Posit32::.ctor(Quire).0.return.5\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.binaryOperationResult.1\ := false;
                \Posit32::.ctor(Quire).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.return.8\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.num3\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.4\ := false;
                \Posit32::.ctor(Quire).0.num4\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.num5\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.6\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.9\ := false;
                \Posit32::.ctor(Quire).0.binaryOperationResult.10\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.11\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.return.10\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.return.11\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(Quire).0._State\ is 
                    when \Posit32::.ctor(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(Quire).0._Started\ = true) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(Quire).0._Started\ = true) then 
                            \Posit32::.ctor(Quire).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(Quire).0._Finished\ <= false;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(Quire).0.this.parameter.Out\ <= \Posit32::.ctor(Quire).0.this\;
                        \Posit32::.ctor(Quire).0.q.parameter.Out\ <= \Posit32::.ctor(Quire).0.q\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_2\ => 
                        \Posit32::.ctor(Quire).0.this\ := \Posit32::.ctor(Quire).0.this.parameter.In\;
                        \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.q.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 2147483648u;
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::.ctor(Quire).0.this\.\PositBits\ := "10000000000000000000000000000000";
                        -- The following section was transformed from the .NET statement below:
                        -- bool signBit;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- signBit = false;
                        -- 
                        \Posit32::.ctor(Quire).0.signBit\ := false;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 511;
                        -- 
                        \Posit32::.ctor(Quire).0.num\ := to_signed(511, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(448, 32);
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.0\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.0\;
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.1\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.0\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.num2\ := \Posit32::.ctor(Quire).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num2 >= 9223372036854775808uL) {
                            -- 	q = Quire.op_OnesComplement (q);
                            -- 	q = Quire.op_Addition (q, 1u);
                            -- 	signBit = true;
                            -- }
                            -- 
                            -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                            \Posit32::.ctor(Quire).0.binaryOperationResult.0\ := \Posit32::.ctor(Quire).0.num2\ >= "1000000000000000000000000000000000000000000000000000000000000000";

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::.ctor(Quire).0._State_6\ and ends in state \Posit32::.ctor(Quire).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \Posit32::.ctor(Quire).0._State_5\.

                            if (\Posit32::.ctor(Quire).0.binaryOperationResult.0\) then 
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_6\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2999
                    when \Posit32::.ctor(Quire).0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::.ctor(Quire).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(448, 32);
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::.ctor(Quire).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	q = Quire.op_OnesComplement (q);
                        -- 	q = Quire.op_Addition (q, 1u);
                        -- 	signBit = true;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- q = Quire.op_OnesComplement (q);
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.2\ := \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- q = Quire.op_Addition (q, 1u);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32)
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\ <= to_unsigned(1, 32);
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.3\ := \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- signBit = true;
                            -- 
                            \Posit32::.ctor(Quire).0.signBit\ := true;
                            -- Going to the state after the if-else which was started in state \Posit32::.ctor(Quire).0._State_4\.
                            if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_8\) then 
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.4\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.4\;
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.5\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.4\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.num2\ := \Posit32::.ctor(Quire).0.return.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < 9223372036854775808uL) {
                            -- 	q = Quire.op_LeftShift (q, 1);
                            -- 	num = num - 1;
                            -- 	num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_11\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::.ctor(Quire).0._State_10\.
                        -- The while loop's condition:
                        -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Posit32::.ctor(Quire).0.binaryOperationResult.1\ := \Posit32::.ctor(Quire).0.num2\ < "1000000000000000000000000000000000000000000000000000000000000000";
                        if (\Posit32::.ctor(Quire).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	q = Quire.op_LeftShift (q, 1);
                            -- 	num = num - 1;
                            -- 	num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- q = Quire.op_LeftShift (q, 1);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(1, 32);
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_13\;
                        else 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \Posit32::.ctor(Quire).0._State_12\ => 
                        -- State after the while loop which was started in state \Posit32::.ctor(Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num - 240;
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.3\ := \Posit32::.ctor(Quire).0.num\ - to_signed(240, 32);
                        \Posit32::.ctor(Quire).0.num3\ := \Posit32::.ctor(Quire).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num == 0) {
                        -- 	@this.PositBits = 0u;
                        -- 	return;
                        -- }
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.4\ := \Posit32::.ctor(Quire).0.num\ = to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::.ctor(Quire).0._State_17\ and ends in state \Posit32::.ctor(Quire).0._State_17\.
                        --     * Execution after either branch will continue in the following state: \Posit32::.ctor(Quire).0._State_16\.

                        if (\Posit32::.ctor(Quire).0.binaryOperationResult.4\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_17\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5903
                    when \Posit32::.ctor(Quire).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.6\ := \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.return.6\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num - 1;
                            -- 
                            \Posit32::.ctor(Quire).0.binaryOperationResult.2\ := \Posit32::.ctor(Quire).0.num\ - to_signed(1, 32);
                            \Posit32::.ctor(Quire).0.num\ := \Posit32::.ctor(Quire).0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(448, 32);
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::.ctor(Quire).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.7\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.7\;
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.8\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.7\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.num2\ := \Posit32::.ctor(Quire).0.return.8\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::.ctor(Quire).0._State_10\ if the loop wasn't exited with a state change.
                            if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_15\) then 
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_11\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_16\ => 
                        -- State after the if-else which was started in state \Posit32::.ctor(Quire).0._State_12\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num3 / 4;
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.5\ := \Posit32::.ctor(Quire).0.num3\ / to_signed(4, 32);
                        \Posit32::.ctor(Quire).0.num4\ := \Posit32::.ctor(Quire).0.binaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (uint)(num3 - num3 / 4 * 4);
                        -- 
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0.7044
                    when \Posit32::.ctor(Quire).0._State_17\ => 
                        -- True branch of the if-else started in state \Posit32::.ctor(Quire).0._State_12\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	@this.PositBits = 0u;
                        -- 	return;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 0u;
                        -- 
                        \Posit32::.ctor(Quire).0.this\.\PositBits\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- return;
                        -- 
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::.ctor(Quire).0._State_12\.
                        if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_17\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_18\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::.ctor(Quire).0.binaryOperationResult.6\ := \Posit32::.ctor(Quire).0.num3\ / to_signed(4, 32);
                        \Posit32::.ctor(Quire).0.binaryOperationResult.7\ := SmartResize(\Posit32::.ctor(Quire).0.binaryOperationResult.6\ * to_signed(4, 32), 32);
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0.8265
                    when \Posit32::.ctor(Quire).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::.ctor(Quire).0.binaryOperationResult.8\ := unsigned(\Posit32::.ctor(Quire).0.num3\ - \Posit32::.ctor(Quire).0.binaryOperationResult.7\);
                        \Posit32::.ctor(Quire).0.num5\ := (\Posit32::.ctor(Quire).0.binaryOperationResult.8\);
                        -- The following section was transformed from the .NET statement below:
                        -- if ((long)(num5) < 0L) {
                        -- 	num4 = num4 - 1;
                        -- 	num5 = (uint)((long)(num5) + 4L);
                        -- }
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.9\ := signed(SmartResize((\Posit32::.ctor(Quire).0.num5\), 64)) < to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::.ctor(Quire).0._State_21\ and ends in state \Posit32::.ctor(Quire).0._State_21\.
                        --     * Execution after either branch will continue in the following state: \Posit32::.ctor(Quire).0._State_20\.

                        if (\Posit32::.ctor(Quire).0.binaryOperationResult.9\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_21\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.616
                    when \Posit32::.ctor(Quire).0._State_20\ => 
                        -- State after the if-else which was started in state \Posit32::.ctor(Quire).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = Posit32.AssemblePositBitsWithRounding (signBit, num4, num5, Quire.op_Explicit (Quire.op_RightShift (q, 480)));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(480, 32);
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_21\ => 
                        -- True branch of the if-else started in state \Posit32::.ctor(Quire).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num4 = num4 - 1;
                        -- 	num5 = (uint)((long)(num5) + 4L);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num4 - 1;
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.10\ := \Posit32::.ctor(Quire).0.num4\ - to_signed(1, 32);
                        \Posit32::.ctor(Quire).0.num4\ := \Posit32::.ctor(Quire).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (uint)((long)(num5) + 4L);
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.11\ := SmartResize(unsigned(signed(SmartResize((\Posit32::.ctor(Quire).0.num5\), 64)) + to_signed(4, 64)), 32);
                        \Posit32::.ctor(Quire).0.num5\ := (\Posit32::.ctor(Quire).0.binaryOperationResult.11\);
                        -- Going to the state after the if-else which was started in state \Posit32::.ctor(Quire).0._State_19\.
                        if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_21\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7161
                    when \Posit32::.ctor(Quire).0._State_22\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.9\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.9\;
                            \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.10\ := \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.9\ := \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.signBit\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.num4\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.num5\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.10\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                        if (\Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ = \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.11\ := \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\;
                            \Posit32::.ctor(Quire).0.this\.\PositBits\ := \Posit32::.ctor(Quire).0.return.11\;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 state machine start
    \Posit32::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(UInt32).0._State\: \Posit32::.ctor(UInt32).0._States\ := \Posit32::.ctor(UInt32).0._State_0\;
        Variable \Posit32::.ctor(UInt32).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(UInt32).0.value\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(UInt32).0._Finished\ <= false;
                \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_0\;
                \Posit32::.ctor(UInt32).0.value\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(UInt32).0._State\ is 
                    when \Posit32::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(UInt32).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(UInt32).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(UInt32).0._Finished\ <= false;
                            \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(UInt32).0.this.parameter.Out\ <= \Posit32::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32).0._State_2\ => 
                        \Posit32::.ctor(UInt32).0.this\ := \Posit32::.ctor(UInt32).0.this.parameter.In\;
                        \Posit32::.ctor(UInt32).0.value\ := \Posit32::.ctor(UInt32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 0u;
                        -- 
                        \Posit32::.ctor(UInt32).0.this\.\PositBits\ := to_unsigned(0, 32);
                        \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 state machine start
    \Posit32::.ctor(Int32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(Int32).0._State\: \Posit32::.ctor(Int32).0._States\ := \Posit32::.ctor(Int32).0._State_0\;
        Variable \Posit32::.ctor(Int32).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(Int32).0.value\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Int32).0.conditional3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Int32).0.object32\: \Lombiq.Arithmetics.Posit32\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(Int32).0._Finished\ <= false;
                \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_0\;
                \Posit32::.ctor(Int32).0.value\ := to_signed(0, 32);
                \Posit32::.ctor(Int32).0.conditional3\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(Int32).0._State\ is 
                    when \Posit32::.ctor(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(Int32).0._Started\ = true) then 
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(Int32).0._Started\ = true) then 
                            \Posit32::.ctor(Int32).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(Int32).0._Finished\ <= false;
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(Int32).0.this.parameter.Out\ <= \Posit32::.ctor(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_2\ => 
                        \Posit32::.ctor(Int32).0.this\ := \Posit32::.ctor(Int32).0.this.parameter.In\;
                        \Posit32::.ctor(Int32).0.value\ := \Posit32::.ctor(Int32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object32;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object32 = new Posit32 (0u);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::.ctor(Int32).0.object32\.\IsNull\ := false;
                        \Posit32::.ctor(Int32).0.object32\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32)
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\ <= \Posit32::.ctor(Int32).0.object32\;
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\ <= to_unsigned(0, 32);
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= true;
                        \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32)
                        if (\Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ = \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Int32).0.object32\ := \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- conditional3 = 0u;
                            -- 
                            \Posit32::.ctor(Int32).0.conditional3\ := to_unsigned(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- @this.PositBits = 0u;
                            -- 
                            \Posit32::.ctor(Int32).0.this\.\PositBits\ := to_unsigned(0, 32);
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 state machine end


    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 state machine start
    \Posit32::IsNaN().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::IsNaN().0._State\: \Posit32::IsNaN().0._States\ := \Posit32::IsNaN().0._State_0\;
        Variable \Posit32::IsNaN().0.this\: \Lombiq.Arithmetics.Posit32\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::IsNaN().0._Finished\ <= false;
                \Posit32::IsNaN().0.return\ <= false;
                \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_0\;
            else 
                case \Posit32::IsNaN().0._State\ is 
                    when \Posit32::IsNaN().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::IsNaN().0._Started\ = true) then 
                            \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsNaN().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::IsNaN().0._Started\ = true) then 
                            \Posit32::IsNaN().0._Finished\ <= true;
                        else 
                            \Posit32::IsNaN().0._Finished\ <= false;
                            \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::IsNaN().0._State_2\ => 
                        \Posit32::IsNaN().0.this\ := \Posit32::IsNaN().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return false;
                        -- 
                        \Posit32::IsNaN().0.return\ <= false;
                        \Posit32::IsNaN().0._State\ := \Posit32::IsNaN().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 state machine start
    \Posit32::EncodeRegimeBits(Int32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::EncodeRegimeBits(Int32).0._State\: \Posit32::EncodeRegimeBits(Int32).0._States\ := \Posit32::EncodeRegimeBits(Int32).0._State_0\;
        Variable \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::EncodeRegimeBits(Int32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::EncodeRegimeBits(Int32).0._Finished\ <= false;
                \Posit32::EncodeRegimeBits(Int32).0.return\ <= to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_0\;
                \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\ := false;
                \Posit32::EncodeRegimeBits(Int32).0.num\ := to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.return.0\ := to_unsigned(0, 8);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\ := to_unsigned(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\ := to_unsigned(0, 32);
            else 
                case \Posit32::EncodeRegimeBits(Int32).0._State\ is 
                    when \Posit32::EncodeRegimeBits(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::EncodeRegimeBits(Int32).0._Started\ = true) then 
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::EncodeRegimeBits(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::EncodeRegimeBits(Int32).0._Started\ = true) then 
                            \Posit32::EncodeRegimeBits(Int32).0._Finished\ <= true;
                        else 
                            \Posit32::EncodeRegimeBits(Int32).0._Finished\ <= false;
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::EncodeRegimeBits(Int32).0._State_2\ => 
                        \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ := \Posit32::EncodeRegimeBits(Int32).0.regimeKValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (regimeKValue > 0) {
                        -- 	uint num;
                        -- 	num = (uint)((1 << regimeKValue + 1) - 1);
                        -- 	return num << 32 - (int)(Posit32.GetMostSignificantOnePosition (num)) - 1;
                        -- }
                        -- 
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\ := \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::EncodeRegimeBits(Int32).0._State_4\ and ends in state \Posit32::EncodeRegimeBits(Int32).0._State_7\.
                        --     * Execution after either branch will continue in the following state: \Posit32::EncodeRegimeBits(Int32).0._State_3\.

                        if (\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.0\) then 
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::EncodeRegimeBits(Int32).0._State_3\ => 
                        -- State after the if-else which was started in state \Posit32::EncodeRegimeBits(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return 1073741824u >> -regimeKValue;
                        -- 
                        \Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\ := -\Posit32::EncodeRegimeBits(Int32).0.regimeKValue\;
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\ := shift_right(to_unsigned(1073741824, 32), to_integer(unsigned(SmartResize(\Posit32::EncodeRegimeBits(Int32).0.unaryOperationResult.0\, 5) and "11111")));
                        \Posit32::EncodeRegimeBits(Int32).0.return\ <= \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.7\;
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::EncodeRegimeBits(Int32).0._State_4\ => 
                        -- True branch of the if-else started in state \Posit32::EncodeRegimeBits(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint num;
                        -- 	num = (uint)((1 << regimeKValue + 1) - 1);
                        -- 	return num << 32 - (int)(Posit32.GetMostSignificantOnePosition (num)) - 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (uint)((1 << regimeKValue + 1) - 1);
                        -- 
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\ := \Posit32::EncodeRegimeBits(Int32).0.regimeKValue\ + to_signed(1, 32);
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.1\, 5))));
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::EncodeRegimeBits(Int32).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\ := unsigned((\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.2\) - to_signed(1, 32));
                        \Posit32::EncodeRegimeBits(Int32).0.num\ := (\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- return num << 32 - (int)(Posit32.GetMostSignificantOnePosition (num)) - 1;
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= \Posit32::EncodeRegimeBits(Int32).0.num\;
                        \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= true;
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::EncodeRegimeBits(Int32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        if (\Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\) then 
                            \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                            \Posit32::EncodeRegimeBits(Int32).0.return.0\ := \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\;
                            \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\ := to_signed(32, 32) - signed(SmartResize((\Posit32::EncodeRegimeBits(Int32).0.return.0\), 32));
                            \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\ := \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.4\ - to_signed(1, 32);
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32::EncodeRegimeBits(Int32).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\ := shift_left(\Posit32::EncodeRegimeBits(Int32).0.num\, to_integer(unsigned(SmartResize(\Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.5\, 5))));
                        \Posit32::EncodeRegimeBits(Int32).0.return\ <= \Posit32::EncodeRegimeBits(Int32).0.binaryOperationResult.6\;
                        \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::EncodeRegimeBits(Int32).0._State_2\.
                        if (\Posit32::EncodeRegimeBits(Int32).0._State\ = \Posit32::EncodeRegimeBits(Int32).0._State_7\) then 
                            \Posit32::EncodeRegimeBits(Int32).0._State\ := \Posit32::EncodeRegimeBits(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 state machine start
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._States\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\ <= to_unsigned(0, 16);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\ := to_signed(0, 64);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\ := to_unsigned(0, 32);
            else 
                case \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ is 
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ = true) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ = true) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\ => 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Posit32.EncodeRegimeBits (regimeKValue);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte b;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- b = Posit32.LengthOfRunOfBits (num, 31);
                            -- 
                            -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = (int)(28 - (int)(b));
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\ := to_signed(28, 32) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\), 32));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if ((num2 >= 0)) {
                            -- 	conditional4 = (exponentBits << num2);
                            -- } else {
                            -- 	conditional4 = (exponentBits >> -num2);
                            -- }
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ >= to_signed(0, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\.
                            --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.

                            if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\)) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\;
                            else 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num2 < 0) {
                        -- 	uint conditional5;
                        -- 	if ((num2 > 28)) {
                        -- 		conditional5 = (exponentBits >> 32 + num2);
                        -- 	} else {
                        -- 		conditional5 = (exponentBits << 32 + num2);
                        -- 	}
                        -- 	exponentBits = (conditional5);
                        -- 	if (exponentBits < 2147483648u) {
                        -- 		uint conditional6;
                        -- 		if (signBit) {
                        -- 			conditional6 = Posit32.GetTwosComplement (num);
                        -- 		} else {
                        -- 			conditional6 = num;
                        -- 		}
                        -- 		return conditional6;
                        -- 	}
                        -- 	uint conditional7;
                        -- 	if ((exponentBits != 2147483648u)) {
                        -- 		conditional7 = ((uint)((long)(num) + 1L));
                        -- 	} else {
                        -- 		conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 	}
                        -- 	num = (conditional7);
                        -- 	uint conditional8;
                        -- 	if (signBit) {
                        -- 		conditional8 = Posit32.GetTwosComplement (num);
                        -- 	} else {
                        -- 		conditional8 = num;
                        -- 	}
                        -- 	return conditional8;
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional4 = (exponentBits << num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional4 = (exponentBits << num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional4 = (exponentBits >> -num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional4 = (exponentBits >> -num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (int)((int)(Posit32.GetMostSignificantOnePosition (fractionBits)) - 1);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional5;
                        -- 	if ((num2 > 28)) {
                        -- 		conditional5 = (exponentBits >> 32 + num2);
                        -- 	} else {
                        -- 		conditional5 = (exponentBits << 32 + num2);
                        -- 	}
                        -- 	exponentBits = (conditional5);
                        -- 	if (exponentBits < 2147483648u) {
                        -- 		uint conditional6;
                        -- 		if (signBit) {
                        -- 			conditional6 = Posit32.GetTwosComplement (num);
                        -- 		} else {
                        -- 			conditional6 = num;
                        -- 		}
                        -- 		return conditional6;
                        -- 	}
                        -- 	uint conditional7;
                        -- 	if ((exponentBits != 2147483648u)) {
                        -- 		conditional7 = ((uint)((long)(num) + 1L));
                        -- 	} else {
                        -- 		conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 	}
                        -- 	num = (conditional7);
                        -- 	uint conditional8;
                        -- 	if (signBit) {
                        -- 		conditional8 = Posit32.GetTwosComplement (num);
                        -- 	} else {
                        -- 		conditional8 = num;
                        -- 	}
                        -- 	return conditional8;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num2 > 28)) {
                        -- 	conditional5 = (exponentBits >> 32 + num2);
                        -- } else {
                        -- 	conditional5 = (exponentBits << 32 + num2);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ > to_signed(28, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- exponentBits = (conditional5);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (exponentBits < 2147483648u) {
                        -- 	uint conditional6;
                        -- 	if (signBit) {
                        -- 		conditional6 = Posit32.GetTwosComplement (num);
                        -- 	} else {
                        -- 		conditional6 = num;
                        -- 	}
                        -- 	return conditional6;
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ < "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional5 = (exponentBits >> 32 + num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional5 = (exponentBits >> 32 + num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional5 = (exponentBits << 32 + num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional5 = (exponentBits << 32 + num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((exponentBits != 2147483648u)) {
                        -- 	conditional7 = ((uint)((long)(num) + 1L));
                        -- } else {
                        -- 	conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ /= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional6;
                        -- 	if (signBit) {
                        -- 		conditional6 = Posit32.GetTwosComplement (num);
                        -- 	} else {
                        -- 		conditional6 = num;
                        -- 	}
                        -- 	return conditional6;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (signBit) {
                        -- 	conditional6 = Posit32.GetTwosComplement (num);
                        -- } else {
                        -- 	conditional6 = num;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional6;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional6 = Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional6 = Posit32.GetTwosComplement (num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.2\;
                            -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                            if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional6 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional6 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional7);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (signBit) {
                        -- 	conditional8 = Posit32.GetTwosComplement (num);
                        -- } else {
                        -- 	conditional8 = num;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7 = ((uint)((long)(num) + 1L));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7 = ((uint)((long)(num) + 1L));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) and to_signed(1, 64);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5632
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional8;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional8 = Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional8 = Posit32.GetTwosComplement (num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.3\;
                            -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                            if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional8 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional8 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.4\), 32)) - to_signed(1, 32);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\);
                            -- The following section was transformed from the .NET statement below:
                            -- fractionBits = Posit32.SetZero (fractionBits, (ushort)num3);
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16)
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\ <= SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\), 16);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ <= true;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = (int)((int)(28 - num3) - (int)(b));
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ := to_signed(28, 32) - \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\), 32));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\);
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional9;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if ((num4 >= 0)) {
                            -- 	conditional9 = (fractionBits << num4);
                            -- } else {
                            -- 	conditional9 = (fractionBits >> -num4);
                            -- }
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ >= to_signed(0, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\.
                            --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                            --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.

                            if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\)) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\;
                            else 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional9);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 0) {
                        -- 	uint conditional10;
                        -- 	if ((32 + num4 < 0)) {
                        -- 		conditional10 = (fractionBits >> -(32 - num4));
                        -- 	} else {
                        -- 		conditional10 = (fractionBits << 32 + num4);
                        -- 	}
                        -- 	fractionBits = (conditional10);
                        -- 	if (fractionBits >= 2147483648u) {
                        -- 		uint conditional11;
                        -- 		if ((fractionBits != 2147483648u)) {
                        -- 			conditional11 = 1;
                        -- 		} else {
                        -- 			conditional11 = ((uint)((long)(num) & 1L));
                        -- 		}
                        -- 		num = num + (conditional11);
                        -- 	}
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional9 = (fractionBits << num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional9 = (fractionBits << num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional9 = (fractionBits >> -num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional9 = (fractionBits >> -num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (signBit) {
                        -- 	conditional12 = Posit32.GetTwosComplement (num);
                        -- } else {
                        -- 	conditional12 = num;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional10;
                        -- 	if ((32 + num4 < 0)) {
                        -- 		conditional10 = (fractionBits >> -(32 - num4));
                        -- 	} else {
                        -- 		conditional10 = (fractionBits << 32 + num4);
                        -- 	}
                        -- 	fractionBits = (conditional10);
                        -- 	if (fractionBits >= 2147483648u) {
                        -- 		uint conditional11;
                        -- 		if ((fractionBits != 2147483648u)) {
                        -- 			conditional11 = 1;
                        -- 		} else {
                        -- 			conditional11 = ((uint)((long)(num) & 1L));
                        -- 		}
                        -- 		num = num + (conditional11);
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((32 + num4 < 0)) {
                        -- 	conditional10 = (fractionBits >> -(32 - num4));
                        -- } else {
                        -- 	conditional10 = (fractionBits << 32 + num4);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\.
                        -- The following section was transformed from the .NET statement below:
                        -- fractionBits = (conditional10);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (fractionBits >= 2147483648u) {
                        -- 	uint conditional11;
                        -- 	if ((fractionBits != 2147483648u)) {
                        -- 		conditional11 = 1;
                        -- 	} else {
                        -- 		conditional11 = ((uint)((long)(num) & 1L));
                        -- 	}
                        -- 	num = num + (conditional11);
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ >= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional10 = (fractionBits >> -(32 - num4));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional10 = (fractionBits >> -(32 - num4));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\ := to_signed(32, 32) - \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\ := -(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0.6382
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional10 = (fractionBits << 32 + num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional10 = (fractionBits << 32 + num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\.
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional11;
                        -- 	if ((fractionBits != 2147483648u)) {
                        -- 		conditional11 = 1;
                        -- 	} else {
                        -- 		conditional11 = ((uint)((long)(num) & 1L));
                        -- 	}
                        -- 	num = num + (conditional11);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((fractionBits != 2147483648u)) {
                        -- 	conditional11 = 1;
                        -- } else {
                        -- 	conditional11 = ((uint)((long)(num) & 1L));
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ /= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional11);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional11 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional11 = 1;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\ := unsigned(to_signed(1, 32));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional11 = ((uint)((long)(num) & 1L));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional11 = ((uint)((long)(num) & 1L));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) and to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional12;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional12 = Posit32.GetTwosComplement (num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional12 = Posit32.GetTwosComplement (num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= true;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32)
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return.6\;
                            -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                            if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional12 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional12 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 state machine end


    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 state machine start
    \Posit32::GetRegimeKValue().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetRegimeKValue().0._State\: \Posit32::GetRegimeKValue().0._States\ := \Posit32::GetRegimeKValue().0._State_0\;
        Variable \Posit32::GetRegimeKValue().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::GetRegimeKValue().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetRegimeKValue().0.conditional13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetRegimeKValue().0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetRegimeKValue().0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetRegimeKValue().0.conditional14\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::GetRegimeKValue().0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetRegimeKValue().0._Finished\ <= false;
                \Posit32::GetRegimeKValue().0.return\ <= to_signed(0, 8);
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_0\;
                \Posit32::GetRegimeKValue().0.num\ := to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.conditional13\ := to_unsigned(0, 32);
                \Posit32::GetRegimeKValue().0.b\ := to_unsigned(0, 8);
                \Posit32::GetRegimeKValue().0.return.0\ := to_unsigned(0, 8);
                \Posit32::GetRegimeKValue().0.conditional14\ := to_signed(0, 8);
                \Posit32::GetRegimeKValue().0.unaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \Posit32::GetRegimeKValue().0._State\ is 
                    when \Posit32::GetRegimeKValue().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetRegimeKValue().0._Started\ = true) then 
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetRegimeKValue().0._Started\ = true) then 
                            \Posit32::GetRegimeKValue().0._Finished\ <= true;
                        else 
                            \Posit32::GetRegimeKValue().0._Finished\ <= false;
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_2\ => 
                        \Posit32::GetRegimeKValue().0.this\ := \Posit32::GetRegimeKValue().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional13 = 0u;
                        -- 
                        \Posit32::GetRegimeKValue().0.conditional13\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0u;
                        -- 
                        \Posit32::GetRegimeKValue().0.num\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = Posit32.LengthOfRunOfBits (0u, 31);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                        \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetRegimeKValue().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::GetRegimeKValue().0.return.0\ := \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::GetRegimeKValue().0.b\ := \Posit32::GetRegimeKValue().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- sbyte conditional14;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- conditional14 = ((sbyte)(-(int)(b)));
                            -- 
                            \Posit32::GetRegimeKValue().0.unaryOperationResult.0\ := -signed(SmartResize((\Posit32::GetRegimeKValue().0.b\), 32));
                            \Posit32::GetRegimeKValue().0.conditional14\ := (SmartResize((\Posit32::GetRegimeKValue().0.unaryOperationResult.0\), 8));
                            -- The following section was transformed from the .NET statement below:
                            -- return conditional14;
                            -- 
                            \Posit32::GetRegimeKValue().0.return\ <= \Posit32::GetRegimeKValue().0.conditional14\;
                            \Posit32::GetRegimeKValue().0._State\ := \Posit32::GetRegimeKValue().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                end case;
            end if;
        end if;
    end process;
    -- System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0 state machine end


    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 state machine start
    \Posit32::CalculateScaleFactor().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::CalculateScaleFactor().0._State\: \Posit32::CalculateScaleFactor().0._States\ := \Posit32::CalculateScaleFactor().0._State_0\;
        Variable \Posit32::CalculateScaleFactor().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::CalculateScaleFactor().0.regimeKValue\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::CalculateScaleFactor().0.return.0\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Posit32::CalculateScaleFactor().0.conditional15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::CalculateScaleFactor().0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::CalculateScaleFactor().0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::CalculateScaleFactor().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::CalculateScaleFactor().0.binaryOperationResult.2\: signed(15 downto 0) := to_signed(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::CalculateScaleFactor().0._Finished\ <= false;
                \Posit32::CalculateScaleFactor().0.return\ <= to_signed(0, 16);
                \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ <= false;
                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_0\;
                \Posit32::CalculateScaleFactor().0.regimeKValue\ := to_signed(0, 8);
                \Posit32::CalculateScaleFactor().0.return.0\ := to_signed(0, 8);
                \Posit32::CalculateScaleFactor().0.conditional15\ := to_signed(0, 32);
                \Posit32::CalculateScaleFactor().0.binaryOperationResult.0\ := false;
                \Posit32::CalculateScaleFactor().0.binaryOperationResult.1\ := to_signed(0, 64);
                \Posit32::CalculateScaleFactor().0.return.1\ := to_unsigned(0, 32);
                \Posit32::CalculateScaleFactor().0.binaryOperationResult.2\ := to_signed(0, 16);
            else 
                case \Posit32::CalculateScaleFactor().0._State\ is 
                    when \Posit32::CalculateScaleFactor().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::CalculateScaleFactor().0._Started\ = true) then 
                            \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::CalculateScaleFactor().0._Started\ = true) then 
                            \Posit32::CalculateScaleFactor().0._Finished\ <= true;
                        else 
                            \Posit32::CalculateScaleFactor().0._Finished\ <= false;
                            \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_2\ => 
                        \Posit32::CalculateScaleFactor().0.this\ := \Posit32::CalculateScaleFactor().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte regimeKValue;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- regimeKValue = Lombiq.Arithmetics.Posit32.GetRegimeKValue (@this);
                        -- 
                        -- Starting state machine invocation for the following method: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                        \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().this.parameter.Out.0\ <= \Posit32::CalculateScaleFactor().0.this\;
                        \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ <= true;
                        \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue()
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ = \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\) then 
                            \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\ <= false;
                            \Posit32::CalculateScaleFactor().0.return.0\ := \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().return.0\;
                            \Posit32::CalculateScaleFactor().0.regimeKValue\ := \Posit32::CalculateScaleFactor().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int conditional15;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (((int)(regimeKValue) != -31)) {
                            -- 	conditional15 = ((short)((long)((int)(regimeKValue) * 4) + (long)(Lombiq.Arithmetics.Posit32.GetExponentValue (@this))));
                            -- } else {
                            -- 	conditional15 = 0;
                            -- }
                            -- 
                            \Posit32::CalculateScaleFactor().0.binaryOperationResult.0\ := SmartResize((\Posit32::CalculateScaleFactor().0.regimeKValue\), 32) /= to_signed(-31, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::CalculateScaleFactor().0._State_5\ and ends in state \Posit32::CalculateScaleFactor().0._State_6\.
                            --     * The false branch starts in state \Posit32::CalculateScaleFactor().0._State_7\ and ends in state \Posit32::CalculateScaleFactor().0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::CalculateScaleFactor().0._State_4\.

                            if ((\Posit32::CalculateScaleFactor().0.binaryOperationResult.0\)) then 
                                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_5\;
                            else 
                                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_7\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::CalculateScaleFactor().0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::CalculateScaleFactor().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- return (short)(conditional15);
                        -- 
                        \Posit32::CalculateScaleFactor().0.return\ <= SmartResize((\Posit32::CalculateScaleFactor().0.conditional15\), 16);
                        \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::CalculateScaleFactor().0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::CalculateScaleFactor().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional15 = ((short)((long)((int)(regimeKValue) * 4) + (long)(Lombiq.Arithmetics.Posit32.GetExponentValue (@this))));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional15 = ((short)((long)((int)(regimeKValue) * 4) + (long)(Lombiq.Arithmetics.Posit32.GetExponentValue (@this))));
                        -- 
                        \Posit32::CalculateScaleFactor().0.binaryOperationResult.1\ := SmartResize(SmartResize((\Posit32::CalculateScaleFactor().0.regimeKValue\), 32) * to_signed(4, 32), 64);
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                        \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().this.parameter.Out.0\ <= \Posit32::CalculateScaleFactor().0.this\;
                        \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ <= true;
                        \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.1221
                    when \Posit32::CalculateScaleFactor().0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue()
                        if (\Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ = \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\) then 
                            \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\ <= false;
                            \Posit32::CalculateScaleFactor().0.return.1\ := \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().return.0\;
                            \Posit32::CalculateScaleFactor().0.binaryOperationResult.2\ := SmartResize((\Posit32::CalculateScaleFactor().0.binaryOperationResult.1\) + signed(SmartResize((\Posit32::CalculateScaleFactor().0.return.1\), 64)), 16);
                            \Posit32::CalculateScaleFactor().0.conditional15\ := SmartResize(((\Posit32::CalculateScaleFactor().0.binaryOperationResult.2\)), 32);
                            -- Going to the state after the if-else which was started in state \Posit32::CalculateScaleFactor().0._State_3\.
                            if (\Posit32::CalculateScaleFactor().0._State\ = \Posit32::CalculateScaleFactor().0._State_6\) then 
                                \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_4\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32::CalculateScaleFactor().0._State_7\ => 
                        -- False branch of the if-else started in state \Posit32::CalculateScaleFactor().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional15 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional15 = 0;
                        -- 
                        \Posit32::CalculateScaleFactor().0.conditional15\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Posit32::CalculateScaleFactor().0._State_3\.
                        if (\Posit32::CalculateScaleFactor().0._State\ = \Posit32::CalculateScaleFactor().0._State_7\) then 
                            \Posit32::CalculateScaleFactor().0._State\ := \Posit32::CalculateScaleFactor().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 state machine start
    \Posit32::ExponentSize().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::ExponentSize().0._State\: \Posit32::ExponentSize().0._States\ := \Posit32::ExponentSize().0._State_0\;
        Variable \Posit32::ExponentSize().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::ExponentSize().0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::ExponentSize().0.conditional16\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::ExponentSize().0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.result\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.1\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.3\: boolean := false;
        Variable \Posit32::ExponentSize().0.conditional17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32::ExponentSize().0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::ExponentSize().0.binaryOperationResult.8\: unsigned(7 downto 0) := to_unsigned(0, 8);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::ExponentSize().0._Finished\ <= false;
                \Posit32::ExponentSize().0.return\ <= to_unsigned(0, 8);
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_0\;
                \Posit32::ExponentSize().0.bits\ := to_unsigned(0, 32);
                \Posit32::ExponentSize().0.conditional16\ := to_unsigned(0, 32);
                \Posit32::ExponentSize().0.b\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.return.0\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.result\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.1\ := to_unsigned(0, 8);
                \Posit32::ExponentSize().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.3\ := false;
                \Posit32::ExponentSize().0.conditional17\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.4\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.6\ := false;
                \Posit32::ExponentSize().0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::ExponentSize().0.binaryOperationResult.8\ := to_unsigned(0, 8);
            else 
                case \Posit32::ExponentSize().0._State\ is 
                    when \Posit32::ExponentSize().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::ExponentSize().0._Started\ = true) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::ExponentSize().0._Started\ = true) then 
                            \Posit32::ExponentSize().0._Finished\ <= true;
                        else 
                            \Posit32::ExponentSize().0._Finished\ <= false;
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_2\ => 
                        \Posit32::ExponentSize().0.this\ := \Posit32::ExponentSize().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional16;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional16 = 0u;
                        -- 
                        \Posit32::ExponentSize().0.conditional16\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- bits = 0u;
                        -- 
                        \Posit32::ExponentSize().0.bits\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = Posit32.LengthOfRunOfBits (0u, 31);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                        \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::ExponentSize().0.return.0\ := \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::ExponentSize().0.b\ := \Posit32::ExponentSize().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- byte result;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- result = (byte)(32 - (int)(b) - 1);
                            -- 
                            \Posit32::ExponentSize().0.binaryOperationResult.0\ := to_signed(32, 32) - signed(SmartResize((\Posit32::ExponentSize().0.b\), 32));
                            \Posit32::ExponentSize().0.binaryOperationResult.1\ := SmartResize(unsigned(\Posit32::ExponentSize().0.binaryOperationResult.0\ - to_signed(1, 32)), 8);
                            \Posit32::ExponentSize().0.result\ := (\Posit32::ExponentSize().0.binaryOperationResult.1\);
                            -- The following section was transformed from the .NET statement below:
                            -- if ((int)(b) + 2 <= 32) {
                            -- 	int conditional17;
                            -- 	if ((32 - ((int)(b) + 2) > 2)) {
                            -- 		conditional17 = 2;
                            -- 	} else {
                            -- 		conditional17 = ((byte)(32 - ((int)(b) + 2)));
                            -- 	}
                            -- 	result = (byte)(conditional17);
                            -- }
                            -- 
                            \Posit32::ExponentSize().0.binaryOperationResult.2\ := signed(SmartResize((\Posit32::ExponentSize().0.b\), 32)) + to_signed(2, 32);
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Posit32::ExponentSize().0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::ExponentSize().0.binaryOperationResult.3\ := \Posit32::ExponentSize().0.binaryOperationResult.2\ <= to_signed(32, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::ExponentSize().0._State_6\ and ends in state \Posit32::ExponentSize().0._State_7\.
                        --     * Execution after either branch will continue in the following state: \Posit32::ExponentSize().0._State_5\.

                        if (\Posit32::ExponentSize().0.binaryOperationResult.3\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::ExponentSize().0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::ExponentSize().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- return result;
                        -- 
                        \Posit32::ExponentSize().0.return\ <= \Posit32::ExponentSize().0.result\;
                        \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::ExponentSize().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int conditional17;
                        -- 	if ((32 - ((int)(b) + 2) > 2)) {
                        -- 		conditional17 = 2;
                        -- 	} else {
                        -- 		conditional17 = ((byte)(32 - ((int)(b) + 2)));
                        -- 	}
                        -- 	result = (byte)(conditional17);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional17;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((32 - ((int)(b) + 2) > 2)) {
                        -- 	conditional17 = 2;
                        -- } else {
                        -- 	conditional17 = ((byte)(32 - ((int)(b) + 2)));
                        -- }
                        -- 
                        \Posit32::ExponentSize().0.binaryOperationResult.4\ := signed(SmartResize((\Posit32::ExponentSize().0.b\), 32)) + to_signed(2, 32);
                        \Posit32::ExponentSize().0.binaryOperationResult.5\ := to_signed(32, 32) - (\Posit32::ExponentSize().0.binaryOperationResult.4\);
                        \Posit32::ExponentSize().0.binaryOperationResult.6\ := \Posit32::ExponentSize().0.binaryOperationResult.5\ > to_signed(2, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::ExponentSize().0._State_8\ and ends in state \Posit32::ExponentSize().0._State_8\.
                        --     * The false branch starts in state \Posit32::ExponentSize().0._State_9\ and ends in state \Posit32::ExponentSize().0._State_9\.
                        --     * Execution after either branch will continue in the following state: \Posit32::ExponentSize().0._State_7\.

                        if ((\Posit32::ExponentSize().0.binaryOperationResult.6\)) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_8\;
                        else 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \Posit32::ExponentSize().0._State_7\ => 
                        -- State after the if-else which was started in state \Posit32::ExponentSize().0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- result = (byte)(conditional17);
                        -- 
                        \Posit32::ExponentSize().0.result\ := SmartResize(unsigned((\Posit32::ExponentSize().0.conditional17\)), 8);
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_4\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_7\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_8\ => 
                        -- True branch of the if-else started in state \Posit32::ExponentSize().0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional17 = 2;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional17 = 2;
                        -- 
                        \Posit32::ExponentSize().0.conditional17\ := to_signed(2, 32);
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_6\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_8\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::ExponentSize().0._State_9\ => 
                        -- False branch of the if-else started in state \Posit32::ExponentSize().0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional17 = ((byte)(32 - ((int)(b) + 2)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional17 = ((byte)(32 - ((int)(b) + 2)));
                        -- 
                        \Posit32::ExponentSize().0.binaryOperationResult.7\ := signed(SmartResize((\Posit32::ExponentSize().0.b\), 32)) + to_signed(2, 32);
                        \Posit32::ExponentSize().0.binaryOperationResult.8\ := SmartResize(unsigned(to_signed(32, 32) - (\Posit32::ExponentSize().0.binaryOperationResult.7\)), 8);
                        \Posit32::ExponentSize().0.conditional17\ := signed(SmartResize(((\Posit32::ExponentSize().0.binaryOperationResult.8\)), 32));
                        -- Going to the state after the if-else which was started in state \Posit32::ExponentSize().0._State_6\.
                        if (\Posit32::ExponentSize().0._State\ = \Posit32::ExponentSize().0._State_9\) then 
                            \Posit32::ExponentSize().0._State\ := \Posit32::ExponentSize().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 state machine start
    \Posit32::GetExponentValue().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetExponentValue().0._State\: \Posit32::GetExponentValue().0._States\ := \Posit32::GetExponentValue().0._State_0\;
        Variable \Posit32::GetExponentValue().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::GetExponentValue().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.conditional18\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetExponentValue().0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetExponentValue().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.conditional19\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetExponentValue().0.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetExponentValue().0._Finished\ <= false;
                \Posit32::GetExponentValue().0.return\ <= to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ <= false;
                \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ <= false;
                \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_0\;
                \Posit32::GetExponentValue().0.num\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.conditional18\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.b\ := to_unsigned(0, 8);
                \Posit32::GetExponentValue().0.return.0\ := to_unsigned(0, 8);
                \Posit32::GetExponentValue().0.return.1\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.conditional19\ := to_unsigned(0, 32);
                \Posit32::GetExponentValue().0.binaryOperationResult.4\ := false;
            else 
                case \Posit32::GetExponentValue().0._State\ is 
                    when \Posit32::GetExponentValue().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetExponentValue().0._Started\ = true) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetExponentValue().0._Started\ = true) then 
                            \Posit32::GetExponentValue().0._Finished\ <= true;
                        else 
                            \Posit32::GetExponentValue().0._Finished\ <= false;
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_2\ => 
                        \Posit32::GetExponentValue().0.this\ := \Posit32::GetExponentValue().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional18;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional18 = 0u;
                        -- 
                        \Posit32::GetExponentValue().0.conditional18\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0u;
                        -- 
                        \Posit32::GetExponentValue().0.num\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = Lombiq.Arithmetics.Posit32.ExponentSize (@this);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::ExponentSize()
                        \Posit32::GetExponentValue().0.Posit32::ExponentSize().this.parameter.Out.0\ <= \Posit32::GetExponentValue().0.this\;
                        \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ <= true;
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::ExponentSize()
                        if (\Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ = \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Finished.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\ <= false;
                            \Posit32::GetExponentValue().0.return.0\ := \Posit32::GetExponentValue().0.Posit32::ExponentSize().return.0\;
                            \Posit32::GetExponentValue().0.b\ := \Posit32::GetExponentValue().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = 0u >> (int)Lombiq.Arithmetics.Posit32.FractionSize (@this) << 32 - (int)(b) >> 30;
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                            \Posit32::GetExponentValue().0.Posit32::FractionSize().this.parameter.Out.0\ <= \Posit32::GetExponentValue().0.this\;
                            \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ <= true;
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                        if (\Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ = \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ <= false;
                            \Posit32::GetExponentValue().0.return.1\ := \Posit32::GetExponentValue().0.Posit32::FractionSize().return.0\;
                            \Posit32::GetExponentValue().0.binaryOperationResult.0\ := shift_right(to_unsigned(0, 32), to_integer(unsigned(SmartResize(signed(\Posit32::GetExponentValue().0.return.1\), 5) and "11111")));
                            \Posit32::GetExponentValue().0.binaryOperationResult.1\ := to_signed(32, 32) - signed(SmartResize((\Posit32::GetExponentValue().0.b\), 32));
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \Posit32::GetExponentValue().0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::GetExponentValue().0.binaryOperationResult.2\ := shift_left(\Posit32::GetExponentValue().0.binaryOperationResult.0\, to_integer(unsigned(SmartResize(\Posit32::GetExponentValue().0.binaryOperationResult.1\, 5))));
                        \Posit32::GetExponentValue().0.binaryOperationResult.3\ := shift_right(\Posit32::GetExponentValue().0.binaryOperationResult.2\, to_integer(unsigned(SmartResize(to_signed(30, 32), 5) and "11111")));
                        \Posit32::GetExponentValue().0.num\ := \Posit32::GetExponentValue().0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional19;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((int)(b) != 0)) {
                        -- 	conditional19 = num;
                        -- } else {
                        -- 	conditional19 = 0u;
                        -- }
                        -- 
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.9522
                    when \Posit32::GetExponentValue().0._State_6\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::GetExponentValue().0.binaryOperationResult.4\ := signed(SmartResize((\Posit32::GetExponentValue().0.b\), 32)) /= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::GetExponentValue().0._State_8\ and ends in state \Posit32::GetExponentValue().0._State_8\.
                        --     * The false branch starts in state \Posit32::GetExponentValue().0._State_9\ and ends in state \Posit32::GetExponentValue().0._State_9\.
                        --     * Execution after either branch will continue in the following state: \Posit32::GetExponentValue().0._State_7\.

                        if ((\Posit32::GetExponentValue().0.binaryOperationResult.4\)) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_8\;
                        else 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::GetExponentValue().0._State_7\ => 
                        -- State after the if-else which was started in state \Posit32::GetExponentValue().0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional19;
                        -- 
                        \Posit32::GetExponentValue().0.return\ <= \Posit32::GetExponentValue().0.conditional19\;
                        \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_8\ => 
                        -- True branch of the if-else started in state \Posit32::GetExponentValue().0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional19 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional19 = num;
                        -- 
                        \Posit32::GetExponentValue().0.conditional19\ := \Posit32::GetExponentValue().0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::GetExponentValue().0._State_6\.
                        if (\Posit32::GetExponentValue().0._State\ = \Posit32::GetExponentValue().0._State_8\) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetExponentValue().0._State_9\ => 
                        -- False branch of the if-else started in state \Posit32::GetExponentValue().0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional19 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional19 = 0u;
                        -- 
                        \Posit32::GetExponentValue().0.conditional19\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \Posit32::GetExponentValue().0._State_6\.
                        if (\Posit32::GetExponentValue().0._State\ = \Posit32::GetExponentValue().0._State_9\) then 
                            \Posit32::GetExponentValue().0._State\ := \Posit32::GetExponentValue().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 state machine start
    \Posit32::FractionSize().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FractionSize().0._State\: \Posit32::FractionSize().0._States\ := \Posit32::FractionSize().0._State_0\;
        Variable \Posit32::FractionSize().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::FractionSize().0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionSize().0.conditional20\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionSize().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.return.0\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::FractionSize().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionSize().0.conditional21\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionSize().0.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FractionSize().0._Finished\ <= false;
                \Posit32::FractionSize().0.return\ <= to_unsigned(0, 32);
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= to_unsigned(0, 8);
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_0\;
                \Posit32::FractionSize().0.bits\ := to_unsigned(0, 32);
                \Posit32::FractionSize().0.conditional20\ := to_unsigned(0, 32);
                \Posit32::FractionSize().0.num\ := to_signed(0, 32);
                \Posit32::FractionSize().0.return.0\ := to_unsigned(0, 8);
                \Posit32::FractionSize().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::FractionSize().0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::FractionSize().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::FractionSize().0.conditional21\ := to_unsigned(0, 32);
                \Posit32::FractionSize().0.binaryOperationResult.3\ := false;
            else 
                case \Posit32::FractionSize().0._State\ is 
                    when \Posit32::FractionSize().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FractionSize().0._Started\ = true) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FractionSize().0._Started\ = true) then 
                            \Posit32::FractionSize().0._Finished\ <= true;
                        else 
                            \Posit32::FractionSize().0._Finished\ <= false;
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_2\ => 
                        \Posit32::FractionSize().0.this\ := \Posit32::FractionSize().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional20;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20 = 0u;
                        -- 
                        \Posit32::FractionSize().0.conditional20\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- bits = 0u;
                        -- 
                        \Posit32::FractionSize().0.bits\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 32 - ((int)(Posit32.LengthOfRunOfBits (0u, 31)) + 2 + 2);
                        -- 
                        -- Starting state machine invocation for the following method: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                        \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\ <= SmartResize(unsigned(to_signed(31, 32)), 8);
                        \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= true;
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte)
                        if (\Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\) then 
                            \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ <= false;
                            \Posit32::FractionSize().0.return.0\ := \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\;
                            \Posit32::FractionSize().0.binaryOperationResult.0\ := signed(SmartResize((\Posit32::FractionSize().0.return.0\), 32)) + to_signed(2, 32);
                            \Posit32::FractionSize().0.binaryOperationResult.1\ := SmartResize(\Posit32::FractionSize().0.binaryOperationResult.0\ + to_signed(2, 32), 32);
                            \Posit32::FractionSize().0.binaryOperationResult.2\ := to_signed(32, 32) - (\Posit32::FractionSize().0.binaryOperationResult.1\);
                            \Posit32::FractionSize().0.num\ := \Posit32::FractionSize().0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional21;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if ((num > 0)) {
                            -- 	conditional21 = ((uint)num);
                            -- } else {
                            -- 	conditional21 = 0u;
                            -- }
                            -- 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Posit32::FractionSize().0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionSize().0.binaryOperationResult.3\ := \Posit32::FractionSize().0.num\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::FractionSize().0._State_6\ and ends in state \Posit32::FractionSize().0._State_6\.
                        --     * The false branch starts in state \Posit32::FractionSize().0._State_7\ and ends in state \Posit32::FractionSize().0._State_7\.
                        --     * Execution after either branch will continue in the following state: \Posit32::FractionSize().0._State_5\.

                        if ((\Posit32::FractionSize().0.binaryOperationResult.3\)) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_6\;
                        else 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::FractionSize().0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::FractionSize().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional21;
                        -- 
                        \Posit32::FractionSize().0.return\ <= \Posit32::FractionSize().0.conditional21\;
                        \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::FractionSize().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21 = ((uint)num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21 = ((uint)num);
                        -- 
                        \Posit32::FractionSize().0.conditional21\ := (unsigned(\Posit32::FractionSize().0.num\));
                        -- Going to the state after the if-else which was started in state \Posit32::FractionSize().0._State_4\.
                        if (\Posit32::FractionSize().0._State\ = \Posit32::FractionSize().0._State_6\) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionSize().0._State_7\ => 
                        -- False branch of the if-else started in state \Posit32::FractionSize().0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21 = 0u;
                        -- 
                        \Posit32::FractionSize().0.conditional21\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \Posit32::FractionSize().0._State_4\.
                        if (\Posit32::FractionSize().0._State\ = \Posit32::FractionSize().0._State_7\) then 
                            \Posit32::FractionSize().0._State\ := \Posit32::FractionSize().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().0 state machine start
    \Posit32::FractionWithHiddenBit().0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FractionWithHiddenBit().0._State\: \Posit32::FractionWithHiddenBit().0._States\ := \Posit32::FractionWithHiddenBit().0._State_0\;
        Variable \Posit32::FractionWithHiddenBit().0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::FractionWithHiddenBit().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.conditional22\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.conditional23\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::FractionWithHiddenBit().0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32::FractionWithHiddenBit().0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FractionWithHiddenBit().0._Finished\ <= false;
                \Posit32::FractionWithHiddenBit().0.return\ <= to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\ <= false;
                \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\ <= to_unsigned(0, 16);
                \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ <= false;
                \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_0\;
                \Posit32::FractionWithHiddenBit().0.num\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.return.0\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.num2\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.conditional22\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.bits\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::FractionWithHiddenBit().0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::FractionWithHiddenBit().0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.conditional23\ := to_unsigned(0, 32);
                \Posit32::FractionWithHiddenBit().0.binaryOperationResult.4\ := false;
                \Posit32::FractionWithHiddenBit().0.return.1\ := to_unsigned(0, 32);
            else 
                case \Posit32::FractionWithHiddenBit().0._State\ is 
                    when \Posit32::FractionWithHiddenBit().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FractionWithHiddenBit().0._Started\ = true) then 
                            \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBit().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FractionWithHiddenBit().0._Started\ = true) then 
                            \Posit32::FractionWithHiddenBit().0._Finished\ <= true;
                        else 
                            \Posit32::FractionWithHiddenBit().0._Finished\ <= false;
                            \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBit().0._State_2\ => 
                        \Posit32::FractionWithHiddenBit().0.this\ := \Posit32::FractionWithHiddenBit().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = Lombiq.Arithmetics.Posit32.FractionSize (@this);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                        \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize().this.parameter.Out.0\ <= \Posit32::FractionWithHiddenBit().0.this\;
                        \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\ <= true;
                        \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBit().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                        if (\Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\ = \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Finished.0\) then 
                            \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\ <= false;
                            \Posit32::FractionWithHiddenBit().0.return.0\ := \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize().return.0\;
                            \Posit32::FractionWithHiddenBit().0.num\ := \Posit32::FractionWithHiddenBit().0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional22;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- conditional22 = 0u;
                            -- 
                            \Posit32::FractionWithHiddenBit().0.conditional22\ := to_unsigned(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0u;
                            -- 
                            \Posit32::FractionWithHiddenBit().0.num2\ := to_unsigned(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint bits;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = 0u << (int)(32L - (long)(num)) >> (int)(32L - (long)(num));
                            -- 
                            \Posit32::FractionWithHiddenBit().0.binaryOperationResult.0\ := SmartResize(to_signed(32, 64) - signed(SmartResize((\Posit32::FractionWithHiddenBit().0.num\), 64)), 32);
                            \Posit32::FractionWithHiddenBit().0.binaryOperationResult.1\ := shift_left(to_unsigned(0, 32), to_integer(unsigned(SmartResize((\Posit32::FractionWithHiddenBit().0.binaryOperationResult.0\), 5))));
                            \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9142
                    when \Posit32::FractionWithHiddenBit().0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionWithHiddenBit().0.binaryOperationResult.2\ := SmartResize(to_signed(32, 64) - signed(SmartResize((\Posit32::FractionWithHiddenBit().0.num\), 64)), 32);
                        \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32::FractionWithHiddenBit().0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::FractionWithHiddenBit().0.binaryOperationResult.3\ := shift_right(\Posit32::FractionWithHiddenBit().0.binaryOperationResult.1\, to_integer(unsigned(SmartResize((\Posit32::FractionWithHiddenBit().0.binaryOperationResult.2\), 5) and "11111")));
                        \Posit32::FractionWithHiddenBit().0.bits\ := \Posit32::FractionWithHiddenBit().0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional23;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((long)(num) == 0L)) {
                        -- 	conditional23 = 1u;
                        -- } else {
                        -- 	conditional23 = Posit32.SetOne (bits, (ushort)num);
                        -- }
                        -- 
                        \Posit32::FractionWithHiddenBit().0.binaryOperationResult.4\ := signed(SmartResize((\Posit32::FractionWithHiddenBit().0.num\), 64)) = to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::FractionWithHiddenBit().0._State_7\ and ends in state \Posit32::FractionWithHiddenBit().0._State_7\.
                        --     * The false branch starts in state \Posit32::FractionWithHiddenBit().0._State_8\ and ends in state \Posit32::FractionWithHiddenBit().0._State_9\.
                        --     * Execution after either branch will continue in the following state: \Posit32::FractionWithHiddenBit().0._State_6\.

                        if ((\Posit32::FractionWithHiddenBit().0.binaryOperationResult.4\)) then 
                            \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_7\;
                        else 
                            \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9328
                    when \Posit32::FractionWithHiddenBit().0._State_6\ => 
                        -- State after the if-else which was started in state \Posit32::FractionWithHiddenBit().0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional23;
                        -- 
                        \Posit32::FractionWithHiddenBit().0.return\ <= \Posit32::FractionWithHiddenBit().0.conditional23\;
                        \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBit().0._State_7\ => 
                        -- True branch of the if-else started in state \Posit32::FractionWithHiddenBit().0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional23 = 1u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional23 = 1u;
                        -- 
                        \Posit32::FractionWithHiddenBit().0.conditional23\ := to_unsigned(1, 32);
                        -- Going to the state after the if-else which was started in state \Posit32::FractionWithHiddenBit().0._State_5\.
                        if (\Posit32::FractionWithHiddenBit().0._State\ = \Posit32::FractionWithHiddenBit().0._State_7\) then 
                            \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBit().0._State_8\ => 
                        -- False branch of the if-else started in state \Posit32::FractionWithHiddenBit().0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional23 = Posit32.SetOne (bits, (ushort)num);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional23 = Posit32.SetOne (bits, (ushort)num);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16)
                        \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\ <= \Posit32::FractionWithHiddenBit().0.bits\;
                        \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\ <= SmartResize(\Posit32::FractionWithHiddenBit().0.num\, 16);
                        \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ <= true;
                        \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FractionWithHiddenBit().0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16)
                        if (\Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ = \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Finished.0\) then 
                            \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Started.0\ <= false;
                            \Posit32::FractionWithHiddenBit().0.return.1\ := \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).return.0\;
                            \Posit32::FractionWithHiddenBit().0.conditional23\ := \Posit32::FractionWithHiddenBit().0.return.1\;
                            -- Going to the state after the if-else which was started in state \Posit32::FractionWithHiddenBit().0._State_5\.
                            if (\Posit32::FractionWithHiddenBit().0._State\ = \Posit32::FractionWithHiddenBit().0._State_9\) then 
                                \Posit32::FractionWithHiddenBit().0._State\ := \Posit32::FractionWithHiddenBit().0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 state machine start
    \Posit32::GetMostSignificantOnePosition(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0._State\: \Posit32::GetMostSignificantOnePosition(UInt32).0._States\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\;
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\: unsigned(7 downto 0) := to_unsigned(0, 8);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\ <= false;
                \Posit32::GetMostSignificantOnePosition(UInt32).0.return\ <= to_unsigned(0, 8);
                \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\;
                \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\ := to_unsigned(0, 32);
                \Posit32::GetMostSignificantOnePosition(UInt32).0.b\ := to_unsigned(0, 8);
                \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\ := false;
                \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\ := to_unsigned(0, 8);
            else 
                case \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ is 
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ = true) then 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ = true) then 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\ <= false;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\ => 
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\ := \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = 0;
                        -- 
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.b\ := SmartResize(unsigned(to_signed(0, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(bits) != 0L) {
                        -- 	bits = bits >> 1;
                        -- 	b = (byte)((int)(b) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\.
                        -- The while loop's condition:
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\ := signed(SmartResize((\Posit32::GetMostSignificantOnePosition(UInt32).0.bits\), 64)) /= to_signed(0, 64);
                        if (\Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits = bits >> 1;
                            -- 	b = (byte)((int)(b) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = bits >> 1;
                            -- 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\ := shift_right(\Posit32::GetMostSignificantOnePosition(UInt32).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.bits\ := \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)((int)(b) + 1);
                            -- 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\ := SmartResize(unsigned(signed(SmartResize((\Posit32::GetMostSignificantOnePosition(UInt32).0.b\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.b\ := (\Posit32::GetMostSignificantOnePosition(UInt32).0.binaryOperationResult.2\);
                        else 
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8704
                    when \Posit32::GetMostSignificantOnePosition(UInt32).0._State_4\ => 
                        -- State after the while loop which was started in state \Posit32::GetMostSignificantOnePosition(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return b;
                        -- 
                        \Posit32::GetMostSignificantOnePosition(UInt32).0.return\ <= \Posit32::GetMostSignificantOnePosition(UInt32).0.b\;
                        \Posit32::GetMostSignificantOnePosition(UInt32).0._State\ := \Posit32::GetMostSignificantOnePosition(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 state machine start
    \Posit32::SetOne(UInt32,UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::SetOne(UInt32,UInt16).0._State\: \Posit32::SetOne(UInt32,UInt16).0._States\ := \Posit32::SetOne(UInt32,UInt16).0._State_0\;
        Variable \Posit32::SetOne(UInt32,UInt16).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::SetOne(UInt32,UInt16).0.index\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::SetOne(UInt32,UInt16).0._Finished\ <= false;
                \Posit32::SetOne(UInt32,UInt16).0.return\ <= to_unsigned(0, 32);
                \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_0\;
                \Posit32::SetOne(UInt32,UInt16).0.bits\ := to_unsigned(0, 32);
                \Posit32::SetOne(UInt32,UInt16).0.index\ := to_unsigned(0, 16);
                \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \Posit32::SetOne(UInt32,UInt16).0._State\ is 
                    when \Posit32::SetOne(UInt32,UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::SetOne(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetOne(UInt32,UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::SetOne(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetOne(UInt32,UInt16).0._Finished\ <= true;
                        else 
                            \Posit32::SetOne(UInt32,UInt16).0._Finished\ <= false;
                            \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetOne(UInt32,UInt16).0._State_2\ => 
                        \Posit32::SetOne(UInt32,UInt16).0.bits\ := \Posit32::SetOne(UInt32,UInt16).0.bits.parameter.In\;
                        \Posit32::SetOne(UInt32,UInt16).0.index\ := \Posit32::SetOne(UInt32,UInt16).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return bits | (uint)(1 << (int)index);
                        -- 
                        \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\ := unsigned(shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\Posit32::SetOne(UInt32,UInt16).0.index\, 32)), 5)))));
                        \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\ := \Posit32::SetOne(UInt32,UInt16).0.bits\ or (\Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.0\);
                        \Posit32::SetOne(UInt32,UInt16).0.return\ <= \Posit32::SetOne(UInt32,UInt16).0.binaryOperationResult.1\;
                        \Posit32::SetOne(UInt32,UInt16).0._State\ := \Posit32::SetOne(UInt32,UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.663
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 state machine start
    \Posit32::SetZero(UInt32,UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::SetZero(UInt32,UInt16).0._State\: \Posit32::SetZero(UInt32,UInt16).0._States\ := \Posit32::SetZero(UInt32,UInt16).0._State_0\;
        Variable \Posit32::SetZero(UInt32,UInt16).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::SetZero(UInt32,UInt16).0.index\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::SetZero(UInt32,UInt16).0._Finished\ <= false;
                \Posit32::SetZero(UInt32,UInt16).0.return\ <= to_unsigned(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_0\;
                \Posit32::SetZero(UInt32,UInt16).0.bits\ := to_unsigned(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0.index\ := to_unsigned(0, 16);
                \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\ := to_unsigned(0, 32);
            else 
                case \Posit32::SetZero(UInt32,UInt16).0._State\ is 
                    when \Posit32::SetZero(UInt32,UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::SetZero(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetZero(UInt32,UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::SetZero(UInt32,UInt16).0._Started\ = true) then 
                            \Posit32::SetZero(UInt32,UInt16).0._Finished\ <= true;
                        else 
                            \Posit32::SetZero(UInt32,UInt16).0._Finished\ <= false;
                            \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::SetZero(UInt32,UInt16).0._State_2\ => 
                        \Posit32::SetZero(UInt32,UInt16).0.bits\ := \Posit32::SetZero(UInt32,UInt16).0.bits.parameter.In\;
                        \Posit32::SetZero(UInt32,UInt16).0.index\ := \Posit32::SetZero(UInt32,UInt16).0.index.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return bits & (uint)(~(1 << (int)index));
                        -- 
                        \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\Posit32::SetZero(UInt32,UInt16).0.index\, 32)), 5))));
                        \Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\ := not((\Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.0\));
                        \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\ := \Posit32::SetZero(UInt32,UInt16).0.bits\ and unsigned((\Posit32::SetZero(UInt32,UInt16).0.unaryOperationResult.0\));
                        \Posit32::SetZero(UInt32,UInt16).0.return\ <= \Posit32::SetZero(UInt32,UInt16).0.binaryOperationResult.1\;
                        \Posit32::SetZero(UInt32,UInt16).0._State\ := \Posit32::SetZero(UInt32,UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8078
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).0 state machine end


    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 state machine start
    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\: \Posit32::LengthOfRunOfBits(UInt32,Byte).0._States\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\: boolean := false;
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\ <= false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\ <= to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\ := to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\ := to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ := to_signed(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\ := false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\ := false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\ := false;
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\ := to_unsigned(0, 8);
                \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\ := to_signed(0, 32);
            else 
                case \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ is 
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ = true) then 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ = true) then 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\ <= true;
                        else 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\ <= false;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\ => 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\;
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = 1;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits = bits << 1;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\ := shift_left(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (bits >> 31) & 1u;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\ := shift_right(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\ := (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.1\) and to_unsigned(1, 32);
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.2\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits = bits << 1;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\ := shift_left(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2) < (int)(startingPosition) && bits >> 31 == num) {
                        -- 	bits = bits << 1;
                        -- 	b = (byte)((int)(b) + 1);
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\.
                        -- The while loop's condition:
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\ := (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\) < signed(SmartResize((\Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition\), 32));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\ := shift_right(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.5\ = \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num\;
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_4\ => 
                        -- State after the while loop which was started in state \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return b;
                        -- 
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\;
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.4\ and \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.6\;
                        if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.7\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits = bits << 1;
                            -- 	b = (byte)((int)(b) + 1);
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits = bits << 1;
                            -- 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\ := shift_left(\Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.8\;
                            -- The following section was transformed from the .NET statement below:
                            -- b = (byte)((int)(b) + 1);
                            -- 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\ := SmartResize(unsigned(signed(SmartResize((\Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.b\ := (\Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.9\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num2 + 1;
                            -- 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ + to_signed(1, 32);
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.num2\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0.binaryOperationResult.10\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_2\ if the loop wasn't exited with a state change.
                            if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ = \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_5\) then 
                                \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_3\;
                            end if;
                        else 
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State\ := \Posit32::LengthOfRunOfBits(UInt32,Byte).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                end case;
            end if;
        end if;
    end process;
    -- System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 state machine start
    \Posit32::GetTwosComplement(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::GetTwosComplement(UInt32).0._State\: \Posit32::GetTwosComplement(UInt32).0._States\ := \Posit32::GetTwosComplement(UInt32).0._State_0\;
        Variable \Posit32::GetTwosComplement(UInt32).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::GetTwosComplement(UInt32).0._Finished\ <= false;
                \Posit32::GetTwosComplement(UInt32).0.return\ <= to_unsigned(0, 32);
                \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_0\;
                \Posit32::GetTwosComplement(UInt32).0.bits\ := to_unsigned(0, 32);
                \Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\ := to_unsigned(0, 32);
            else 
                case \Posit32::GetTwosComplement(UInt32).0._State\ is 
                    when \Posit32::GetTwosComplement(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::GetTwosComplement(UInt32).0._Started\ = true) then 
                            \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetTwosComplement(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::GetTwosComplement(UInt32).0._Started\ = true) then 
                            \Posit32::GetTwosComplement(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::GetTwosComplement(UInt32).0._Finished\ <= false;
                            \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::GetTwosComplement(UInt32).0._State_2\ => 
                        \Posit32::GetTwosComplement(UInt32).0.bits\ := \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (uint)((long)(~bits) + 1L);
                        -- 
                        \Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\ := not(\Posit32::GetTwosComplement(UInt32).0.bits\);
                        \Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\ := SmartResize(unsigned(signed(SmartResize((\Posit32::GetTwosComplement(UInt32).0.unaryOperationResult.0\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::GetTwosComplement(UInt32).0.return\ <= (\Posit32::GetTwosComplement(UInt32).0.binaryOperationResult.0\);
                        \Posit32::GetTwosComplement(UInt32).0._State\ := \Posit32::GetTwosComplement(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 state machine start
    \Posit32::FusedSum(Posit32[],Quire).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FusedSum(Posit32[],Quire).0._State\: \Posit32::FusedSum(Posit32[],Quire).0._States\ := \Posit32::FusedSum(Posit32[],Quire).0._State_0\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.posits\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
        Variable \Posit32::FusedSum(Posit32[],Quire).0.startingValue\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.quire\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.object34\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.1\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.2\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.3\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.4\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FusedSum(Posit32[],Quire).0._Finished\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_0\;
                \Posit32::FusedSum(Posit32[],Quire).0.return.1\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.num\ := to_signed(0, 32);
                \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.return.2\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \Posit32::FusedSum(Posit32[],Quire).0._State\ is 
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._Started\ = true) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._Started\ = true) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._Finished\ <= true;
                        else 
                            \Posit32::FusedSum(Posit32[],Quire).0._Finished\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.Out\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits\;
                        \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.Out\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_2\ => 
                        \Posit32::FusedSum(Posit32[],Quire).0.posits\ := \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.In\;
                        \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Quire quire;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object34;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object34 = new Quire (1u, 512);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\IsNull\ := false;
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\Size\ := to_unsigned(0, 16);
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\SegmentCount\ := to_unsigned(0, 16);
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.object34\;
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(1, 32);
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(512, 32)), 16);
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= true;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.object34\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- quire = Quire.op_LeftShift (object34, 511);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.object34\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(511, 32);
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.0\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.object34\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.quire\ := \Posit32::FusedSum(Posit32[],Quire).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (Quire.op_Equality (startingValue, quire)) {
                            -- 	return quire;
                            -- }
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.quire\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.1\ := \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).return.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.quire\ := \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.In.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::FusedSum(Posit32[],Quire).0._State_7\ and ends in state \Posit32::FusedSum(Posit32[],Quire).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::FusedSum(Posit32[],Quire).0._State_6\.

                            if (\Posit32::FusedSum(Posit32[],Quire).0.return.1\) then 
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_7\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_6\ => 
                        -- State after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 160) {
                        -- 	if (Lombiq.Arithmetics.Posit32.IsNaN (posits [num])) {
                        -- 		return quire;
                        -- 	}
                        -- 	startingValue = Quire.op_Addition (startingValue, Posit32.op_Explicit (posits [num]));
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_7\ => 
                        -- True branch of the if-else started in state \Posit32::FusedSum(Posit32[],Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return quire;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return quire;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.return\ <= \Posit32::FusedSum(Posit32[],Quire).0.quire\;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_5\.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._State\ = \Posit32::FusedSum(Posit32[],Quire).0._State_7\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_8\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_6\.
                        -- The while loop's condition:
                        \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\ := \Posit32::FusedSum(Posit32[],Quire).0.num\ < to_signed(160, 32);
                        if (\Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	if (Lombiq.Arithmetics.Posit32.IsNaN (posits [num])) {
                            -- 		return quire;
                            -- 	}
                            -- 	startingValue = Quire.op_Addition (startingValue, Posit32.op_Explicit (posits [num]));
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (Lombiq.Arithmetics.Posit32.IsNaN (posits [num])) {
                            -- 	return quire;
                            -- }
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Posit32::IsNaN()
                            \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN().this.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits\(to_integer(\Posit32::FusedSum(Posit32[],Quire).0.num\));
                            \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_10\;
                        else 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_9\ => 
                        -- State after the while loop which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- return startingValue;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.return\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Posit32::IsNaN()
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.2\ := \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN().return.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::FusedSum(Posit32[],Quire).0._State_12\ and ends in state \Posit32::FusedSum(Posit32[],Quire).0._State_12\.
                            --     * Execution after either branch will continue in the following state: \Posit32::FusedSum(Posit32[],Quire).0._State_11\.

                            if (\Posit32::FusedSum(Posit32[],Quire).0.return.2\) then 
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_12\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_11\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_11\ => 
                        -- State after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- startingValue = Quire.op_Addition (startingValue, Posit32.op_Explicit (posits [num]));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits\(to_integer(\Posit32::FusedSum(Posit32[],Quire).0.num\));
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= true;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_12\ => 
                        -- True branch of the if-else started in state \Posit32::FusedSum(Posit32[],Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return quire;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return quire;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.return\ <= \Posit32::FusedSum(Posit32[],Quire).0.quire\;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_10\.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._State\ = \Posit32::FusedSum(Posit32[],Quire).0._State_12\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.3\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).return.0\;
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.return.3\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.4\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).return.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.3\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.return.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\ := \Posit32::FusedSum(Posit32[],Quire).0.num\ + to_signed(1, 32);
                            \Posit32::FusedSum(Posit32[],Quire).0.num\ := \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_6\ if the loop wasn't exited with a state change.
                            if (\Posit32::FusedSum(Posit32[],Quire).0._State\ = \Posit32::FusedSum(Posit32[],Quire).0._State_14\) then 
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_8\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 state machine start
    \Quire Posit32::op_Explicit(Posit32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Posit32::op_Explicit(Posit32).0._State\: \Quire Posit32::op_Explicit(Posit32).0._States\ := \Quire Posit32::op_Explicit(Posit32).0._State_0\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.x\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.quire\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.2\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.3\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Posit32::op_Explicit(Posit32).0._Finished\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_0\;
                \Quire Posit32::op_Explicit(Posit32).0.array\ := (others => to_unsigned(0, 64));
                \Quire Posit32::op_Explicit(Posit32).0.return.0\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return.1\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.return.2\ := to_signed(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \Quire Posit32::op_Explicit(Posit32).0._State\ is 
                    when \Quire Posit32::op_Explicit(Posit32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Posit32::op_Explicit(Posit32).0._Started\ = true) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Posit32::op_Explicit(Posit32).0._Started\ = true) then 
                            \Quire Posit32::op_Explicit(Posit32).0._Finished\ <= true;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._Finished\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_2\ => 
                        \Quire Posit32::op_Explicit(Posit32).0.x\ := \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- array [0] = Lombiq.Arithmetics.Posit32.FractionWithHiddenBit (x);
                        -- 
                        -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit()
                        \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit().this.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.x\;
                        \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Started.0\ <= true;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit()
                        if (\Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.0\ := \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit().return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.array\(to_integer(to_signed(0, 32))) := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.return.0\, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- Quire quire;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- quire = new Quire (array, 0);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Quire Posit32::op_Explicit(Posit32).0.quire\.\IsNull\ := false;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\.\Size\ := to_unsigned(0, 16);
                            \Quire Posit32::op_Explicit(Posit32).0.quire\.\SegmentCount\ := to_unsigned(0, 16);
                            \Quire Posit32::op_Explicit(Posit32).0.quire\.\Segments\ := (others => to_unsigned(0, 64));
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.array\;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.array\ := \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- quire = Quire.op_LeftShift (quire, (int)(240L - (long)(Lombiq.Arithmetics.Posit32.FractionSize (x)) + (long)(Lombiq.Arithmetics.Posit32.CalculateScaleFactor (x))));
                            -- 
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize().this.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.x\;
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize()
                        if (\Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.1\ := \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize().return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\ := to_signed(240, 64) - signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return.1\), 64));
                            -- Starting state machine invocation for the following method: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor()
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor().this.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.x\;
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Quire Posit32::op_Explicit(Posit32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor()
                        if (\Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.2\ := \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor().return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\ := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\ + SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return.2\), 64), 32);
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\);
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Quire Posit32::op_Explicit(Posit32).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.3\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- return quire;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.return\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 state machine end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 state machine start
    \Quire::.ctor(UInt64[],UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Quire::.ctor(UInt64[],UInt16).0._State\: \Quire::.ctor(UInt64[],UInt16).0._States\ := \Quire::.ctor(UInt64[],UInt16).0._State_0\;
        Variable \Quire::.ctor(UInt64[],UInt16).0.this\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire::.ctor(UInt64[],UInt16).0.segments\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire::.ctor(UInt64[],UInt16).0.size\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire::.ctor(UInt64[],UInt16).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire::.ctor(UInt64[],UInt16).0._Finished\ <= false;
                \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\ <= (others => to_unsigned(0, 64));
                \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_0\;
                \Quire::.ctor(UInt64[],UInt16).0.segments\ := (others => to_unsigned(0, 64));
                \Quire::.ctor(UInt64[],UInt16).0.size\ := to_unsigned(0, 16);
                \Quire::.ctor(UInt64[],UInt16).0.num\ := to_signed(0, 32);
                \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\ := false;
                \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \Quire::.ctor(UInt64[],UInt16).0._State\ is 
                    when \Quire::.ctor(UInt64[],UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire::.ctor(UInt64[],UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt64[],UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire::.ctor(UInt64[],UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt64[],UInt16).0._Finished\ <= true;
                        else 
                            \Quire::.ctor(UInt64[],UInt16).0._Finished\ <= false;
                            \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\ <= \Quire::.ctor(UInt64[],UInt16).0.this\;
                        \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\ <= \Quire::.ctor(UInt64[],UInt16).0.segments\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt64[],UInt16).0._State_2\ => 
                        \Quire::.ctor(UInt64[],UInt16).0.this\ := \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\;
                        \Quire::.ctor(UInt64[],UInt16).0.segments\ := \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\;
                        \Quire::.ctor(UInt64[],UInt16).0.size\ := \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.SegmentCount = 8;
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\SegmentCount\ := to_unsigned(8, 16);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Size = 0;
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\Size\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Segments = new ulong[8];
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\Segments\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Array.Copy (segments, @this.Segments, 8);
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\Segments\ := \Quire::.ctor(UInt64[],UInt16).0.segments\(0 to 7);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 8;
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.num\ := to_signed(8, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < 8) {
                        -- 	@this.Segments [num] = 0uL;
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt64[],UInt16).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Quire::.ctor(UInt64[],UInt16).0._State_2\.
                        -- The while loop's condition:
                        \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\ := (\Quire::.ctor(UInt64[],UInt16).0.num\) < to_signed(8, 32);
                        if (\Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	@this.Segments [num] = 0uL;
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Segments [num] = 0uL;
                            -- 
                            \Quire::.ctor(UInt64[],UInt16).0.this\.\Segments\(to_integer(\Quire::.ctor(UInt64[],UInt16).0.num\)) := to_unsigned(0, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\ := \Quire::.ctor(UInt64[],UInt16).0.num\ + to_signed(1, 32);
                            \Quire::.ctor(UInt64[],UInt16).0.num\ := \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\;
                        else 
                            \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Quire::.ctor(UInt64[],UInt16).0._State_4\ => 
                        -- State after the while loop which was started in state \Quire::.ctor(UInt64[],UInt16).0._State_2\.
                        \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 state machine end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 state machine start
    \Quire::.ctor(UInt32,UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Quire::.ctor(UInt32,UInt16).0._State\: \Quire::.ctor(UInt32,UInt16).0._States\ := \Quire::.ctor(UInt32,UInt16).0._State_0\;
        Variable \Quire::.ctor(UInt32,UInt16).0.this\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire::.ctor(UInt32,UInt16).0.firstSegment\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.size\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire::.ctor(UInt32,UInt16).0.conditional25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\: boolean := false;
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire::.ctor(UInt32,UInt16).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\: boolean := false;
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire::.ctor(UInt32,UInt16).0._Finished\ <= false;
                \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_0\;
                \Quire::.ctor(UInt32,UInt16).0.firstSegment\ := to_unsigned(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.size\ := to_unsigned(0, 16);
                \Quire::.ctor(UInt32,UInt16).0.conditional25\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\ := false;
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\ := to_unsigned(0, 16);
                \Quire::.ctor(UInt32,UInt16).0.num\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\ := false;
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\ := to_signed(0, 32);
            else 
                case \Quire::.ctor(UInt32,UInt16).0._State\ is 
                    when \Quire::.ctor(UInt32,UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire::.ctor(UInt32,UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire::.ctor(UInt32,UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt32,UInt16).0._Finished\ <= true;
                        else 
                            \Quire::.ctor(UInt32,UInt16).0._Finished\ <= false;
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\ <= \Quire::.ctor(UInt32,UInt16).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_2\ => 
                        \Quire::.ctor(UInt32,UInt16).0.this\ := \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\;
                        \Quire::.ctor(UInt32,UInt16).0.firstSegment\ := \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\;
                        \Quire::.ctor(UInt32,UInt16).0.size\ := \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Size = size;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.this\.\Size\ := \Quire::.ctor(UInt32,UInt16).0.size\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional25;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand40;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand40 = (int)size;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ := signed(SmartResize(\Quire::.ctor(UInt32,UInt16).0.size\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- if ((remainderOperand40 - remainderOperand40 / 32 * 32 != 0)) {
                        -- 	conditional25 = 1;
                        -- } else {
                        -- 	conditional25 = 0;
                        -- }
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\ := \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ / to_signed(32, 32);
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\ := SmartResize(\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\ * to_signed(32, 32), 32);
                        \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.861
                    when \Quire::.ctor(UInt32,UInt16).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\ := \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ - \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\;
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\ := \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\ /= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire::.ctor(UInt32,UInt16).0._State_5\ and ends in state \Quire::.ctor(UInt32,UInt16).0._State_5\.
                        --     * The false branch starts in state \Quire::.ctor(UInt32,UInt16).0._State_6\ and ends in state \Quire::.ctor(UInt32,UInt16).0._State_6\.
                        --     * Execution after either branch will continue in the following state: \Quire::.ctor(UInt32,UInt16).0._State_4\.

                        if ((\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\)) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_5\;
                        else 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5903
                    when \Quire::.ctor(UInt32,UInt16).0._State_4\ => 
                        -- State after the if-else which was started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this.SegmentCount = (ushort)(((int)(size) >> 6) + (conditional25));
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\ := shift_right(signed(SmartResize((\Quire::.ctor(UInt32,UInt16).0.size\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5) and "11111")));
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\ := SmartResize(unsigned((\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\) + (\Quire::.ctor(UInt32,UInt16).0.conditional25\)), 16);
                        \Quire::.ctor(UInt32,UInt16).0.this\.\SegmentCount\ := (\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Segments = new ulong[8];
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.this\.\Segments\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Segments [0] = 1u;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.this\.\Segments\(to_integer(to_signed(0, 32))) := SmartResize(to_unsigned(1, 32), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.num\ := to_signed(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(@this.SegmentCount)) {
                        -- 	@this.Segments [num] = 0uL;
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.64
                    when \Quire::.ctor(UInt32,UInt16).0._State_5\ => 
                        -- True branch of the if-else started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional25 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional25 = 1;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.conditional25\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        if (\Quire::.ctor(UInt32,UInt16).0._State\ = \Quire::.ctor(UInt32,UInt16).0._State_5\) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_6\ => 
                        -- False branch of the if-else started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional25 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional25 = 0;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.conditional25\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        if (\Quire::.ctor(UInt32,UInt16).0._State\ = \Quire::.ctor(UInt32,UInt16).0._State_6\) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_7\ => 
                        -- Repeated state of the while loop which was started in state \Quire::.ctor(UInt32,UInt16).0._State_4\.
                        -- The while loop's condition:
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\ := (\Quire::.ctor(UInt32,UInt16).0.num\) < signed(SmartResize((\Quire::.ctor(UInt32,UInt16).0.this\.\SegmentCount\), 32));
                        if (\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	@this.Segments [num] = 0uL;
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Segments [num] = 0uL;
                            -- 
                            \Quire::.ctor(UInt32,UInt16).0.this\.\Segments\(to_integer(\Quire::.ctor(UInt32,UInt16).0.num\)) := to_unsigned(0, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\ := \Quire::.ctor(UInt32,UInt16).0.num\ + to_signed(1, 32);
                            \Quire::.ctor(UInt32,UInt16).0.num\ := \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\;
                        else 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Quire::.ctor(UInt32,UInt16).0._State_8\ => 
                        -- State after the while loop which was started in state \Quire::.ctor(UInt32,UInt16).0._State_4\.
                        \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine start
    \Quire Quire::op_Addition(Quire,Quire).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_Addition(Quire,Quire).0._State\: \Quire Quire::op_Addition(Quire,Quire).0._States\ := \Quire Quire::op_Addition(Quire,Quire).0._State_0\;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.right\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Quire::op_Addition(Quire,Quire).0.flag\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.flag2\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.flag3\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.conditional26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.conditional27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.conditional28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.object36\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_Addition(Quire,Quire).0._Finished\ <= false;
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_0\;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.array\ := (others => to_unsigned(0, 64));
                \Quire Quire::op_Addition(Quire,Quire).0.flag\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.num2\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.num3\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.flag2\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.flag3\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.b\ := to_unsigned(0, 8);
                \Quire Quire::op_Addition(Quire,Quire).0.conditional26\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.conditional27\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.conditional28\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\ := to_unsigned(0, 8);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_Addition(Quire,Quire).0._State\ is 
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._Finished\ <= false;
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\ <= \Quire Quire::op_Addition(Quire,Quire).0.left\;
                        \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\ <= \Quire Quire::op_Addition(Quire,Quire).0.right\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_2\ => 
                        \Quire Quire::op_Addition(Quire,Quire).0.left\ := \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\;
                        \Quire Quire::op_Addition(Quire,Quire).0.right\ := \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(left.SegmentCount) == 0 || (int)(right.SegmentCount) == 0) {
                        -- 	return left;
                        -- }
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.left\.\SegmentCount\), 32)) = to_signed(0, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.right\.\SegmentCount\), 32)) = to_signed(0, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\ or \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_4\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_4\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_3\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6518
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_3\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- bool flag;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- flag = false;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.flag\ := false;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num2\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num3\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num3) < (int)((int)(left.SegmentCount) << 6)) {
                        -- 	bool flag2;
                        -- 	flag2 = ((left.Segments [num] >> (int)num2) & 1uL) == 1uL;
                        -- 	bool flag3;
                        -- 	flag3 = ((right.Segments [num] >> (int)num2) & 1uL) == 1uL;
                        -- 	byte b;
                        -- 	int conditional26;
                        -- 	if (flag2) {
                        -- 		conditional26 = 1;
                        -- 	} else {
                        -- 		conditional26 = 0;
                        -- 	}
                        -- 	int conditional27;
                        -- 	if (flag3) {
                        -- 		conditional27 = 1;
                        -- 	} else {
                        -- 		conditional27 = 0;
                        -- 	}
                        -- 	int conditional28;
                        -- 	if (flag) {
                        -- 		conditional28 = 1;
                        -- 	} else {
                        -- 		conditional28 = 0;
                        -- 	}
                        -- 	b = (byte)((conditional26) + (conditional27) + (conditional28));
                        -- 	if (((int)(b) & 1) == 1) {
                        -- 		array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- 	}
                        -- 	flag = (int)(b) >> 1 == 1;
                        -- 	num2 = (ushort)((int)(num2) + 1);
                        -- 	if ((int)(num2) >> 6 == 1) {
                        -- 		num2 = 0;
                        -- 		num = (ushort)((int)(num) + 1);
                        -- 	}
                        -- 	num3 = (ushort)((int)(num3) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_4\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return left;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return left;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.return\ <= \Quire Quire::op_Addition(Quire,Quire).0.left\;
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_2\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_4\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_3\.
                        -- The while loop's condition:
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\ := shift_left(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.left\.\SegmentCount\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5))));
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num3\), 32)) < (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\);
                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag2;
                            -- 	flag2 = ((left.Segments [num] >> (int)num2) & 1uL) == 1uL;
                            -- 	bool flag3;
                            -- 	flag3 = ((right.Segments [num] >> (int)num2) & 1uL) == 1uL;
                            -- 	byte b;
                            -- 	int conditional26;
                            -- 	if (flag2) {
                            -- 		conditional26 = 1;
                            -- 	} else {
                            -- 		conditional26 = 0;
                            -- 	}
                            -- 	int conditional27;
                            -- 	if (flag3) {
                            -- 		conditional27 = 1;
                            -- 	} else {
                            -- 		conditional27 = 0;
                            -- 	}
                            -- 	int conditional28;
                            -- 	if (flag) {
                            -- 		conditional28 = 1;
                            -- 	} else {
                            -- 		conditional28 = 0;
                            -- 	}
                            -- 	b = (byte)((conditional26) + (conditional27) + (conditional28));
                            -- 	if (((int)(b) & 1) == 1) {
                            -- 		array [num] = array [num] + (ulong)(1L << (int)num2);
                            -- 	}
                            -- 	flag = (int)(b) >> 1 == 1;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- 	if ((int)(num2) >> 6 == 1) {
                            -- 		num2 = 0;
                            -- 		num = (ushort)((int)(num) + 1);
                            -- 	}
                            -- 	num3 = (ushort)((int)(num3) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag2 = ((left.Segments [num] >> (int)num2) & 1uL) == 1uL;
                            -- 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_7\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4003
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_6\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object36;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object36 = new Quire (array, 0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\IsNull\ := false;
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.object36\;
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.array\;
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\ := SmartResize(shift_right(\Quire Quire::op_Addition(Quire,Quire).0.left\.\Segments\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Quire::op_Addition(Quire,Quire).0.num2\, 32)), 6) and "111111"))), 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\) and to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.9145
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\) = to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.flag2\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool flag3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- flag3 = ((right.Segments [num] >> (int)num2) & 1uL) == 1uL;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\ := SmartResize(shift_right(\Quire Quire::op_Addition(Quire,Quire).0.right\.\Segments\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Quire::op_Addition(Quire,Quire).0.num2\, 32)), 6) and "111111"))), 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\) and to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9145
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\) = to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.flag3\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional26;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag2) {
                        -- 	conditional26 = 1;
                        -- } else {
                        -- 	conditional26 = 0;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_12\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_12\.
                        --     * The false branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_13\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_13\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_11\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.flag2\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_12\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_11\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional27;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag3) {
                        -- 	conditional27 = 1;
                        -- } else {
                        -- 	conditional27 = 0;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_15\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_15\.
                        --     * The false branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_16\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_16\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_14\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.flag3\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_15\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_12\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional26 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional26 = 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional26\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_12\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_13\ => 
                        -- False branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional26 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional26 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional26\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_13\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_14\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional28;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag) {
                        -- 	conditional28 = 1;
                        -- } else {
                        -- 	conditional28 = 0;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_18\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_18\.
                        --     * The false branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_19\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_19\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_17\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.flag\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_18\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_15\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional27 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional27 = 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional27\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_15\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_16\ => 
                        -- False branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional27 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional27 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional27\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_16\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_17\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- b = (byte)((conditional26) + (conditional27) + (conditional28));
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\ := (\Quire Quire::op_Addition(Quire,Quire).0.conditional26\) + (\Quire Quire::op_Addition(Quire,Quire).0.conditional27\);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\ := SmartResize(unsigned(\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\ + (\Quire Quire::op_Addition(Quire,Quire).0.conditional28\)), 8);
                        \Quire Quire::op_Addition(Quire,Quire).0.b\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (((int)(b) & 1) == 1) {
                        -- 	array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- }
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.b\), 32)) and to_signed(1, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7912
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_18\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional28 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional28 = 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional28\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_18\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_19\ => 
                        -- False branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional28 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional28 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional28\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_19\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\) = to_signed(1, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_22\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_22\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_21\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_22\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_21\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- flag = (int)(b) >> 1 == 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\ := shift_right(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.b\), 32)), to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\ = to_signed(1, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0.flag\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (ushort)((int)(num2) + 1);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num2\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.num2\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\);
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(num2) >> 6 == 1) {
                        -- 	num2 = 0;
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0.8515
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_22\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\ := SmartResize(unsigned(shift_left(to_signed(1, 64), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Quire::op_Addition(Quire,Quire).0.num2\, 32)), 6))))), 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\ := \Quire Quire::op_Addition(Quire,Quire).0.array\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)) + (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\);
                        \Quire Quire::op_Addition(Quire,Quire).0.array\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)) := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\;
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_20\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_22\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9498
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_23\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\ := shift_right(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num2\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5) and "11111")));
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\ = to_signed(1, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_25\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_25\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_24\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_25\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5777
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_24\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (ushort)((int)(num3) + 1);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num3\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.num3\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_24\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_25\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num2 = 0;
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num2\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.num\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_23\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_25\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Quire::op_Addition(Quire,Quire).0.object36\ := \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Quire::op_Addition(Quire,Quire).0.array\ := \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object36;
                            -- 
                            \Quire Quire::op_Addition(Quire,Quire).0.return\ <= \Quire Quire::op_Addition(Quire,Quire).0.object36\;
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 state machine start
    \Quire Quire::op_Addition(Quire,UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_Addition(Quire,UInt32).0._State\: \Quire Quire::op_Addition(Quire,UInt32).0._States\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_0\;
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.right\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.object37\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.return.0\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_Addition(Quire,UInt32).0._Finished\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(0, 32);
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_0\;
                \Quire Quire::op_Addition(Quire,UInt32).0.right\ := to_unsigned(0, 32);
                \Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_Addition(Quire,UInt32).0._State\ is 
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_Addition(Quire,UInt32).0._Finished\ <= false;
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_2\ => 
                        \Quire Quire::op_Addition(Quire,UInt32).0.left\ := \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\;
                        \Quire Quire::op_Addition(Quire,UInt32).0.right\ := \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object37;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object37 = new Quire (1u, (ushort)((int)(left.SegmentCount) << 6));
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\IsNull\ := false;
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        \Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\ := SmartResize(unsigned(shift_left(signed(SmartResize((\Quire Quire::op_Addition(Quire,UInt32).0.left\.\SegmentCount\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5))))), 16);
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.object37\;
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(1, 32);
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= (\Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\);
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= true;
                        \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.125
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                            \Quire Quire::op_Addition(Quire,UInt32).0.object37\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return Quire.op_Addition (left, object37);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.object37\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= true;
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                            \Quire Quire::op_Addition(Quire,UInt32).0.return.0\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).return.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.left\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.object37\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.return\ <= \Quire Quire::op_Addition(Quire,UInt32).0.return.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 state machine start
    \Quire Quire::op_OnesComplement(Quire).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_OnesComplement(Quire).0._State\: \Quire Quire::op_OnesComplement(Quire).0._States\ := \Quire Quire::op_OnesComplement(Quire).0._State_0\;
        Variable \Quire Quire::op_OnesComplement(Quire).0.q\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_OnesComplement(Quire).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\: unsigned(15 downto 0) := to_unsigned(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_OnesComplement(Quire).0._Finished\ <= false;
                \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_0\;
                \Quire Quire::op_OnesComplement(Quire).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\ := false;
                \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\ := to_unsigned(0, 64);
                \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_OnesComplement(Quire).0._State\ is 
                    when \Quire Quire::op_OnesComplement(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_OnesComplement(Quire).0._Started\ = true) then 
                            \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_OnesComplement(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_OnesComplement(Quire).0._Started\ = true) then 
                            \Quire Quire::op_OnesComplement(Quire).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_OnesComplement(Quire).0._Finished\ <= false;
                            \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\ <= \Quire Quire::op_OnesComplement(Quire).0.q\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_OnesComplement(Quire).0._State_2\ => 
                        \Quire Quire::op_OnesComplement(Quire).0.q\ := \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_OnesComplement(Quire).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(q.SegmentCount)) {
                        -- 	q.Segments [num] = ~q.Segments [num];
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_OnesComplement(Quire).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_OnesComplement(Quire).0._State_2\.
                        -- The while loop's condition:
                        \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\ := signed(SmartResize((\Quire Quire::op_OnesComplement(Quire).0.num\), 32)) < signed(SmartResize((\Quire Quire::op_OnesComplement(Quire).0.q\.\SegmentCount\), 32));
                        if (\Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	q.Segments [num] = ~q.Segments [num];
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- q.Segments [num] = ~q.Segments [num];
                            -- 
                            \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\ := not(\Quire Quire::op_OnesComplement(Quire).0.q\.\Segments\(to_integer(\Quire Quire::op_OnesComplement(Quire).0.num\)));
                            \Quire Quire::op_OnesComplement(Quire).0.q\.\Segments\(to_integer(\Quire Quire::op_OnesComplement(Quire).0.num\)) := \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = (ushort)((int)(num) + 1);
                            -- 
                            \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_OnesComplement(Quire).0.num\), 32)) + to_signed(1, 32)), 16);
                            \Quire Quire::op_OnesComplement(Quire).0.num\ := (\Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\);
                        else 
                            \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7457
                    when \Quire Quire::op_OnesComplement(Quire).0._State_4\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_OnesComplement(Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return q;
                        -- 
                        \Quire Quire::op_OnesComplement(Quire).0.return\ <= \Quire Quire::op_OnesComplement(Quire).0.q\;
                        \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine start
    \Boolean Quire::op_Equality(Quire,Quire).0._StateMachine\: process (\Clock\) 
        Variable \Boolean Quire::op_Equality(Quire,Quire).0._State\: \Boolean Quire::op_Equality(Quire,Quire).0._States\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_0\;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.right\: \Lombiq.Arithmetics.Quire\;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\: boolean := false;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\: unsigned(15 downto 0) := to_unsigned(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Boolean Quire::op_Equality(Quire,Quire).0._Finished\ <= false;
                \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= false;
                \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_0\;
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\ := false;
                \Boolean Quire::op_Equality(Quire,Quire).0.num\ := to_unsigned(0, 16);
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\ := false;
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\ := false;
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\ := to_unsigned(0, 16);
            else 
                case \Boolean Quire::op_Equality(Quire,Quire).0._State\ is 
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._Started\ = true) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._Started\ = true) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._Finished\ <= true;
                        else 
                            \Boolean Quire::op_Equality(Quire,Quire).0._Finished\ <= false;
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.Out\ <= \Boolean Quire::op_Equality(Quire,Quire).0.left\;
                        \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.Out\ <= \Boolean Quire::op_Equality(Quire,Quire).0.right\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_2\ => 
                        \Boolean Quire::op_Equality(Quire,Quire).0.left\ := \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.In\;
                        \Boolean Quire::op_Equality(Quire,Quire).0.right\ := \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(left.SegmentCount) != (int)(right.SegmentCount)) {
                        -- 	return false;
                        -- }
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\ := signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.left\.\SegmentCount\), 32)) /= signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.right\.\SegmentCount\), 32));

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Boolean Quire::op_Equality(Quire,Quire).0._State_4\ and ends in state \Boolean Quire::op_Equality(Quire,Quire).0._State_4\.
                        --     * Execution after either branch will continue in the following state: \Boolean Quire::op_Equality(Quire,Quire).0._State_3\.

                        if (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_3\ => 
                        -- State after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(left.SegmentCount)) {
                        -- 	if (left.Segments [num] != right.Segments [num]) {
                        -- 		return false;
                        -- 	}
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_4\ => 
                        -- True branch of the if-else started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return false;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return false;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= false;
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_2\.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._State\ = \Boolean Quire::op_Equality(Quire,Quire).0._State_4\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_3\.
                        -- The while loop's condition:
                        \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\ := signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.num\), 32)) < signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.left\.\SegmentCount\), 32));
                        if (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	if (left.Segments [num] != right.Segments [num]) {
                            -- 		return false;
                            -- 	}
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (left.Segments [num] != right.Segments [num]) {
                            -- 	return false;
                            -- }
                            -- 
                            \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\ := \Boolean Quire::op_Equality(Quire,Quire).0.left\.\Segments\(to_integer(\Boolean Quire::op_Equality(Quire,Quire).0.num\)) /= \Boolean Quire::op_Equality(Quire,Quire).0.right\.\Segments\(to_integer(\Boolean Quire::op_Equality(Quire,Quire).0.num\));

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Boolean Quire::op_Equality(Quire,Quire).0._State_8\ and ends in state \Boolean Quire::op_Equality(Quire,Quire).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \Boolean Quire::op_Equality(Quire,Quire).0._State_7\.

                            if (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\) then 
                                \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_8\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_7\;
                            end if;
                        else 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.557
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_6\ => 
                        -- State after the while loop which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- return true;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= true;
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_7\ => 
                        -- State after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\ := SmartResize(unsigned(signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Boolean Quire::op_Equality(Quire,Quire).0.num\ := (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\);
                        -- Returning to the repeated state of the while loop which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._State\ = \Boolean Quire::op_Equality(Quire,Quire).0._State_7\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_8\ => 
                        -- True branch of the if-else started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return false;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return false;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= false;
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_5\.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._State\ = \Boolean Quire::op_Equality(Quire,Quire).0._State_8\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine start
    \Quire Quire::op_RightShift(Quire,Int32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_RightShift(Quire,Int32).0._State\: \Quire Quire::op_RightShift(Quire,Int32).0._States\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_0\;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.right\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.flag\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.flag2\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.object38\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_RightShift(Quire,Int32).0._Finished\ <= false;
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_0\;
                \Quire Quire::op_RightShift(Quire,Int32).0.right\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                \Quire Quire::op_RightShift(Quire,Int32).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.flag\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.num2\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.num3\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.flag2\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\ := to_unsigned(0, 64);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\ := to_unsigned(0, 64);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\ := to_unsigned(0, 64);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_RightShift(Quire,Int32).0._State\ is 
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_RightShift(Quire,Int32).0._Finished\ <= false;
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.Out\ <= \Quire Quire::op_RightShift(Quire,Int32).0.left\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_2\ => 
                        \Quire Quire::op_RightShift(Quire,Int32).0.left\ := \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.In\;
                        \Quire Quire::op_RightShift(Quire,Int32).0.right\ := \Quire Quire::op_RightShift(Quire,Int32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- right = right & ((1 << (int)(left.SegmentCount) * 6) - 1);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\ := SmartResize(signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.left\.\SegmentCount\), 32)) * to_signed(6, 32), 32);
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\, 5))));
                        \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9452
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\) - to_signed(1, 32);
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\ := \Quire Quire::op_RightShift(Quire,Int32).0.right\ and (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\);
                        \Quire Quire::op_RightShift(Quire,Int32).0.right\ := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Array.Copy (left.Segments, array, 8);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\ := \Quire Quire::op_RightShift(Quire,Int32).0.left\.\Segments\(0 to 7);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(right)) {
                        -- 	bool flag;
                        -- 	flag = false;
                        -- 	ushort num2;
                        -- 	num2 = 1;
                        -- 	while ((int)(num2) <= 8) {
                        -- 		ushort num3;
                        -- 		num3 = (ushort)(8 - (int)(num2));
                        -- 		bool flag2;
                        -- 		flag2 = (array [num3] & 1uL) == 1uL;
                        -- 		array [num3] = array [num3] >> 1;
                        -- 		if (flag) {
                        -- 			array [num3] = array [num3] | 0x8000000000000000uL;
                        -- 		}
                        -- 		flag = flag2;
                        -- 		num2 = (ushort)((int)(num2) + 1);
                        -- 	}
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.4649
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_4\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_3\.
                        -- The while loop's condition:
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\ := signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num\), 32)) < (\Quire Quire::op_RightShift(Quire,Int32).0.right\);
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag;
                            -- 	flag = false;
                            -- 	ushort num2;
                            -- 	num2 = 1;
                            -- 	while ((int)(num2) <= 8) {
                            -- 		ushort num3;
                            -- 		num3 = (ushort)(8 - (int)(num2));
                            -- 		bool flag2;
                            -- 		flag2 = (array [num3] & 1uL) == 1uL;
                            -- 		array [num3] = array [num3] >> 1;
                            -- 		if (flag) {
                            -- 			array [num3] = array [num3] | 0x8000000000000000uL;
                            -- 		}
                            -- 		flag = flag2;
                            -- 		num2 = (ushort)((int)(num2) + 1);
                            -- 	}
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag = false;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.flag\ := false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 1;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.num2\ := SmartResize(unsigned(to_signed(1, 32)), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((int)(num2) <= 8) {
                            -- 	ushort num3;
                            -- 	num3 = (ushort)(8 - (int)(num2));
                            -- 	bool flag2;
                            -- 	flag2 = (array [num3] & 1uL) == 1uL;
                            -- 	array [num3] = array [num3] >> 1;
                            -- 	if (flag) {
                            -- 		array [num3] = array [num3] | 0x8000000000000000uL;
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_6\;
                        else 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_5\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object38;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object38 = new Quire (array, 0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\IsNull\ := false;
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.object38\;
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.array\;
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_6\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_4\.
                        -- The while loop's condition:
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\ := signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num2\), 32)) <= to_signed(8, 32);
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	ushort num3;
                            -- 	num3 = (ushort)(8 - (int)(num2));
                            -- 	bool flag2;
                            -- 	flag2 = (array [num3] & 1uL) == 1uL;
                            -- 	array [num3] = array [num3] >> 1;
                            -- 	if (flag) {
                            -- 		array [num3] = array [num3] | 0x8000000000000000uL;
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ushort)(8 - (int)(num2));
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\ := SmartResize(unsigned(to_signed(8, 32) - signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num2\), 32))), 16);
                            \Quire Quire::op_RightShift(Quire,Int32).0.num3\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\);
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag2 = (array [num3] & 1uL) == 1uL;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\ := \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) and to_unsigned(1, 64);
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_8\;
                        else 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.775
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_7\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.num\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._State\ = \Quire Quire::op_RightShift(Quire,Int32).0._State_7\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\) = to_unsigned(1, 64);
                        \Quire Quire::op_RightShift(Quire,Int32).0.flag2\ := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num3] = array [num3] >> 1;
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\ := SmartResize(shift_right(\Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)), to_integer(unsigned(SmartResize(to_signed(1, 32), 6) and "111111"))), 64);
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag) {
                        -- 	array [num3] = array [num3] | 0x8000000000000000uL;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_RightShift(Quire,Int32).0._State_10\ and ends in state \Quire Quire::op_RightShift(Quire,Int32).0._State_10\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_RightShift(Quire,Int32).0._State_9\.

                        if (\Quire Quire::op_RightShift(Quire,Int32).0.flag\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_10\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5588
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_9\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- flag = flag2;
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.flag\ := \Quire Quire::op_RightShift(Quire,Int32).0.flag2\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (ushort)((int)(num2) + 1);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num2\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.num2\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_4\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._State\ = \Quire Quire::op_RightShift(Quire,Int32).0._State_9\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_10\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	array [num3] = array [num3] | 0x8000000000000000uL;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array [num3] = array [num3] | 0x8000000000000000uL;
                        -- 
                        -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\ := \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) or "1000000000000000000000000000000000000000000000000000000000000000";
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\;
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_8\.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._State\ = \Quire Quire::op_RightShift(Quire,Int32).0._State_10\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_11\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Quire::op_RightShift(Quire,Int32).0.object38\ := \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Quire::op_RightShift(Quire,Int32).0.array\ := \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object38;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.return\ <= \Quire Quire::op_RightShift(Quire,Int32).0.object38\;
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine start
    \Quire Quire::op_LeftShift(Quire,Int32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0._State\: \Quire Quire::op_LeftShift(Quire,Int32).0._States\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.right\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.flag\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.object39\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\ <= false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\;
                \Quire Quire::op_LeftShift(Quire,Int32).0.right\ := to_signed(0, 32);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                \Quire Quire::op_LeftShift(Quire,Int32).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.flag\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.num2\ := to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\ := to_unsigned(0, 64);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\ := to_unsigned(0, 64);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\ := to_unsigned(0, 64);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\ := to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_LeftShift(Quire,Int32).0._State\ is 
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\ <= false;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\ => 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.left\ := \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.right\ := \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- right = right & 65535;
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\ := \Quire Quire::op_LeftShift(Quire,Int32).0.right\ and to_signed(65535, 32);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.right\ := \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Array.Copy (left.Segments, array, 8);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := \Quire Quire::op_LeftShift(Quire,Int32).0.left\.\Segments\(0 to 7);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(right)) {
                        -- 	bool flag;
                        -- 	flag = false;
                        -- 	ushort num2;
                        -- 	num2 = 0;
                        -- 	while ((int)(num2) < 8) {
                        -- 		bool flag2;
                        -- 		flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                        -- 		array [num2] = array [num2] << 1;
                        -- 		if (flag) {
                        -- 			array [num2] = (ulong)(array [num2] | 1uL);
                        -- 		}
                        -- 		flag = flag2;
                        -- 		num2 = (ushort)((int)(num2) + 1);
                        -- 	}
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.1386
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\.
                        -- The while loop's condition:
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\ := signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num\), 32)) < (\Quire Quire::op_LeftShift(Quire,Int32).0.right\);
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag;
                            -- 	flag = false;
                            -- 	ushort num2;
                            -- 	num2 = 0;
                            -- 	while ((int)(num2) < 8) {
                            -- 		bool flag2;
                            -- 		flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 		array [num2] = array [num2] << 1;
                            -- 		if (flag) {
                            -- 			array [num2] = (ulong)(array [num2] | 1uL);
                            -- 		}
                            -- 		flag = flag2;
                            -- 		num2 = (ushort)((int)(num2) + 1);
                            -- 	}
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag = false;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.flag\ := false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.num2\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((int)(num2) < 8) {
                            -- 	bool flag2;
                            -- 	flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 	array [num2] = array [num2] << 1;
                            -- 	if (flag) {
                            -- 		array [num2] = (ulong)(array [num2] | 1uL);
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\;
                        else 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_4\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object39;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object39 = new Quire (array, 0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\IsNull\ := false;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.object39\;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.array\;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\.
                        -- The while loop's condition:
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\ := signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num2\), 32)) < to_signed(8, 32);
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag2;
                            -- 	flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 	array [num2] = array [num2] << 1;
                            -- 	if (flag) {
                            -- 		array [num2] = (ulong)(array [num2] | 1uL);
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 
                            -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                            \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\ := \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) and "1000000000000000000000000000000000000000000000000000000000000000";
                            -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                            \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\ := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\) = "1000000000000000000000000000000000000000000000000000000000000000";
                            \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\ := \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num2] = array [num2] << 1;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\ := SmartResize(shift_left(\Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)), to_integer(unsigned(SmartResize(to_signed(1, 32), 6)))), 64);
                            \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) := \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (flag) {
                            -- 	array [num2] = (ulong)(array [num2] | 1uL);
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\ and ends in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\.

                            if (\Quire Quire::op_LeftShift(Quire,Int32).0.flag\) then 
                                \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\;
                            end if;
                        else 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8351
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.num\ := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._State\ = \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- flag = flag2;
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.flag\ := \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (ushort)((int)(num2) + 1);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num2\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.num2\ := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._State\ = \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	array [num2] = (ulong)(array [num2] | 1uL);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array [num2] = (ulong)(array [num2] | 1uL);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\ := \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) or to_unsigned(1, 64);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._State\ = \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.object39\ := \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object39;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.return\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.object39\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine end


    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine start
    \UInt64 Quire::op_Explicit(Quire).0._StateMachine\: process (\Clock\) 
        Variable \UInt64 Quire::op_Explicit(Quire).0._State\: \UInt64 Quire::op_Explicit(Quire).0._States\ := \UInt64 Quire::op_Explicit(Quire).0._State_0\;
        Variable \UInt64 Quire::op_Explicit(Quire).0.x\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UInt64 Quire::op_Explicit(Quire).0._Finished\ <= false;
                \UInt64 Quire::op_Explicit(Quire).0.return\ <= to_unsigned(0, 64);
                \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_0\;
            else 
                case \UInt64 Quire::op_Explicit(Quire).0._State\ is 
                    when \UInt64 Quire::op_Explicit(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UInt64 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt64 Quire::op_Explicit(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UInt64 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt64 Quire::op_Explicit(Quire).0._Finished\ <= true;
                        else 
                            \UInt64 Quire::op_Explicit(Quire).0._Finished\ <= false;
                            \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \UInt64 Quire::op_Explicit(Quire).0.x.parameter.Out\ <= \UInt64 Quire::op_Explicit(Quire).0.x\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt64 Quire::op_Explicit(Quire).0._State_2\ => 
                        \UInt64 Quire::op_Explicit(Quire).0.x\ := \UInt64 Quire::op_Explicit(Quire).0.x.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return x.Segments [0];
                        -- 
                        \UInt64 Quire::op_Explicit(Quire).0.return\ <= \UInt64 Quire::op_Explicit(Quire).0.x\.\Segments\(to_integer(to_signed(0, 32)));
                        \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine start
    \UInt32 Quire::op_Explicit(Quire).0._StateMachine\: process (\Clock\) 
        Variable \UInt32 Quire::op_Explicit(Quire).0._State\: \UInt32 Quire::op_Explicit(Quire).0._States\ := \UInt32 Quire::op_Explicit(Quire).0._State_0\;
        Variable \UInt32 Quire::op_Explicit(Quire).0.x\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UInt32 Quire::op_Explicit(Quire).0._Finished\ <= false;
                \UInt32 Quire::op_Explicit(Quire).0.return\ <= to_unsigned(0, 32);
                \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_0\;
            else 
                case \UInt32 Quire::op_Explicit(Quire).0._State\ is 
                    when \UInt32 Quire::op_Explicit(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UInt32 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt32 Quire::op_Explicit(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UInt32 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt32 Quire::op_Explicit(Quire).0._Finished\ <= true;
                        else 
                            \UInt32 Quire::op_Explicit(Quire).0._Finished\ <= false;
                            \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \UInt32 Quire::op_Explicit(Quire).0.x.parameter.Out\ <= \UInt32 Quire::op_Explicit(Quire).0.x\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt32 Quire::op_Explicit(Quire).0._State_2\ => 
                        \UInt32 Quire::op_Explicit(Quire).0.x\ := \UInt32 Quire::op_Explicit(Quire).0.x.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (uint)x.Segments [0];
                        -- 
                        \UInt32 Quire::op_Explicit(Quire).0.return\ <= SmartResize(\UInt32 Quire::op_Explicit(Quire).0.x\.\Segments\(to_integer(to_signed(0, 32))), 32);
                        \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::.ctor(Int32).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\;
    \Posit32::.ctor(Int32).0.this.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\;
    \Posit32::.ctor(Int32).0.value.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\ <= \Posit32::.ctor(Int32).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\ <= \Posit32::.ctor(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32) start
    \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\ := 0;
                            \Quire Posit32::op_Explicit(Posit32).0._Started\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Posit32::op_Explicit(Posit32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= true;
                                    \Quire Posit32::op_Explicit(Posit32).0._Started\ <= false;
                                    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).return.0\ <= \Quire Posit32::op_Explicit(Posit32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire Posit32::op_Explicit(Posit32).0._Started\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Posit32::op_Explicit(Posit32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= true;
                                    \Quire Posit32::op_Explicit(Posit32).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).return.0\ <= \Quire Posit32::op_Explicit(Posit32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\;
    \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
    \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
    \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= \Posit32::.ctor(UInt32,Boolean).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::FusedSum(Posit32[],Quire).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.Out.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Finished.0\ <= \Posit32::FusedSum(Posit32[],Quire).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).return.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.return\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.In.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.Out\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.In.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::.ctor(Quire).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\;
    \Posit32::.ctor(Quire).0.this.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.q.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Finished.0\ <= \Posit32::.ctor(Quire).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.In.0\ <= \Posit32::.ctor(Quire).0.this.parameter.Out\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.In.0\ <= \Posit32::.ctor(Quire).0.q.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \Quire Quire::op_RightShift(Quire,Int32).0._Started\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\;
    \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\;
    \Quire Quire::op_RightShift(Quire,Int32).0.right.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0._Finished\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.return\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \UInt64 Quire::op_Explicit(Quire).0._Started\ <= \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\;
    \UInt64 Quire::op_Explicit(Quire).0.x.parameter.In\ <= \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\ <= \UInt64 Quire::op_Explicit(Quire).0._Finished\;
    \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\ <= \UInt64 Quire::op_Explicit(Quire).0.return\;
    \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\ <= \UInt64 Quire::op_Explicit(Quire).0.x.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \Quire Quire::op_OnesComplement(Quire).0._Started\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\;
    \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= \Quire Quire::op_OnesComplement(Quire).0._Finished\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).return.0\ <= \Quire Quire::op_OnesComplement(Quire).0.return\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\ <= \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \Quire Quire::op_Addition(Quire,UInt32).0._Started\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\;
    \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\;
    \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0._Finished\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).return.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.return\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32) start
    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= true;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_LeftShift(Quire,Int32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= true;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= false;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.return\;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= true;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_LeftShift(Quire,Int32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= true;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.return\;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= true;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_LeftShift(Quire,Int32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= true;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.return\;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \UInt32 Quire::op_Explicit(Quire).0._Started\ <= \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\;
    \UInt32 Quire::op_Explicit(Quire).0.x.parameter.In\ <= \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Finished.0\ <= \UInt32 Quire::op_Explicit(Quire).0._Finished\;
    \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).return.0\ <= \UInt32 Quire::op_Explicit(Quire).0.return\;
    \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.In.0\ <= \UInt32 Quire::op_Explicit(Quire).0.x.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\;
    \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 (#0):
    \Posit32::.ctor(UInt32).0._Started\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\;
    \Posit32::.ctor(UInt32).0.this.parameter.In\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\;
    \Posit32::.ctor(UInt32).0.value.parameter.In\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\;
    \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\ <= \Posit32::.ctor(UInt32).0._Finished\;
    \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\ <= \Posit32::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32) start
    \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).0
                case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\) then 
                            \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\ := 0;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= true;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\ <= \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := AfterFinished;
                                    \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= false;
                                    \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\ <= \Posit32::GetMostSignificantOnePosition(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::EncodeRegimeBits(Int32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::EncodeRegimeBits(Int32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0
                case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= true;
                            \Posit32::GetMostSignificantOnePosition(UInt32).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).bits.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::GetMostSignificantOnePosition(UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := AfterFinished;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= true;
                                    \Posit32::GetMostSignificantOnePosition(UInt32).0._Started\ <= false;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32).return.0\ <= \Posit32::GetMostSignificantOnePosition(UInt32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::GetMostSignificantOnePosition(UInt32).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetMostSignificantOnePosition(UInt32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 (#0):
    \Posit32::EncodeRegimeBits(Int32).0._Started\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Started.0\;
    \Posit32::EncodeRegimeBits(Int32).0.regimeKValue.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).regimeKValue.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32)._Finished.0\ <= \Posit32::EncodeRegimeBits(Int32).0._Finished\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::EncodeRegimeBits(Int32).return.0\ <= \Posit32::EncodeRegimeBits(Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte) start
    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := AfterFinished;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::GetRegimeKValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetRegimeKValue().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::ExponentSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::ExponentSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().0
                case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\) then 
                            \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\ := 0;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= true;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.bits.parameter.In\ <= \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).bits.parameter.Out.0\;
                            \Posit32::LengthOfRunOfBits(UInt32,Byte).0.startingPosition.parameter.In\ <= \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).startingPosition.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::LengthOfRunOfBits(UInt32,Byte).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= true;
                                    \Posit32::LengthOfRunOfBits(UInt32,Byte).0._Started\ <= false;
                                    \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte).return.0\ <= \Posit32::LengthOfRunOfBits(UInt32,Byte).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::LengthOfRunOfBits(UInt32,Byte).Posit32::FractionSize().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionSize().0.Posit32::LengthOfRunOfBits(UInt32,Byte)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 (#0):
    \Posit32::GetTwosComplement(UInt32).0._Started\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Started.0\;
    \Posit32::GetTwosComplement(UInt32).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).bits.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32)._Finished.0\ <= \Posit32::GetTwosComplement(UInt32).0._Finished\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::GetTwosComplement(UInt32).return.0\ <= \Posit32::GetTwosComplement(UInt32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 (#0):
    \Posit32::SetZero(UInt32,UInt16).0._Started\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Started.0\;
    \Posit32::SetZero(UInt32,UInt16).0.bits.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).bits.parameter.Out.0\;
    \Posit32::SetZero(UInt32,UInt16).0.index.parameter.In\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).index.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16)._Finished.0\ <= \Posit32::SetZero(UInt32,UInt16).0._Finished\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.Posit32::SetZero(UInt32,UInt16).return.0\ <= \Posit32::SetZero(UInt32,UInt16).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue() start
    -- Signal connections for System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 (#0):
    \Posit32::GetRegimeKValue().0._Started\ <= \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Started.0\;
    \Posit32::GetRegimeKValue().0.this.parameter.In\ <= \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().this.parameter.Out.0\;
    \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue()._Finished.0\ <= \Posit32::GetRegimeKValue().0._Finished\;
    \Posit32::CalculateScaleFactor().0.Posit32::GetRegimeKValue().return.0\ <= \Posit32::GetRegimeKValue().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue() start
    -- Signal connections for System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().0 (#0):
    \Posit32::GetExponentValue().0._Started\ <= \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Started.0\;
    \Posit32::GetExponentValue().0.this.parameter.In\ <= \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().this.parameter.Out.0\;
    \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue()._Finished.0\ <= \Posit32::GetExponentValue().0._Finished\;
    \Posit32::CalculateScaleFactor().0.Posit32::GetExponentValue().return.0\ <= \Posit32::GetExponentValue().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue() end


    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::ExponentSize() start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0 (#0):
    \Posit32::ExponentSize().0._Started\ <= \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Started.0\;
    \Posit32::ExponentSize().0.this.parameter.In\ <= \Posit32::GetExponentValue().0.Posit32::ExponentSize().this.parameter.Out.0\;
    \Posit32::GetExponentValue().0.Posit32::ExponentSize()._Finished.0\ <= \Posit32::ExponentSize().0._Finished\;
    \Posit32::GetExponentValue().0.Posit32::ExponentSize().return.0\ <= \Posit32::ExponentSize().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Byte Lombiq.Arithmetics.Posit32::ExponentSize() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize() start
    \Hast::InternalInvocationProxy().Posit32::FractionSize()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\ <= false;
                \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Finished.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().0
                case \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\) then 
                            \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningIndex.0\ := 0;
                            \Posit32::FractionSize().0._Started\ <= true;
                            \Posit32::FractionSize().0.this.parameter.In\ <= \Posit32::GetExponentValue().0.Posit32::FractionSize().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionSize().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningState.0\ := AfterFinished;
                                    \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\ <= true;
                                    \Posit32::FractionSize().0._Started\ <= false;
                                    \Posit32::GetExponentValue().0.Posit32::FractionSize().return.0\ <= \Posit32::FractionSize().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::GetExponentValue().0.Posit32::FractionSize()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::GetExponentValue().0.runningState.0\ := WaitingForStarted;
                            \Posit32::GetExponentValue().0.Posit32::FractionSize()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().0
                case \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\) then 
                            \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningIndex.0\ := 0;
                            \Posit32::FractionSize().0._Started\ <= true;
                            \Posit32::FractionSize().0.this.parameter.In\ <= \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionSize().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningState.0\ := AfterFinished;
                                    \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Finished.0\ <= true;
                                    \Posit32::FractionSize().0._Started\ <= false;
                                    \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize().return.0\ <= \Posit32::FractionSize().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Posit32::FractionWithHiddenBit().0.runningState.0\ := WaitingForStarted;
                            \Posit32::FractionWithHiddenBit().0.Posit32::FractionSize()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Posit32::FractionSize().0._Started\ <= true;
                            \Posit32::FractionSize().0.this.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize().this.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Posit32::FractionSize().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Finished.0\ <= true;
                                    \Posit32::FractionSize().0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize().return.0\ <= \Posit32::FractionSize().0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Posit32::FractionSize().Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionSize()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize() end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16) start
    -- Signal connections for System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().0 (#0):
    \Posit32::SetOne(UInt32,UInt16).0._Started\ <= \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Started.0\;
    \Posit32::SetOne(UInt32,UInt16).0.bits.parameter.In\ <= \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).bits.parameter.Out.0\;
    \Posit32::SetOne(UInt32,UInt16).0.index.parameter.In\ <= \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).index.parameter.Out.0\;
    \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16)._Finished.0\ <= \Posit32::SetOne(UInt32,UInt16).0._Finished\;
    \Posit32::FractionWithHiddenBit().0.Posit32::SetOne(UInt32,UInt16).return.0\ <= \Posit32::SetOne(UInt32,UInt16).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16) start
    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt32,UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt32,UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt32,UInt16).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt32,UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt32,UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt32,UInt16).0._Started\ <= false;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) start
    -- Signal connections for Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 (#0):
    \Boolean Quire::op_Equality(Quire,Quire).0._Started\ <= \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\;
    \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.Out.0\;
    \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.Out.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Finished.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0._Finished\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).return.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0.return\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.In.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.Out\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.In.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsNaN() start
    -- Signal connections for Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 (#0):
    \Posit32::IsNaN().0._Started\ <= \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Started.0\;
    \Posit32::IsNaN().0.this.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN().this.parameter.Out.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN()._Finished.0\ <= \Posit32::IsNaN().0._Finished\;
    \Posit32::FusedSum(Posit32[],Quire).0.Posit32::IsNaN().return.0\ <= \Posit32::IsNaN().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Posit32::IsNaN() end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) start
    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= true;
                            \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\;
                            \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_Addition(Quire,Quire).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= true;
                                    \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).return.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.return\;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                            \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= true;
                            \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\;
                            \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_Addition(Quire,Quire).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= true;
                                    \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= false;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).return.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.return\;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit() start
    -- Signal connections for Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::FractionWithHiddenBit().0._Started\ <= \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Started.0\;
    \Posit32::FractionWithHiddenBit().0.this.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit().this.parameter.Out.0\;
    \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit()._Finished.0\ <= \Posit32::FractionWithHiddenBit().0._Finished\;
    \Quire Posit32::op_Explicit(Posit32).0.Posit32::FractionWithHiddenBit().return.0\ <= \Posit32::FractionWithHiddenBit().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16) start
    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor() start
    -- Signal connections for Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 (#0):
    \Posit32::CalculateScaleFactor().0._Started\ <= \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Started.0\;
    \Posit32::CalculateScaleFactor().0.this.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor().this.parameter.Out.0\;
    \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor()._Finished.0\ <= \Posit32::CalculateScaleFactor().0._Finished\;
    \Quire Posit32::op_Explicit(Posit32).0.Posit32::CalculateScaleFactor().return.0\ <= \Posit32::CalculateScaleFactor().0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Finished.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\) when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\ when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
set_multicycle_path 9 -setup -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0*}]
set_multicycle_path 8 -hold -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0*}]
set_multicycle_path 9 -setup -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1*}]
set_multicycle_path 8 -hold -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1*}]-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory)

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
        
package SimpleMemory is
    -- Data conversion functions:
    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned;
        
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector;
    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean;
        
    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector;
    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed;
end SimpleMemory;
        
package body SimpleMemory is

    function ConvertUInt32ToStdLogicVector(input: unsigned(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertUInt32ToStdLogicVector;
    
    function ConvertStdLogicVectorToUInt32(input : std_logic_vector) return unsigned is
    begin
        return unsigned(input);
    end ConvertStdLogicVectorToUInt32;
    
    function ConvertBooleanToStdLogicVector(input: boolean) return std_logic_vector is 
    begin
        case input is
            when true => return X"FFFFFFFF";
            when false => return X"00000000";
            when others => return X"00000000";
        end case;
    end ConvertBooleanToStdLogicVector;

    function ConvertStdLogicVectorToBoolean(input : std_logic_vector) return boolean is 
    begin
        -- In .NET a false is all zeros while a true is at least one 1 bit (or more), so using the same logic here.
        return not(input = X"00000000");
    end ConvertStdLogicVectorToBoolean;

    function ConvertInt32ToStdLogicVector(input: signed(31 downto 0)) return std_logic_vector is
    begin
        return std_logic_vector(input);
    end ConvertInt32ToStdLogicVector;

    function ConvertStdLogicVectorToInt32(input : std_logic_vector) return signed is
    begin
        return signed(input);
    end ConvertStdLogicVectorToInt32;

end SimpleMemory;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;
library work;
use work.SimpleMemory.all;

entity Hast_IP is 
    port(
        \DataIn\: In std_logic_vector(31 downto 0);
        \DataOut\: Out std_logic_vector(31 downto 0);
        \CellIndex\: Out integer;
        \ReadEnable\: Out boolean;
        \WriteEnable\: Out boolean;
        \ReadsDone\: In boolean;
        \WritesDone\: In boolean;
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the
    -- ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be
    --             called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID
    --             should be used.
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts
    --        internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of
    --             the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.
    -- * DataIn: Data read out from the memory (usually on-board DDR RAM, but depends on the framework) should be assigned to
    --           this port by the framework. The width of this port is always 32b, independent of the hardware platform (if the
    --           bus to the memory is wider then caching needs to be implemented in the framework to make use of it). Inputs of
    --           the algorithm implemented in Hast_IP all come through this port.
    -- * DataOut: Data to be written to the memory is assigned to this port. The width of this port is always 32b, independent
    --            of the hardware platform (if the bus to the memory is wider then caching needs to be implemented in the
    --            framework to make use of it). Outputs of the algorithm implemented in Hast_IP all go through this port.
    -- * CellIndex: Zero-based index of the SimpleMemory memory cell currently being read or written. Transformed code in
    --              Hastlayer can access memory in a simplified fashion by addressing 32b "cells", the accessible physical
    --              memory space being divided up in such individually addressable cells.
    -- * ReadEnable: Indicates whether a memory read operation is initiated. The process of a memory read is as following:
    --     1. ReadEnable is FALSE by default. It's set to TRUE when a memory read is started. CellIndex is set to the index of
    --        the memory cell to be read out.
    --     2. Waiting for ReadsDone to be TRUE.
    --     3. Once ReadsDone is TRUE, data from DataIn will be read out and ReadEnable set to FALSE.
    -- * WriteEnable: Indicates whether a memory write operation is initiated. The process of a memory write is as following:
    --     1. WriteEnable is FALSE by default. It's set to TRUE when a memory write is started. CellIndex is set to the index
    --        of the memory cell to be written and the output data is assigned to DataOut.
    --     2. Waiting for WritesDone to be TRUE.
    --     3. Once WritesDone is TRUE, WriteEnable is set to FALSE.
    -- * ReadsDone: Indicates whether a memory read operation is completed.
    -- * WritesDone: Indicates whether a memory write operation is completed.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name
    --   corresponds to the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic
    --   operations (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states
    --   can take more than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- When put on variables and signals this attribute instructs Vivado not to merge them, thus allowing us to define multi-cycle paths properly.
    attribute dont_touch: string;


    -- Custom inter-dependent type declarations start
    type \Lombiq.Arithmetics.Posit32\ is record 
        \IsNull\: boolean;
        \PositBits\: unsigned(31 downto 0);
    end record;
    type \Lombiq.Arithmetics.Posit32_Array\ is array (integer range <>) of \Lombiq.Arithmetics.Posit32\;
    type \unsigned64_Array\ is array (integer range <>) of unsigned(63 downto 0);
    type \Lombiq.Arithmetics.Quire\ is record 
        \IsNull\: boolean;
        \Size\: unsigned(15 downto 0);
        \SegmentCount\: unsigned(15 downto 0);
        \Segments\: \unsigned64_Array\(0 to 7);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 declarations start
    -- State machine states:
    type \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._States\ is (
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_1\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_2\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_3\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_4\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_5\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_6\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_7\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_8\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_9\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_14\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_16\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_20\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_21\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_26\, 
        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_27\);
    -- Signals:
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\: std_logic_vector(31 downto 0) := (others => '0');
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.Out.0\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.In.0\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Finished.0\: boolean := false;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Finished.0\: boolean := false;
    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(UInt32,Boolean).0._States\ is (
        \Posit32::.ctor(UInt32,Boolean).0._State_0\, 
        \Posit32::.ctor(UInt32,Boolean).0._State_1\, 
        \Posit32::.ctor(UInt32,Boolean).0._State_2\);
    -- Signals:
    Signal \Posit32::.ctor(UInt32,Boolean).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32,Boolean).0._Started\: boolean := false;
    Signal \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\: boolean := false;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(Quire).0._States\ is (
        \Posit32::.ctor(Quire).0._State_0\, 
        \Posit32::.ctor(Quire).0._State_1\, 
        \Posit32::.ctor(Quire).0._State_2\, 
        \Posit32::.ctor(Quire).0._State_3\, 
        \Posit32::.ctor(Quire).0._State_4\, 
        \Posit32::.ctor(Quire).0._State_5\, 
        \Posit32::.ctor(Quire).0._State_6\, 
        \Posit32::.ctor(Quire).0._State_7\, 
        \Posit32::.ctor(Quire).0._State_8\, 
        \Posit32::.ctor(Quire).0._State_9\, 
        \Posit32::.ctor(Quire).0._State_10\, 
        \Posit32::.ctor(Quire).0._State_11\, 
        \Posit32::.ctor(Quire).0._State_12\, 
        \Posit32::.ctor(Quire).0._State_13\, 
        \Posit32::.ctor(Quire).0._State_14\, 
        \Posit32::.ctor(Quire).0._State_15\, 
        \Posit32::.ctor(Quire).0._State_16\, 
        \Posit32::.ctor(Quire).0._State_17\, 
        \Posit32::.ctor(Quire).0._State_18\, 
        \Posit32::.ctor(Quire).0._State_19\, 
        \Posit32::.ctor(Quire).0._State_20\, 
        \Posit32::.ctor(Quire).0._State_21\, 
        \Posit32::.ctor(Quire).0._State_22\, 
        \Posit32::.ctor(Quire).0._State_23\, 
        \Posit32::.ctor(Quire).0._State_24\);
    -- Signals:
    Signal \Posit32::.ctor(Quire).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Quire).0.q.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0._Started\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Quire).0.q.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\: boolean := false;
    Signal \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(UInt32).0._States\ is (
        \Posit32::.ctor(UInt32).0._State_0\, 
        \Posit32::.ctor(UInt32).0._State_1\, 
        \Posit32::.ctor(UInt32).0._State_2\);
    -- Signals:
    Signal \Posit32::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(UInt32).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32).0._Started\: boolean := false;
    Signal \Posit32::.ctor(UInt32).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(UInt32).0.value.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 declarations end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 declarations start
    -- State machine states:
    type \Posit32::.ctor(Int32).0._States\ is (
        \Posit32::.ctor(Int32).0._State_0\, 
        \Posit32::.ctor(Int32).0._State_1\, 
        \Posit32::.ctor(Int32).0._State_2\, 
        \Posit32::.ctor(Int32).0._State_3\);
    -- Signals:
    Signal \Posit32::.ctor(Int32).0._Finished\: boolean := false;
    Signal \Posit32::.ctor(Int32).0.this.parameter.Out\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \Posit32::.ctor(Int32).0._Started\: boolean := false;
    Signal \Posit32::.ctor(Int32).0.this.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.value.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\: boolean := false;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 declarations start
    -- State machine states:
    type \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._States\ is (
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_46\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_50\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_51\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_52\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_53\, 
        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_54\);
    -- Signals:
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\: boolean := false;
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Posit32::FusedSum(Posit32[],Quire).0._States\ is (
        \Posit32::FusedSum(Posit32[],Quire).0._State_0\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_1\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_2\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_3\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_4\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_5\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_6\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_7\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_8\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_9\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_10\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_11\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_12\, 
        \Posit32::FusedSum(Posit32[],Quire).0._State_13\);
    -- Signals:
    Signal \Posit32::FusedSum(Posit32[],Quire).0._Finished\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.Out\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\: \Lombiq.Arithmetics.Posit32\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0._Started\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.In\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
    Signal \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).return.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\: boolean := false;
    Signal \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 declarations start
    -- State machine states:
    type \Quire Posit32::op_Explicit(Posit32).0._States\ is (
        \Quire Posit32::op_Explicit(Posit32).0._State_0\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_1\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_2\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_3\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_4\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_5\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_6\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_7\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_8\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_9\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_10\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_11\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_12\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_13\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_14\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_15\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_16\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_17\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_18\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_19\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_20\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_21\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_22\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_23\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_24\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_25\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_26\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_27\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_28\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_29\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_30\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_31\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_32\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_33\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_34\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_35\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_36\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_37\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_38\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_39\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_40\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_41\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_42\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_43\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_44\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_45\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_46\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_47\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_48\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_49\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_50\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_51\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_52\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_53\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_54\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_55\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_56\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_57\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_58\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_59\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_60\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_61\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_62\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_63\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_64\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_65\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_66\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_67\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_68\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_69\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_70\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_71\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_72\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_73\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_74\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_75\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_76\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_77\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_78\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_79\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_80\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_81\, 
        \Quire Posit32::op_Explicit(Posit32).0._State_82\);
    -- Signals:
    Signal \Quire Posit32::op_Explicit(Posit32).0._Finished\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0._Started\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\: \Lombiq.Arithmetics.Posit32\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\: boolean := false;
    Signal \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).return.0\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 declarations end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 declarations start
    -- State machine states:
    type \Quire::.ctor(UInt64[],UInt16).0._States\ is (
        \Quire::.ctor(UInt64[],UInt16).0._State_0\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_1\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_2\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_3\, 
        \Quire::.ctor(UInt64[],UInt16).0._State_4\);
    -- Signals:
    Signal \Quire::.ctor(UInt64[],UInt16).0._Finished\: boolean := false;
    Signal \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire::.ctor(UInt64[],UInt16).0._Started\: boolean := false;
    Signal \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 declarations end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 declarations start
    -- State machine states:
    type \Quire::.ctor(UInt32,UInt16).0._States\ is (
        \Quire::.ctor(UInt32,UInt16).0._State_0\, 
        \Quire::.ctor(UInt32,UInt16).0._State_1\, 
        \Quire::.ctor(UInt32,UInt16).0._State_2\, 
        \Quire::.ctor(UInt32,UInt16).0._State_3\, 
        \Quire::.ctor(UInt32,UInt16).0._State_4\, 
        \Quire::.ctor(UInt32,UInt16).0._State_5\, 
        \Quire::.ctor(UInt32,UInt16).0._State_6\, 
        \Quire::.ctor(UInt32,UInt16).0._State_7\, 
        \Quire::.ctor(UInt32,UInt16).0._State_8\);
    -- Signals:
    Signal \Quire::.ctor(UInt32,UInt16).0._Finished\: boolean := false;
    Signal \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt32,UInt16).0._Started\: boolean := false;
    Signal \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\: unsigned(15 downto 0) := to_unsigned(0, 16);
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Quire Quire::op_Addition(Quire,Quire).0._States\ is (
        \Quire Quire::op_Addition(Quire,Quire).0._State_0\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_1\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_2\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_3\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_4\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_5\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_6\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_7\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_8\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_9\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_10\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_11\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_12\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_13\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_14\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_15\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_16\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_17\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_18\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_19\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_20\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_21\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_22\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_23\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_24\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_25\, 
        \Quire Quire::op_Addition(Quire,Quire).0._State_26\);
    -- Signals:
    Signal \Quire Quire::op_Addition(Quire,Quire).0._Finished\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,Quire).0._Started\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 declarations start
    -- State machine states:
    type \Quire Quire::op_Addition(Quire,UInt32).0._States\ is (
        \Quire Quire::op_Addition(Quire,UInt32).0._State_0\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_1\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_2\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_3\, 
        \Quire Quire::op_Addition(Quire,UInt32).0._State_4\);
    -- Signals:
    Signal \Quire Quire::op_Addition(Quire,UInt32).0._Finished\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0._Started\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\: boolean := false;
    Signal \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).return.0\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Quire Quire::op_OnesComplement(Quire).0._States\ is (
        \Quire Quire::op_OnesComplement(Quire).0._State_0\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_1\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_2\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_3\, 
        \Quire Quire::op_OnesComplement(Quire).0._State_4\);
    -- Signals:
    Signal \Quire Quire::op_OnesComplement(Quire).0._Finished\: boolean := false;
    Signal \Quire Quire::op_OnesComplement(Quire).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_OnesComplement(Quire).0._Started\: boolean := false;
    Signal \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \Boolean Quire::op_Equality(Quire,Quire).0._States\ is (
        \Boolean Quire::op_Equality(Quire,Quire).0._State_0\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_1\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_2\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_3\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_4\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_5\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_6\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_7\, 
        \Boolean Quire::op_Equality(Quire,Quire).0._State_8\);
    -- Signals:
    Signal \Boolean Quire::op_Equality(Quire,Quire).0._Finished\: boolean := false;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.return\: boolean := false;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0._Started\: boolean := false;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations start
    -- State machine states:
    type \Quire Quire::op_RightShift(Quire,Int32).0._States\ is (
        \Quire Quire::op_RightShift(Quire,Int32).0._State_0\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_1\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_2\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_3\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_4\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_5\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_6\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_7\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_8\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_9\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_10\, 
        \Quire Quire::op_RightShift(Quire,Int32).0._State_11\);
    -- Signals:
    Signal \Quire Quire::op_RightShift(Quire,Int32).0._Finished\: boolean := false;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0._Started\: boolean := false;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.right.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations start
    -- State machine states:
    type \Quire Quire::op_LeftShift(Quire,Int32).0._States\ is (
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_1\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_4\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\, 
        \Quire Quire::op_LeftShift(Quire,Int32).0._State_9\);
    -- Signals:
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\: boolean := false;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.return\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\: boolean := false;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0._Started\: boolean := false;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\: \Lombiq.Arithmetics.Quire\;
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
    Signal \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\: boolean := false;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 declarations end


    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \UInt64 Quire::op_Explicit(Quire).0._States\ is (
        \UInt64 Quire::op_Explicit(Quire).0._State_0\, 
        \UInt64 Quire::op_Explicit(Quire).0._State_1\, 
        \UInt64 Quire::op_Explicit(Quire).0._State_2\);
    -- Signals:
    Signal \UInt64 Quire::op_Explicit(Quire).0._Finished\: boolean := false;
    Signal \UInt64 Quire::op_Explicit(Quire).0.return\: unsigned(63 downto 0) := to_unsigned(0, 64);
    Signal \UInt64 Quire::op_Explicit(Quire).0.x.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \UInt64 Quire::op_Explicit(Quire).0._Started\: boolean := false;
    Signal \UInt64 Quire::op_Explicit(Quire).0.x.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations start
    -- State machine states:
    type \UInt32 Quire::op_Explicit(Quire).0._States\ is (
        \UInt32 Quire::op_Explicit(Quire).0._State_0\, 
        \UInt32 Quire::op_Explicit(Quire).0._State_1\, 
        \UInt32 Quire::op_Explicit(Quire).0._State_2\);
    -- Signals:
    Signal \UInt32 Quire::op_Explicit(Quire).0._Finished\: boolean := false;
    Signal \UInt32 Quire::op_Explicit(Quire).0.return\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \UInt32 Quire::op_Explicit(Quire).0.x.parameter.Out\: \Lombiq.Arithmetics.Quire\;
    Signal \UInt32 Quire::op_Explicit(Quire).0._Started\: boolean := false;
    Signal \UInt32 Quire::op_Explicit(Quire).0.x.parameter.In\: \Lombiq.Arithmetics.Quire\;
    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 state machine start
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._StateMachine\: process (\Clock\) 
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\: \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._States\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\: boolean := false;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\: std_logic_vector(31 downto 0) := (others => '0');
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.1\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\: \Lombiq.Arithmetics.Posit32\;
        attribute dont_touch of \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\: Variable is "true";
        attribute dont_touch of \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\: Variable is "true";
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\ <= (others => '0');
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ <= false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\ := (others => '0');
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\ := to_signed(0, 64);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\ := to_signed(0, 64);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\ := false;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\ := (others => '0');
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\ := to_signed(0, 32);
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\ := to_signed(0, 32);
            else 
                case \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ is 
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\ = true) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\ = true) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\ <= true;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = memory.ReadUInt32 (0);
                        -- 
                        -- Begin SimpleMemory read.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_3\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\ := \DataIn\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ := ConvertStdLogicVectorToUInt32(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.0\);
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32[] array;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array = new Posit32[160];
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Quire quire;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 object29;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- object29 = new Posit32 (0);
                            -- 
                            -- Initializing record fields to their defaults.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\.\IsNull\ := false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\.\PositBits\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- quire = Posit32.op_Explicit (object29);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object29\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.0\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).return.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = num / 160u;
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_6\ => 
                        -- Waiting for the result to appear in \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(9, 32)) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_7\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ / to_unsigned(160, 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_7\ => 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((long)(num - num / 160u * 160u) != 0L) {
                        -- 	num2 = (uint)((long)(num2) + 1L);
                        -- }
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_8\ => 
                        -- Waiting for the result to appear in \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(9, 32)) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_9\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ / to_unsigned(160, 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_9\ => 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1\ * to_unsigned(160, 32), 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\ := signed(SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\ - \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.2\, 64));
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\ := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.3\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\ and ends in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\.
                        --     * Execution after either branch will continue in the following state: \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\.

                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.4\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\ => 
                        -- State after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 0;
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num3) < (long)(num2)) {
                        -- 	int num4;
                        -- 	num4 = 0;
                        -- 	while (num4 < 160) {
                        -- 		Posit32 conditional1;
                        -- 		if (((long)(num3 * 160 + num4) < (long)(num))) {
                        -- 			conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                        -- 		} else {
                        -- 			conditional1 = new Posit32 (0);
                        -- 		}
                        -- 		array [num4] = (conditional1);
                        -- 		num4 = num4 + 1;
                        -- 	}
                        -- 	quire = Posit32.FusedSum (array, quire);
                        -- 	num3 = num3 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\ => 
                        -- True branch of the if-else started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num2 = (uint)((long)(num2) + 1L);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (uint)((long)(num2) + 1L);
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\ := SmartResize(unsigned(signed(SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\), 64)) + to_signed(1, 64)), 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\ := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.5\);
                        -- Going to the state after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_10\.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_12\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\ => 
                        -- Repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\.
                        -- The while loop's condition:
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\ := SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\), 64) < signed(SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num2\), 64));
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.6\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num4;
                            -- 	num4 = 0;
                            -- 	while (num4 < 160) {
                            -- 		Posit32 conditional1;
                            -- 		if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 			conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- 		} else {
                            -- 			conditional1 = new Posit32 (0);
                            -- 		}
                            -- 		array [num4] = (conditional1);
                            -- 		num4 = num4 + 1;
                            -- 	}
                            -- 	quire = Posit32.FusedSum (array, quire);
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = 0;
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num4 < 160) {
                            -- 	Posit32 conditional1;
                            -- 	if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 		conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- 	} else {
                            -- 		conditional1 = new Posit32 (0);
                            -- 	}
                            -- 	array [num4] = (conditional1);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_14\ => 
                        -- State after the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object30;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object30 = new Posit32 (quire);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\.\IsNull\ := false;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire)
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\ => 
                        -- Repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\.
                        -- The while loop's condition:
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ < to_signed(160, 32);
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.7\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	Posit32 conditional1;
                            -- 	if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 		conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- 	} else {
                            -- 		conditional1 = new Posit32 (0);
                            -- 	}
                            -- 	array [num4] = (conditional1);
                            -- 	num4 = num4 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Posit32 conditional1;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (((long)(num3 * 160 + num4) < (long)(num))) {
                            -- 	conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                            -- } else {
                            -- 	conditional1 = new Posit32 (0);
                            -- }
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ * to_signed(160, 32), 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6961
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_16\ => 
                        -- State after the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- quire = Posit32.FusedSum (array, quire);
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire)
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.8\ + \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\, 64);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\ := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.9\) < signed(SmartResize((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num\), 64));

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\ and ends in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\.
                        --     * The false branch starts in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\ and ends in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\.
                        --     * Execution after either branch will continue in the following state: \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\.

                        if ((\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.10\)) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\;
                        else 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.616
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\ => 
                        -- State after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                        -- The following section was transformed from the .NET statement below:
                        -- array [num4] = (conditional1);
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\(to_integer(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\)) := (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\);
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num4 + 1;
                        -- 
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ + to_signed(1, 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.14\;
                        -- Returning to the repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\ if the loop wasn't exited with a state change.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_19\ => 
                        -- True branch of the if-else started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional1 = new Posit32 (memory.ReadUInt32 (1 + num3 * 160 + num4), true);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\IsNull\ := false;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\ := SmartResize(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ * to_signed(160, 32), 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\ := to_signed(1, 32) + \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.11\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.12\ + \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num4\;
                        -- Begin SimpleMemory read.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.13\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_21\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\ReadsDone\ = true) then 
                            -- SimpleMemory read finished.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\ := \DataIn\;
                            -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\ <= ConvertStdLogicVectorToUInt32(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.dataIn.1\);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\;
                            -- Going to the state after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                            if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_22\) then 
                                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_23\ => 
                        -- False branch of the if-else started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional1 = new Posit32 (0);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional1 = new Posit32 (0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\IsNull\ := false;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\ <= to_signed(0, 32);
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= true;
                        \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.conditional1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\;
                            -- Going to the state after the if-else which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_17\.
                            if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_24\) then 
                                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_18\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.1\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).return.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.array\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.In.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.In.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = num3 + 1;
                            -- 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ + to_signed(1, 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.num3\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.15\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_11\ if the loop wasn't exited with a state change.
                            if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_25\) then 
                                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_13\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire)
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ = \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Finished.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.In.0\;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.quire\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- memory.WriteUInt32 (0, object30.PositBits);
                            -- 
                            -- Begin SimpleMemory write.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\ <= to_signed(0, 32);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ <= true;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\ <= ConvertUInt32ToStdLogicVector(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.object30\.\PositBits\);
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_27\ => 
                        -- Waiting for the SimpleMemory operation to finish.
                        if (\WritesDone\ = true) then 
                            -- SimpleMemory write finished.
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ <= false;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State\ := \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 state machine start
    \Posit32::.ctor(UInt32,Boolean).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(UInt32,Boolean).0._State\: \Posit32::.ctor(UInt32,Boolean).0._States\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
        Variable \Posit32::.ctor(UInt32,Boolean).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(UInt32,Boolean).0.bits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\: boolean := false;
        Variable \Posit32::.ctor(UInt32,Boolean).0.conditional2\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= false;
                \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
                \Posit32::.ctor(UInt32,Boolean).0.bits\ := to_unsigned(0, 32);
                \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\ := false;
                \Posit32::.ctor(UInt32,Boolean).0.conditional2\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(UInt32,Boolean).0._State\ is 
                    when \Posit32::.ctor(UInt32,Boolean).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(UInt32,Boolean).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32,Boolean).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(UInt32,Boolean).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(UInt32,Boolean).0._Finished\ <= false;
                            \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\ <= \Posit32::.ctor(UInt32,Boolean).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32,Boolean).0._State_2\ => 
                        \Posit32::.ctor(UInt32,Boolean).0.this\ := \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\;
                        \Posit32::.ctor(UInt32,Boolean).0.bits\ := \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\;
                        \Posit32::.ctor(UInt32,Boolean).0.fromBitMask\ := \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional2 = bits;
                        -- 
                        \Posit32::.ctor(UInt32,Boolean).0.conditional2\ := \Posit32::.ctor(UInt32,Boolean).0.bits\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = (conditional2);
                        -- 
                        \Posit32::.ctor(UInt32,Boolean).0.this\.\PositBits\ := (\Posit32::.ctor(UInt32,Boolean).0.conditional2\);
                        \Posit32::.ctor(UInt32,Boolean).0._State\ := \Posit32::.ctor(UInt32,Boolean).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 state machine start
    \Posit32::.ctor(Quire).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(Quire).0._State\: \Posit32::.ctor(Quire).0._States\ := \Posit32::.ctor(Quire).0._State_0\;
        Variable \Posit32::.ctor(Quire).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(Quire).0.q\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.signBit\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.num2\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.1\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.return.2\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.3\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.4\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.return.6\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.return.7\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Posit32::.ctor(Quire).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.num5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.9\: boolean := false;
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Quire).0.binaryOperationResult.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.return.9\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::.ctor(Quire).0.return.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Quire).0.return.11\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(Quire).0._Finished\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= false;
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_0\;
                \Posit32::.ctor(Quire).0.signBit\ := false;
                \Posit32::.ctor(Quire).0.num\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.num2\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.return.1\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.binaryOperationResult.0\ := false;
                \Posit32::.ctor(Quire).0.return.5\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.binaryOperationResult.1\ := false;
                \Posit32::.ctor(Quire).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.return.8\ := to_unsigned(0, 64);
                \Posit32::.ctor(Quire).0.num3\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.4\ := false;
                \Posit32::.ctor(Quire).0.num4\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.num5\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.6\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.8\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.9\ := false;
                \Posit32::.ctor(Quire).0.binaryOperationResult.10\ := to_signed(0, 32);
                \Posit32::.ctor(Quire).0.binaryOperationResult.11\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.return.10\ := to_unsigned(0, 32);
                \Posit32::.ctor(Quire).0.return.11\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(Quire).0._State\ is 
                    when \Posit32::.ctor(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(Quire).0._Started\ = true) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(Quire).0._Started\ = true) then 
                            \Posit32::.ctor(Quire).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(Quire).0._Finished\ <= false;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(Quire).0.this.parameter.Out\ <= \Posit32::.ctor(Quire).0.this\;
                        \Posit32::.ctor(Quire).0.q.parameter.Out\ <= \Posit32::.ctor(Quire).0.q\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_2\ => 
                        \Posit32::.ctor(Quire).0.this\ := \Posit32::.ctor(Quire).0.this.parameter.In\;
                        \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.q.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 2147483648u;
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::.ctor(Quire).0.this\.\PositBits\ := "10000000000000000000000000000000";
                        -- The following section was transformed from the .NET statement below:
                        -- bool signBit;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- signBit = false;
                        -- 
                        \Posit32::.ctor(Quire).0.signBit\ := false;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 511;
                        -- 
                        \Posit32::.ctor(Quire).0.num\ := to_signed(511, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(448, 32);
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.0\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.0\;
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.1\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.0\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.num2\ := \Posit32::.ctor(Quire).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num2 >= 9223372036854775808uL) {
                            -- 	q = Quire.op_OnesComplement (q);
                            -- 	q = Quire.op_Addition (q, 1u);
                            -- 	signBit = true;
                            -- }
                            -- 
                            -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                            \Posit32::.ctor(Quire).0.binaryOperationResult.0\ := \Posit32::.ctor(Quire).0.num2\ >= "1000000000000000000000000000000000000000000000000000000000000000";

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::.ctor(Quire).0._State_6\ and ends in state \Posit32::.ctor(Quire).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \Posit32::.ctor(Quire).0._State_5\.

                            if (\Posit32::.ctor(Quire).0.binaryOperationResult.0\) then 
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_6\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2999
                    when \Posit32::.ctor(Quire).0._State_5\ => 
                        -- State after the if-else which was started in state \Posit32::.ctor(Quire).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(448, 32);
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_6\ => 
                        -- True branch of the if-else started in state \Posit32::.ctor(Quire).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	q = Quire.op_OnesComplement (q);
                        -- 	q = Quire.op_Addition (q, 1u);
                        -- 	signBit = true;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- q = Quire.op_OnesComplement (q);
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.2\ := \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- q = Quire.op_Addition (q, 1u);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32)
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\ <= to_unsigned(1, 32);
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_8\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.3\ := \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- signBit = true;
                            -- 
                            \Posit32::.ctor(Quire).0.signBit\ := true;
                            -- Going to the state after the if-else which was started in state \Posit32::.ctor(Quire).0._State_4\.
                            if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_8\) then 
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_5\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.4\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.4\;
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.5\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.4\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.num2\ := \Posit32::.ctor(Quire).0.return.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- while (num2 < 9223372036854775808uL) {
                            -- 	q = Quire.op_LeftShift (q, 1);
                            -- 	num = num - 1;
                            -- 	num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_11\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::.ctor(Quire).0._State_10\.
                        -- The while loop's condition:
                        -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Posit32::.ctor(Quire).0.binaryOperationResult.1\ := \Posit32::.ctor(Quire).0.num2\ < "1000000000000000000000000000000000000000000000000000000000000000";
                        if (\Posit32::.ctor(Quire).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	q = Quire.op_LeftShift (q, 1);
                            -- 	num = num - 1;
                            -- 	num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- q = Quire.op_LeftShift (q, 1);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(1, 32);
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_13\;
                        else 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_12\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2897
                    when \Posit32::.ctor(Quire).0._State_12\ => 
                        -- State after the while loop which was started in state \Posit32::.ctor(Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num - 240;
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.3\ := \Posit32::.ctor(Quire).0.num\ - to_signed(240, 32);
                        \Posit32::.ctor(Quire).0.num3\ := \Posit32::.ctor(Quire).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num == 0) {
                        -- 	@this.PositBits = 0u;
                        -- 	return;
                        -- }
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.4\ := \Posit32::.ctor(Quire).0.num\ = to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::.ctor(Quire).0._State_17\ and ends in state \Posit32::.ctor(Quire).0._State_17\.
                        --     * Execution after either branch will continue in the following state: \Posit32::.ctor(Quire).0._State_16\.

                        if (\Posit32::.ctor(Quire).0.binaryOperationResult.4\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_17\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5903
                    when \Posit32::.ctor(Quire).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.6\ := \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.return.6\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num - 1;
                            -- 
                            \Posit32::.ctor(Quire).0.binaryOperationResult.2\ := \Posit32::.ctor(Quire).0.num\ - to_signed(1, 32);
                            \Posit32::.ctor(Quire).0.num\ := \Posit32::.ctor(Quire).0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = Quire.op_Explicit (Quire.op_RightShift (q, 448));
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(448, 32);
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::.ctor(Quire).0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.7\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.7\;
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.8\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.7\ := \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            \Posit32::.ctor(Quire).0.num2\ := \Posit32::.ctor(Quire).0.return.8\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::.ctor(Quire).0._State_10\ if the loop wasn't exited with a state change.
                            if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_15\) then 
                                \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_11\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_16\ => 
                        -- State after the if-else which was started in state \Posit32::.ctor(Quire).0._State_12\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num3 / 4;
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.5\ := \Posit32::.ctor(Quire).0.num3\ / to_signed(4, 32);
                        \Posit32::.ctor(Quire).0.num4\ := \Posit32::.ctor(Quire).0.binaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (uint)(num3 - num3 / 4 * 4);
                        -- 
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0.7044
                    when \Posit32::.ctor(Quire).0._State_17\ => 
                        -- True branch of the if-else started in state \Posit32::.ctor(Quire).0._State_12\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	@this.PositBits = 0u;
                        -- 	return;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 0u;
                        -- 
                        \Posit32::.ctor(Quire).0.this\.\PositBits\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- return;
                        -- 
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::.ctor(Quire).0._State_12\.
                        if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_17\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_18\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::.ctor(Quire).0.binaryOperationResult.6\ := \Posit32::.ctor(Quire).0.num3\ / to_signed(4, 32);
                        \Posit32::.ctor(Quire).0.binaryOperationResult.7\ := SmartResize(\Posit32::.ctor(Quire).0.binaryOperationResult.6\ * to_signed(4, 32), 32);
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0.8265
                    when \Posit32::.ctor(Quire).0._State_19\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::.ctor(Quire).0.binaryOperationResult.8\ := unsigned(\Posit32::.ctor(Quire).0.num3\ - \Posit32::.ctor(Quire).0.binaryOperationResult.7\);
                        \Posit32::.ctor(Quire).0.num5\ := (\Posit32::.ctor(Quire).0.binaryOperationResult.8\);
                        -- The following section was transformed from the .NET statement below:
                        -- if ((long)(num5) < 0L) {
                        -- 	num4 = num4 - 1;
                        -- 	num5 = (uint)((long)(num5) + 4L);
                        -- }
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.9\ := signed(SmartResize((\Posit32::.ctor(Quire).0.num5\), 64)) < to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::.ctor(Quire).0._State_21\ and ends in state \Posit32::.ctor(Quire).0._State_21\.
                        --     * Execution after either branch will continue in the following state: \Posit32::.ctor(Quire).0._State_20\.

                        if (\Posit32::.ctor(Quire).0.binaryOperationResult.9\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_21\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.616
                    when \Posit32::.ctor(Quire).0._State_20\ => 
                        -- State after the if-else which was started in state \Posit32::.ctor(Quire).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = Posit32.AssemblePositBitsWithRounding (signBit, num4, num5, Quire.op_Explicit (Quire.op_RightShift (q, 480)));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.q\;
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(480, 32);
                        \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= true;
                        \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_22\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_21\ => 
                        -- True branch of the if-else started in state \Posit32::.ctor(Quire).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num4 = num4 - 1;
                        -- 	num5 = (uint)((long)(num5) + 4L);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = num4 - 1;
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.10\ := \Posit32::.ctor(Quire).0.num4\ - to_signed(1, 32);
                        \Posit32::.ctor(Quire).0.num4\ := \Posit32::.ctor(Quire).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (uint)((long)(num5) + 4L);
                        -- 
                        \Posit32::.ctor(Quire).0.binaryOperationResult.11\ := SmartResize(unsigned(signed(SmartResize((\Posit32::.ctor(Quire).0.num5\), 64)) + to_signed(4, 64)), 32);
                        \Posit32::.ctor(Quire).0.num5\ := (\Posit32::.ctor(Quire).0.binaryOperationResult.11\);
                        -- Going to the state after the if-else which was started in state \Posit32::.ctor(Quire).0._State_19\.
                        if (\Posit32::.ctor(Quire).0._State\ = \Posit32::.ctor(Quire).0._State_21\) then 
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7161
                    when \Posit32::.ctor(Quire).0._State_22\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ = \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.9\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\;
                            \Posit32::.ctor(Quire).0.q\ := \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                            \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.9\;
                            \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_23\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire)
                        if (\Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ = \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.10\ := \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).return.0\;
                            \Posit32::.ctor(Quire).0.return.9\ := \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.In.0\;
                            -- Starting state machine invocation for the following method: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.signBit\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.num4\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.num5\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\ <= \Posit32::.ctor(Quire).0.return.10\;
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= true;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Quire).0._State_24\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32)
                        if (\Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ = \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Quire).0.return.11\ := \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\;
                            \Posit32::.ctor(Quire).0.this\.\PositBits\ := \Posit32::.ctor(Quire).0.return.11\;
                            \Posit32::.ctor(Quire).0._State\ := \Posit32::.ctor(Quire).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 state machine start
    \Posit32::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(UInt32).0._State\: \Posit32::.ctor(UInt32).0._States\ := \Posit32::.ctor(UInt32).0._State_0\;
        Variable \Posit32::.ctor(UInt32).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(UInt32).0.value\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(UInt32).0._Finished\ <= false;
                \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_0\;
                \Posit32::.ctor(UInt32).0.value\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(UInt32).0._State\ is 
                    when \Posit32::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(UInt32).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(UInt32).0._Started\ = true) then 
                            \Posit32::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(UInt32).0._Finished\ <= false;
                            \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(UInt32).0.this.parameter.Out\ <= \Posit32::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(UInt32).0._State_2\ => 
                        \Posit32::.ctor(UInt32).0.this\ := \Posit32::.ctor(UInt32).0.this.parameter.In\;
                        \Posit32::.ctor(UInt32).0.value\ := \Posit32::.ctor(UInt32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.PositBits = 0u;
                        -- 
                        \Posit32::.ctor(UInt32).0.this\.\PositBits\ := to_unsigned(0, 32);
                        \Posit32::.ctor(UInt32).0._State\ := \Posit32::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32).0 state machine end


    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 state machine start
    \Posit32::.ctor(Int32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::.ctor(Int32).0._State\: \Posit32::.ctor(Int32).0._States\ := \Posit32::.ctor(Int32).0._State_0\;
        Variable \Posit32::.ctor(Int32).0.this\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::.ctor(Int32).0.value\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::.ctor(Int32).0.conditional3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::.ctor(Int32).0.object32\: \Lombiq.Arithmetics.Posit32\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::.ctor(Int32).0._Finished\ <= false;
                \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= false;
                \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_0\;
                \Posit32::.ctor(Int32).0.value\ := to_signed(0, 32);
                \Posit32::.ctor(Int32).0.conditional3\ := to_unsigned(0, 32);
            else 
                case \Posit32::.ctor(Int32).0._State\ is 
                    when \Posit32::.ctor(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::.ctor(Int32).0._Started\ = true) then 
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::.ctor(Int32).0._Started\ = true) then 
                            \Posit32::.ctor(Int32).0._Finished\ <= true;
                        else 
                            \Posit32::.ctor(Int32).0._Finished\ <= false;
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::.ctor(Int32).0.this.parameter.Out\ <= \Posit32::.ctor(Int32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_2\ => 
                        \Posit32::.ctor(Int32).0.this\ := \Posit32::.ctor(Int32).0.this.parameter.In\;
                        \Posit32::.ctor(Int32).0.value\ := \Posit32::.ctor(Int32).0.value.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Posit32 object32;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object32 = new Posit32 (0u);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::.ctor(Int32).0.object32\.\IsNull\ := false;
                        \Posit32::.ctor(Int32).0.object32\.\PositBits\ := to_unsigned(0, 32);
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32)
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\ <= \Posit32::.ctor(Int32).0.object32\;
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\ <= to_unsigned(0, 32);
                        \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= true;
                        \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::.ctor(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32)
                        if (\Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ = \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\) then 
                            \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\ <= false;
                            \Posit32::.ctor(Int32).0.object32\ := \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- conditional3 = 0u;
                            -- 
                            \Posit32::.ctor(Int32).0.conditional3\ := to_unsigned(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- @this.PositBits = 0u;
                            -- 
                            \Posit32::.ctor(Int32).0.this\.\PositBits\ := to_unsigned(0, 32);
                            \Posit32::.ctor(Int32).0._State\ := \Posit32::.ctor(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 state machine start
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._States\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue_45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_45\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_45\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_44_45\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_44_45\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_44_45\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.startingPosition_46\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_46\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_46\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_46\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2_46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.34\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_47\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_47\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.35\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.36\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.37\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.38\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.39\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_48\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_48\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.40\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_49\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_49\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_49\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.41\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.42\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.43\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_50\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.index_50\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_50\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.46\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.49\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.50\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.51\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.52\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.53\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.55\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.57\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.59\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.60\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.61\: boolean := false;
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.62\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.63\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_51\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_51\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.64\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue_45\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_45\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_45\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_44_45\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_44_45\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_44_45\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.startingPosition_46\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_46\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_46\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_46\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2_46\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.34\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_47\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_47\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.35\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.36\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.37\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.38\ := to_signed(0, 64);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.39\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_48\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_48\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.40\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_49\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_49\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_49\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.41\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.42\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.43\ := to_unsigned(0, 8);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.44\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_50\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.index_50\ := to_unsigned(0, 16);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_50\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.45\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.46\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.47\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.48\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.49\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.50\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.51\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.52\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.53\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.54\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.55\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.56\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.6\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.57\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.58\ := to_signed(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.59\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.60\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.61\ := false;
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.62\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.63\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_51\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_51\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.7\ := to_unsigned(0, 32);
                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.64\ := to_unsigned(0, 32);
            else 
                case \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ is 
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ = true) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ = true) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= true;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\ <= false;
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\ => 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int regimeKValue_45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- regimeKValue_45 = regimeKValue;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue_45\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (regimeKValue_45 > 0) {
                        -- 	uint num_45;
                        -- 	num_45 = (uint)((1 << regimeKValue_45 + 1) - 1);
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 	uint bits_44_45;
                        -- 	bits_44_45 = num_45;
                        -- 	byte return_44_45;
                        -- 	byte b_44_45;
                        -- 	b_44_45 = 0;
                        -- 	while ((long)(bits_44_45) != 0L) {
                        -- 		bits_44_45 = bits_44_45 >> 1;
                        -- 		b_44_45 = (byte)((int)(b_44_45) + 1);
                        -- 	}
                        -- 	return_44_45 = b_44_45;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 	return_45 = num_45 << 32 - (int)(return_44_45) - 1;
                        -- 	goto Exit_45;
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue_45\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.0\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\ => 
                        -- State for the label Exit_45.
                        -- The following section was transformed from the .NET statement below:
                        -- num = return_45;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_45\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_46 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte startingPosition_46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- startingPosition_46 = 31;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.startingPosition_46\ := SmartResize(unsigned(to_signed(31, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_46 = 1;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_46\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits_46 = bits_46 << 32 - (int)(startingPosition_46);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\ := to_signed(32, 32) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.startingPosition_46\), 32));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.11\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_46 = (bits_46 >> 31) & 1u;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_45 = 1073741824u >> -regimeKValue_45;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue_45\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\ := shift_right(to_unsigned(1073741824, 32), to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.0\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_45\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- Exit_45:
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::EncodeRegimeBits(System.Int32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_5\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint num_45;
                        -- 	num_45 = (uint)((1 << regimeKValue_45 + 1) - 1);
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 	uint bits_44_45;
                        -- 	bits_44_45 = num_45;
                        -- 	byte return_44_45;
                        -- 	byte b_44_45;
                        -- 	b_44_45 = 0;
                        -- 	while ((long)(bits_44_45) != 0L) {
                        -- 		bits_44_45 = bits_44_45 >> 1;
                        -- 		b_44_45 = (byte)((int)(b_44_45) + 1);
                        -- 	}
                        -- 	return_44_45 = b_44_45;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 	return_45 = num_45 << 32 - (int)(return_44_45) - 1;
                        -- 	goto Exit_45;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_45 = (uint)((1 << regimeKValue_45 + 1) - 1);
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue_45\ + to_signed(1, 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.1\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\ := unsigned((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.2\) - to_signed(1, 32));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_45\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_44_45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_44_45 = num_45;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_44_45\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_45\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_44_45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_44_45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_44_45 = 0;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_44_45\ := SmartResize(unsigned(to_signed(0, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(bits_44_45) != 0L) {
                        -- 	bits_44_45 = bits_44_45 >> 1;
                        -- 	b_44_45 = (byte)((int)(b_44_45) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_7\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\.
                        -- The while loop's condition:
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_44_45\), 64)) /= to_signed(0, 64);
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.4\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_44_45 = bits_44_45 >> 1;
                            -- 	b_44_45 = (byte)((int)(b_44_45) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_44_45 = bits_44_45 >> 1;
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_44_45\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_44_45\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_44_45 = (byte)((int)(b_44_45) + 1);
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_44_45\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_44_45\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.6\);
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8704
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_8\ => 
                        -- State after the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_44_45 = b_44_45;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_44_45\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_44_45\;
                        -- The following section was transformed from the .NET statement below:
                        -- return_45 = num_45 << 32 - (int)(return_44_45) - 1;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ := to_signed(32, 32) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_44_45\), 32));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.7\ - to_signed(1, 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_45\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.8\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_45\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.9\;
                        -- The following section was transformed from the .NET statement below:
                        -- goto Exit_45;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\ => 
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_2\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_10\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.13\) and to_unsigned(1, 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.14\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits_46 = bits_46 << 1;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.15\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2_46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_46 = 0;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2_46\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2_46) < (int)(startingPosition_46) && bits_46 >> 31 == num_46) {
                        -- 	bits_46 = bits_46 << 1;
                        -- 	b_46 = (byte)((int)(b_46) + 1);
                        -- 	num2_46 = num2_46 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0.7111
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\.
                        -- The while loop's condition:
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2_46\) < signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.startingPosition_46\), 32));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.17\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num_46\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\ => 
                        -- State after the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_46 = b_46;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_46\;
                        -- The following section was transformed from the .NET statement below:
                        -- b = return_46;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_46\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)(28 - (int)(b));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\ := to_signed(28, 32) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\), 32));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.23\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num2 >= 0)) {
                        -- 	conditional4 = (exponentBits << num2);
                        -- } else {
                        -- 	conditional4 = (exponentBits >> -num2);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ >= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.24\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.16\ and \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.18\;
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.19\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_46 = bits_46 << 1;
                            -- 	b_46 = (byte)((int)(b_46) + 1);
                            -- 	num2_46 = num2_46 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_46 = bits_46 << 1;
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.20\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_46 = (byte)((int)(b_46) + 1);
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_46\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_46\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.21\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2_46 = num2_46 + 1;
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2_46\ + to_signed(1, 32);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2_46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.22\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_11\ if the loop wasn't exited with a state change.
                            if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_14\) then 
                                \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_12\;
                            end if;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.27\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num2 < 0) {
                        -- 	uint conditional5;
                        -- 	if ((num2 > 28)) {
                        -- 		conditional5 = (exponentBits >> 32 + num2);
                        -- 	} else {
                        -- 		conditional5 = (exponentBits << 32 + num2);
                        -- 	}
                        -- 	exponentBits = (conditional5);
                        -- 	if (exponentBits < 2147483648u) {
                        -- 		uint conditional6;
                        -- 		if (signBit) {
                        -- 			;
                        -- 			// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 			uint bits_47;
                        -- 			bits_47 = num;
                        -- 			uint return_47;
                        -- 			return_47 = (uint)((long)(~bits_47) + 1L);
                        -- 			// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 			conditional6 = return_47;
                        -- 		} else {
                        -- 			conditional6 = num;
                        -- 		}
                        -- 		return conditional6;
                        -- 	}
                        -- 	uint conditional7;
                        -- 	if ((exponentBits != 2147483648u)) {
                        -- 		conditional7 = ((uint)((long)(num) + 1L));
                        -- 	} else {
                        -- 		conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 	}
                        -- 	num = (conditional7);
                        -- 	uint conditional8;
                        -- 	if (signBit) {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_48;
                        -- 		bits_48 = num;
                        -- 		uint return_48;
                        -- 		return_48 = (uint)((long)(~bits_48) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional8 = return_48;
                        -- 	} else {
                        -- 		conditional8 = num;
                        -- 	}
                        -- 	return conditional8;
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.28\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional4 = (exponentBits << num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional4 = (exponentBits << num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.25\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_16\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional4 = (exponentBits >> -num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional4 = (exponentBits >> -num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.1\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.26\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_13\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_17\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_49;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_49 = fractionBits;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_49\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_49;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_49;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_49 = 0;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_49\ := SmartResize(unsigned(to_signed(0, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(bits_49) != 0L) {
                        -- 	bits_49 = bits_49 >> 1;
                        -- 	b_49 = (byte)((int)(b_49) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional5;
                        -- 	if ((num2 > 28)) {
                        -- 		conditional5 = (exponentBits >> 32 + num2);
                        -- 	} else {
                        -- 		conditional5 = (exponentBits << 32 + num2);
                        -- 	}
                        -- 	exponentBits = (conditional5);
                        -- 	if (exponentBits < 2147483648u) {
                        -- 		uint conditional6;
                        -- 		if (signBit) {
                        -- 			;
                        -- 			// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 			uint bits_47;
                        -- 			bits_47 = num;
                        -- 			uint return_47;
                        -- 			return_47 = (uint)((long)(~bits_47) + 1L);
                        -- 			// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 			conditional6 = return_47;
                        -- 		} else {
                        -- 			conditional6 = num;
                        -- 		}
                        -- 		return conditional6;
                        -- 	}
                        -- 	uint conditional7;
                        -- 	if ((exponentBits != 2147483648u)) {
                        -- 		conditional7 = ((uint)((long)(num) + 1L));
                        -- 	} else {
                        -- 		conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 	}
                        -- 	num = (conditional7);
                        -- 	uint conditional8;
                        -- 	if (signBit) {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_48;
                        -- 		bits_48 = num;
                        -- 		uint return_48;
                        -- 		return_48 = (uint)((long)(~bits_48) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional8 = return_48;
                        -- 	} else {
                        -- 		conditional8 = num;
                        -- 	}
                        -- 	return conditional8;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num2 > 28)) {
                        -- 	conditional5 = (exponentBits >> 32 + num2);
                        -- } else {
                        -- 	conditional5 = (exponentBits << 32 + num2);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\ > to_signed(28, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.29\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- exponentBits = (conditional5);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (exponentBits < 2147483648u) {
                        -- 	uint conditional6;
                        -- 	if (signBit) {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_47;
                        -- 		bits_47 = num;
                        -- 		uint return_47;
                        -- 		return_47 = (uint)((long)(~bits_47) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional6 = return_47;
                        -- 	} else {
                        -- 		conditional6 = num;
                        -- 	}
                        -- 	return conditional6;
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.34\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ < "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.34\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional5 = (exponentBits >> 32 + num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional5 = (exponentBits >> 32 + num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.30\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.31\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_21\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional5 = (exponentBits << 32 + num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional5 = (exponentBits << 32 + num2);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num2\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.32\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional5\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.33\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_19\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_22\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((exponentBits != 2147483648u)) {
                        -- 	conditional7 = ((uint)((long)(num) + 1L));
                        -- } else {
                        -- 	conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.36\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits\ /= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.36\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional6;
                        -- 	if (signBit) {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_47;
                        -- 		bits_47 = num;
                        -- 		uint return_47;
                        -- 		return_47 = (uint)((long)(~bits_47) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional6 = return_47;
                        -- 	} else {
                        -- 		conditional6 = num;
                        -- 	}
                        -- 	return conditional6;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (signBit) {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_47;
                        -- 	bits_47 = num;
                        -- 	uint return_47;
                        -- 	return_47 = (uint)((long)(~bits_47) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional6 = return_47;
                        -- } else {
                        -- 	conditional6 = num;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional6;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_20\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_47;
                        -- 	bits_47 = num;
                        -- 	uint return_47;
                        -- 	return_47 = (uint)((long)(~bits_47) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional6 = return_47;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_47;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_47 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_47\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_47;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_47 = (uint)((long)(~bits_47) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\ := not(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_47\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.35\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.2\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_47\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.35\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional6 = return_47;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_47\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_26\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional6 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional6 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional6\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_24\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_27\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_25\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (conditional7);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (signBit) {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_48;
                        -- 	bits_48 = num;
                        -- 	uint return_48;
                        -- 	return_48 = (uint)((long)(~bits_48) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional8 = return_48;
                        -- } else {
                        -- 	conditional8 = num;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7 = ((uint)((long)(num) + 1L));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7 = ((uint)((long)(num) + 1L));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.37\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.37\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_29\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional7 = ((uint)((long)(num) + ((long)(num) & 1L)));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.38\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) and to_signed(1, 64);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.39\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.38\)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional7\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.39\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_23\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_30\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5632
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional8;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_15\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_48;
                        -- 	bits_48 = num;
                        -- 	uint return_48;
                        -- 	return_48 = (uint)((long)(~bits_48) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional8 = return_48;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_48;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_48 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_48\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_48;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_48 = (uint)((long)(~bits_48) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\ := not(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_48\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.40\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.3\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_48\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.40\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional8 = return_48;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_48\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_32\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional8 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional8 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional8\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_28\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_33\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_31\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_34\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.
                        -- The while loop's condition:
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.41\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_49\), 64)) /= to_signed(0, 64);
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.41\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_49 = bits_49 >> 1;
                            -- 	b_49 = (byte)((int)(b_49) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_49 = bits_49 >> 1;
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.42\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_49\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_49\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.42\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_49 = (byte)((int)(b_49) + 1);
                            -- 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.43\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_49\), 32)) + to_signed(1, 32)), 8);
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_49\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.43\);
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8704
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_35\ => 
                        -- State after the while loop which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_18\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_49 = b_49;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::GetMostSignificantOnePosition(System.UInt32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_49\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b_49\;
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (int)((int)(return_49) - 1);
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.44\ := signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_49\), 32)) - to_signed(1, 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.44\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_50;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_50 = fractionBits;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_50\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort index_50;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- index_50 = (ushort)num3;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.index_50\ := SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_50;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_50 = bits_50 & (uint)(~(1 << (int)index_50));
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetZero(System.UInt32,System.UInt16).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.45\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.index_50\, 32)), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\ := not((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.45\));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\;
                        -- Clock cycles needed to complete this state (approximation): 0.9955
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_36\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.46\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_50\ and unsigned((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.4\));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_50\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.46\;
                        -- The following section was transformed from the .NET statement below:
                        -- fractionBits = return_50;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_50\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = (int)((int)(28 - num3) - (int)(b));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.47\ := to_signed(28, 32) - \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num3\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.48\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.47\) - signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.b\), 32));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.48\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num4 >= 0)) {
                        -- 	conditional9 = (fractionBits << num4);
                        -- } else {
                        -- 	conditional9 = (fractionBits >> -num4);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\;
                        -- Clock cycles needed to complete this state (approximation): 0.7912
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.49\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ >= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.49\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional9);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.52\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.52\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (num4 < 0) {
                        -- 	uint conditional10;
                        -- 	if ((32 + num4 < 0)) {
                        -- 		conditional10 = (fractionBits >> -(32 - num4));
                        -- 	} else {
                        -- 		conditional10 = (fractionBits << 32 + num4);
                        -- 	}
                        -- 	fractionBits = (conditional10);
                        -- 	if (fractionBits >= 2147483648u) {
                        -- 		uint conditional11;
                        -- 		if ((fractionBits != 2147483648u)) {
                        -- 			conditional11 = 1;
                        -- 		} else {
                        -- 			conditional11 = ((uint)((long)(num) & 1L));
                        -- 		}
                        -- 		num = num + (conditional11);
                        -- 	}
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.53\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.53\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional9 = (fractionBits << num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional9 = (fractionBits << num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.50\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(unsigned(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\), 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.50\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_39\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional9 = (fractionBits >> -num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional9 = (fractionBits >> -num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\ := -\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.51\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.5\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional9\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.51\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_37\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_40\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.963
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (signBit) {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_51;
                        -- 	bits_51 = num;
                        -- 	uint return_51;
                        -- 	return_51 = (uint)((long)(~bits_51) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional12 = return_51;
                        -- } else {
                        -- 	conditional12 = num;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_53\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_53\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_54\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_54\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_52\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_53\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_54\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional10;
                        -- 	if ((32 + num4 < 0)) {
                        -- 		conditional10 = (fractionBits >> -(32 - num4));
                        -- 	} else {
                        -- 		conditional10 = (fractionBits << 32 + num4);
                        -- 	}
                        -- 	fractionBits = (conditional10);
                        -- 	if (fractionBits >= 2147483648u) {
                        -- 		uint conditional11;
                        -- 		if ((fractionBits != 2147483648u)) {
                        -- 			conditional11 = 1;
                        -- 		} else {
                        -- 			conditional11 = ((uint)((long)(num) & 1L));
                        -- 		}
                        -- 		num = num + (conditional11);
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((32 + num4 < 0)) {
                        -- 	conditional10 = (fractionBits >> -(32 - num4));
                        -- } else {
                        -- 	conditional10 = (fractionBits << 32 + num4);
                        -- }
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.54\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.55\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.54\ < to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_46\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_46\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.55\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_46\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\.
                        -- The following section was transformed from the .NET statement below:
                        -- fractionBits = (conditional10);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (fractionBits >= 2147483648u) {
                        -- 	uint conditional11;
                        -- 	if ((fractionBits != 2147483648u)) {
                        -- 		conditional11 = 1;
                        -- 	} else {
                        -- 		conditional11 = ((uint)((long)(num) & 1L));
                        -- 	}
                        -- 	num = num + (conditional11);
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.60\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ >= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\.

                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.60\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_44\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional10 = (fractionBits >> -(32 - num4));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional10 = (fractionBits >> -(32 - num4));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.56\ := to_signed(32, 32) - \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.6\ := -(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.56\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\;
                        -- Clock cycles needed to complete this state (approximation): 0.6382
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.57\ := shift_right(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.6\, 5) and "11111")));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.57\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_45\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_46\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional10 = (fractionBits << 32 + num4);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional10 = (fractionBits << 32 + num4);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.58\ := to_signed(32, 32) + \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num4\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.59\ := shift_left(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\, to_integer(unsigned(SmartResize(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.58\, 5))));
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional10\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.59\);
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_42\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_46\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8507
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\.
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_38\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	uint conditional11;
                        -- 	if ((fractionBits != 2147483648u)) {
                        -- 		conditional11 = 1;
                        -- 	} else {
                        -- 		conditional11 = ((uint)((long)(num) & 1L));
                        -- 	}
                        -- 	num = num + (conditional11);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((fractionBits != 2147483648u)) {
                        -- 	conditional11 = 1;
                        -- } else {
                        -- 	conditional11 = ((uint)((long)(num) & 1L));
                        -- }
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.61\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits\ /= "10000000000000000000000000000000";

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_50\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_50\.
                        --     * The false branch starts in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_51\ and ends in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_51\.
                        --     * Execution after either branch will continue in the following state: \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\.

                        if ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.61\)) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_50\;
                        else 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_51\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + (conditional11);
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.63\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ + (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.63\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_43\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_47\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_50\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional11 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional11 = 1;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\ := unsigned(to_signed(1, 32));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_50\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_51\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional11 = ((uint)((long)(num) & 1L));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional11 = ((uint)((long)(num) & 1L));
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.62\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\), 64)) and to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional11\ := ((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.62\));
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_48\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_51\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_52\ => 
                        -- State after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        -- The following section was transformed from the .NET statement below:
                        -- return conditional12;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\;
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_53\ => 
                        -- True branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_51;
                        -- 	bits_51 = num;
                        -- 	uint return_51;
                        -- 	return_51 = (uint)((long)(~bits_51) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional12 = return_51;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_51;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_51 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_51\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_51;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_51 = (uint)((long)(~bits_51) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.7\ := not(\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.bits_51\);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.64\ := SmartResize(unsigned(signed(SmartResize((\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.unaryOperationResult.7\), 64)) + to_signed(1, 64)), 32);
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_51\ := (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.binaryOperationResult.64\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional12 = return_51;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return_51\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_53\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_54\ => 
                        -- False branch of the if-else started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional12 = num;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional12 = num;
                        -- 
                        \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.conditional12\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.num\;
                        -- Going to the state after the if-else which was started in state \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_41\.
                        if (\Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ = \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_54\) then 
                            \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State\ := \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 state machine start
    \Posit32::FusedSum(Posit32[],Quire).0._StateMachine\: process (\Clock\) 
        Variable \Posit32::FusedSum(Posit32[],Quire).0._State\: \Posit32::FusedSum(Posit32[],Quire).0._States\ := \Posit32::FusedSum(Posit32[],Quire).0._State_0\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.posits\: \Lombiq.Arithmetics.Posit32_Array\(0 to 159);
        Variable \Posit32::FusedSum(Posit32[],Quire).0.startingValue\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.quire\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.object34\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.1\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.this_71\: \Lombiq.Arithmetics.Posit32\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return_71\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.2\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.return.3\: \Lombiq.Arithmetics.Quire\;
        Variable \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Posit32::FusedSum(Posit32[],Quire).0._Finished\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(0, 32);
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_0\;
                \Posit32::FusedSum(Posit32[],Quire).0.return.1\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.num\ := to_signed(0, 32);
                \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.return_71\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\ := false;
                \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.2\ := to_signed(0, 32);
            else 
                case \Posit32::FusedSum(Posit32[],Quire).0._State\ is 
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._Started\ = true) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._Started\ = true) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._Finished\ <= true;
                        else 
                            \Posit32::FusedSum(Posit32[],Quire).0._Finished\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.Out\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits\;
                        \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.Out\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_2\ => 
                        \Posit32::FusedSum(Posit32[],Quire).0.posits\ := \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.In\;
                        \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Quire quire;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object34;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object34 = new Quire (1u, 512);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\IsNull\ := false;
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\Size\ := to_unsigned(0, 16);
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\SegmentCount\ := to_unsigned(0, 16);
                        \Posit32::FusedSum(Posit32[],Quire).0.object34\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.object34\;
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(1, 32);
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(512, 32)), 16);
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= true;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.object34\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- quire = Quire.op_LeftShift (object34, 511);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.object34\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(511, 32);
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.0\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.object34\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.quire\ := \Posit32::FusedSum(Posit32[],Quire).0.return.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (Quire.op_Equality (startingValue, quire)) {
                            -- 	return quire;
                            -- }
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.quire\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.1\ := \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).return.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.quire\ := \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.In.0\;

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::FusedSum(Posit32[],Quire).0._State_7\ and ends in state \Posit32::FusedSum(Posit32[],Quire).0._State_7\.
                            --     * Execution after either branch will continue in the following state: \Posit32::FusedSum(Posit32[],Quire).0._State_6\.

                            if (\Posit32::FusedSum(Posit32[],Quire).0.return.1\) then 
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_7\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_6\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_6\ => 
                        -- State after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.num\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num < 160) {
                        -- 	;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                        -- 	Lombiq.Arithmetics.Posit32 this_71;
                        -- 	this_71 = posits [num];
                        -- 	bool return_71;
                        -- 	return_71 = this_71.PositBits == 2147483648u;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                        -- 	if (return_71) {
                        -- 		return quire;
                        -- 	}
                        -- 	startingValue = Quire.op_Addition (startingValue, Posit32.op_Explicit (posits [num]));
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_7\ => 
                        -- True branch of the if-else started in state \Posit32::FusedSum(Posit32[],Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return quire;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return quire;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.return\ <= \Posit32::FusedSum(Posit32[],Quire).0.quire\;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_5\.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._State\ = \Posit32::FusedSum(Posit32[],Quire).0._State_7\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_8\ => 
                        -- Repeated state of the while loop which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_6\.
                        -- The while loop's condition:
                        \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\ := \Posit32::FusedSum(Posit32[],Quire).0.num\ < to_signed(160, 32);
                        if (\Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	;
                            -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                            -- 	Lombiq.Arithmetics.Posit32 this_71;
                            -- 	this_71 = posits [num];
                            -- 	bool return_71;
                            -- 	return_71 = this_71.PositBits == 2147483648u;
                            -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                            -- 	if (return_71) {
                            -- 		return quire;
                            -- 	}
                            -- 	startingValue = Quire.op_Addition (startingValue, Posit32.op_Explicit (posits [num]));
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- ;
                            -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Lombiq.Arithmetics.Posit32 this_71;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- this_71 = posits [num];
                            -- 
                            \Posit32::FusedSum(Posit32[],Quire).0.this_71\ := \Posit32::FusedSum(Posit32[],Quire).0.posits\(to_integer(\Posit32::FusedSum(Posit32[],Quire).0.num\));
                            -- The following section was transformed from the .NET statement below:
                            -- bool return_71;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- return_71 = this_71.PositBits == 2147483648u;
                            -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                            -- 
                            -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                            \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\ := \Posit32::FusedSum(Posit32[],Quire).0.this_71\.\PositBits\ = "10000000000000000000000000000000";
                            \Posit32::FusedSum(Posit32[],Quire).0.return_71\ := \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (return_71) {
                            -- 	return quire;
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Posit32::FusedSum(Posit32[],Quire).0._State_11\ and ends in state \Posit32::FusedSum(Posit32[],Quire).0._State_11\.
                            --     * Execution after either branch will continue in the following state: \Posit32::FusedSum(Posit32[],Quire).0._State_10\.

                            if (\Posit32::FusedSum(Posit32[],Quire).0.return_71\) then 
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_11\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_10\;
                            end if;
                        else 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5393
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_9\ => 
                        -- State after the while loop which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_6\.
                        -- The following section was transformed from the .NET statement below:
                        -- return startingValue;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.return\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_10\ => 
                        -- State after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- startingValue = Quire.op_Addition (startingValue, Posit32.op_Explicit (posits [num]));
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits\(to_integer(\Posit32::FusedSum(Posit32[],Quire).0.num\));
                        \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= true;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_11\ => 
                        -- True branch of the if-else started in state \Posit32::FusedSum(Posit32[],Quire).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return quire;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return quire;
                        -- 
                        \Posit32::FusedSum(Posit32[],Quire).0.return\ <= \Posit32::FusedSum(Posit32[],Quire).0.quire\;
                        \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_8\.
                        if (\Posit32::FusedSum(Posit32[],Quire).0._State\ = \Posit32::FusedSum(Posit32[],Quire).0._State_11\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_10\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_12\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.2\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).return.0\;
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.return.2\;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= true;
                            \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Posit32::FusedSum(Posit32[],Quire).0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.3\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).return.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.return.2\ := \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\;
                            \Posit32::FusedSum(Posit32[],Quire).0.startingValue\ := \Posit32::FusedSum(Posit32[],Quire).0.return.3\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.2\ := \Posit32::FusedSum(Posit32[],Quire).0.num\ + to_signed(1, 32);
                            \Posit32::FusedSum(Posit32[],Quire).0.num\ := \Posit32::FusedSum(Posit32[],Quire).0.binaryOperationResult.2\;
                            -- Returning to the repeated state of the while loop which was started in state \Posit32::FusedSum(Posit32[],Quire).0._State_6\ if the loop wasn't exited with a state change.
                            if (\Posit32::FusedSum(Posit32[],Quire).0._State\ = \Posit32::FusedSum(Posit32[],Quire).0._State_13\) then 
                                \Posit32::FusedSum(Posit32[],Quire).0._State\ := \Posit32::FusedSum(Posit32[],Quire).0._State_8\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 state machine start
    \Quire Posit32::op_Explicit(Posit32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Posit32::op_Explicit(Posit32).0._State\: \Quire Posit32::op_Explicit(Posit32).0._States\ := \Quire Posit32::op_Explicit(Posit32).0._State_0\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.x\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_72\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_72\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.object35\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.0\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_73\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_67_73\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional20_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_64_67_73\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_64_67_73\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.2\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_65_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_65_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_67_73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_67_73\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_66_67_73\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_66_67_73\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_66_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num2_66_67_73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.8\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.9\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.10\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.11\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.12\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.13\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional21_67_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.18\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.num2_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional22_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_68_73\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_68_73\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.20\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_69_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_69_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.21\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.23\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.25\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional23_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.26\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_70_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.index_70_73\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_70_73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.27\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.28\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.quire\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_74\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional20_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_64_74\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_64_74\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.29\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.30\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_65_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_65_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.31\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_74\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_66_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_74\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_66_74\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_66_74\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.32\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_66_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.33\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.34\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.35\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num2_66_74\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.36\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.37\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.38\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.39\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.40\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.41\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional21_74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.46\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_75\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_75\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Quire Posit32::op_Explicit(Posit32).0.regimeKValue_75\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_55_75\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_55_75\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_55_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional13_55_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_52_55_75\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_52_55_75\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.47\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.48\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_53_55_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_53_55_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.3\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.49\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_55_75\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.startingPosition_54_55_75\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_54_55_75\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_54_55_75\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.50\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_54_55_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.51\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.52\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.53\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num2_54_55_75\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.54\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.55\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.56\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.57\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.58\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.59\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional14_55_75\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.61\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.62\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.63\: signed(7 downto 0) := to_signed(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional15_75\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.64\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_56_75\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_56_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_56_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional18_56_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_84\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_84\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.65\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.66\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_85\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_85\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.67\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_56_75\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_86\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_86\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional16_86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_57_86\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_57_86\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.68\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.69\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_58_86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_58_86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.6\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.70\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_86\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_59_86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.startingPosition_59_86\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_59_86\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_59_86\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.71\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_59_86\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.72\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.73\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.74\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num2_59_86\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.75\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.76\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.77\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.78\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.79\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.80\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.81\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.result_86\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.82\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.83\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.85\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional17_86\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.86\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.88\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.89\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.90\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_87\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional20_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_64_87\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_64_87\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.91\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.92\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_65_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_65_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.7\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.93\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.bits_66_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_87\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_66_87\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.b_66_87\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.94\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num_66_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.95\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.96\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.97\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.num2_66_87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.98\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.99\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.100\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.101\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.102\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.103\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.104\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.105\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.106\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.107\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional21_87\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.108\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.109\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.110\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.111\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.112\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.conditional19_56_75\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.113\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.114\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.115\: signed(15 downto 0) := to_signed(0, 16);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.116\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.117\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.1\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.this_76\: \Lombiq.Arithmetics.Posit32\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return_76\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.118\: signed(63 downto 0) := to_signed(0, 64);
        Variable \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.119\: boolean := false;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.2\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Posit32::op_Explicit(Posit32).0.return.3\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Posit32::op_Explicit(Posit32).0._Finished\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\ <= to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_0\;
                \Quire Posit32::op_Explicit(Posit32).0.return_72\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.array\ := (others => to_unsigned(0, 64));
                \Quire Posit32::op_Explicit(Posit32).0.return_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional20_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_64_67_73\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.2\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_65_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_65_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.0\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.3\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_67_73\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_67_73\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_66_67_73\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.b_66_67_73\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.4\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_66_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.5\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.6\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.7\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num2_66_67_73\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.8\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.9\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.10\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.11\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.12\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.13\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.14\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.15\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.16\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional21_67_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.18\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.num2_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional22_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_68_73\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.19\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.20\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_69_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_69_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.1\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.21\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.22\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.23\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.24\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.25\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional23_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.26\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_70_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.index_70_73\ := to_unsigned(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.return_70_73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.27\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.28\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional20_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_64_74\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.29\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.30\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_65_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_65_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.2\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.31\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_74\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_66_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_74\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_66_74\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.b_66_74\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.32\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_66_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.33\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.34\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.35\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num2_66_74\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.36\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.37\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.38\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.39\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.40\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.41\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.42\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.43\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.44\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.45\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional21_74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.46\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.return_75\ := to_signed(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.regimeKValue_75\ := to_signed(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_55_75\ := to_signed(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.num_55_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional13_55_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_52_55_75\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.47\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.48\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_53_55_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_53_55_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.3\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.49\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.b_55_75\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.startingPosition_54_55_75\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_54_55_75\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.b_54_55_75\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.50\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_54_55_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.51\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.52\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.53\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num2_54_55_75\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.54\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.55\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.56\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.57\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.58\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.59\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.60\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional14_55_75\ := to_signed(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.61\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.62\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.4\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.63\ := to_signed(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.conditional15_75\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.64\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.return_56_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_56_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional18_56_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_84\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.65\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.66\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_85\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_85\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.5\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.67\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.b_56_75\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_86\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.bits_86\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional16_86\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_57_86\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.68\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.69\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_58_86\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_58_86\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.6\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.70\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.b_86\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.bits_59_86\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.startingPosition_59_86\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_59_86\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.b_59_86\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.71\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_59_86\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.72\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.73\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.74\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num2_59_86\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.75\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.76\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.77\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.78\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.79\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.80\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.81\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.result_86\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.82\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.83\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.84\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.85\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.conditional17_86\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.86\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.87\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.88\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.89\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.90\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional20_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_64_87\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.91\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.92\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.bits_65_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_65_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.7\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.93\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_87\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.bits_66_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_87\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.return_66_87\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.b_66_87\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.94\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num_66_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.95\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.96\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.97\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.num2_66_87\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.98\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.99\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.100\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.101\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.102\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.103\ := to_unsigned(0, 8);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.104\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.105\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.106\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.107\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional21_87\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.108\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.109\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.110\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.111\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.112\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.conditional19_56_75\ := to_unsigned(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.113\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.114\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.115\ := to_signed(0, 16);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.116\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.117\ := to_signed(0, 32);
                \Quire Posit32::op_Explicit(Posit32).0.return_76\ := false;
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.118\ := to_signed(0, 64);
                \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.119\ := false;
            else 
                case \Quire Posit32::op_Explicit(Posit32).0._State\ is 
                    when \Quire Posit32::op_Explicit(Posit32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Posit32::op_Explicit(Posit32).0._Started\ = true) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Posit32::op_Explicit(Posit32).0._Started\ = true) then 
                            \Quire Posit32::op_Explicit(Posit32).0._Finished\ <= true;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._Finished\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_2\ => 
                        \Quire Posit32::op_Explicit(Posit32).0.x\ := \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_72;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_72 = x;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_72\ := \Quire Posit32::op_Explicit(Posit32).0.x\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_72;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_72 = this_72.PositBits == 2147483648u;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsNaN().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\ := \Quire Posit32::op_Explicit(Posit32).0.this_72\.\PositBits\ = "10000000000000000000000000000000";
                        \Quire Posit32::op_Explicit(Posit32).0.return_72\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_72) {
                        -- 	Quire object35;
                        -- 	object35 = new Quire (1u, 512);
                        -- 	return Quire.op_LeftShift (object35, 511);
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_4\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_6\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_3\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_72\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Quire Posit32::op_Explicit(Posit32).0._State_3\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_73 = x;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_73\ := \Quire Posit32::op_Explicit(Posit32).0.x\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_73;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_67_73 = this_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional20_67_73;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_64_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_64_67_73 = this_67_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_64_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_67_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_64_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_64_67_73 = (long)((this_64_67_73.PositBits & 0x80000000u)) == 0L;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_64_67_73\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.2\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.1\)), 64)) = to_signed(0, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.return_64_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.2\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_64_67_73) {
                        -- 	conditional20_67_73 = this_67_73.PositBits;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_65_67_73;
                        -- 	bits_65_67_73 = this_67_73.PositBits;
                        -- 	uint return_65_67_73;
                        -- 	return_65_67_73 = (uint)((long)(~bits_65_67_73) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional20_67_73 = return_65_67_73;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_8\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_8\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_9\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_9\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_7\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_64_67_73\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_8\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_4\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	Quire object35;
                        -- 	object35 = new Quire (1u, 512);
                        -- 	return Quire.op_LeftShift (object35, 511);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object35;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object35 = new Quire (1u, 512);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Posit32::op_Explicit(Posit32).0.object35\.\IsNull\ := false;
                        \Quire Posit32::op_Explicit(Posit32).0.object35\.\Size\ := to_unsigned(0, 16);
                        \Quire Posit32::op_Explicit(Posit32).0.object35\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Posit32::op_Explicit(Posit32).0.object35\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.object35\;
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(1, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(512, 32)), 16);
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= true;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.object35\ := \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return Quire.op_LeftShift (object35, 511);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.object35\;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= to_signed(511, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.0\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.object35\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.return\ <= \Quire Posit32::op_Explicit(Posit32).0.return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_1\;
                            -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_2\.
                            if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_6\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_3\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_7\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- bits_67_73 = (conditional20_67_73);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_67_73\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional20_67_73\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num_67_73;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_66_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_67_73 = bits_67_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.bits_67_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte startingPosition_66_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- startingPosition_66_67_73 = 31;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_67_73\ := SmartResize(unsigned(to_signed(31, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_66_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_66_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_66_67_73 = 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_66_67_73\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_67_73 = bits_66_67_73 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.4\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.4\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_66_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_66_67_73 = (bits_66_67_73 >> 31) & 1u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.5\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.6\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.5\) and to_unsigned(1, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.num_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.6\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_67_73 = bits_66_67_73 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.7\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.7\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2_66_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_66_67_73 = 0;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num2_66_67_73\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2_66_67_73) < (int)(startingPosition_66_67_73) && bits_66_67_73 >> 31 == num_66_67_73) {
                        -- 	bits_66_67_73 = bits_66_67_73 << 1;
                        -- 	b_66_67_73 = (byte)((int)(b_66_67_73) + 1);
                        -- 	num2_66_67_73 = num2_66_67_73 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Quire Posit32::op_Explicit(Posit32).0._State_8\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional20_67_73 = this_67_73.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20_67_73 = this_67_73.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional20_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_67_73\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_3\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_8\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_9\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_65_67_73;
                        -- 	bits_65_67_73 = this_67_73.PositBits;
                        -- 	uint return_65_67_73;
                        -- 	return_65_67_73 = (uint)((long)(~bits_65_67_73) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional20_67_73 = return_65_67_73;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_65_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_65_67_73 = this_67_73.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_65_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_67_73\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_65_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_65_67_73 = (uint)((long)(~bits_65_67_73) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.0\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_65_67_73\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.3\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.0\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_65_67_73\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20_67_73 = return_65_67_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional20_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.return_65_67_73\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_3\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_9\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_10\ => 
                        -- Repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_7\.
                        -- The while loop's condition:
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.8\ := (\Quire Posit32::op_Explicit(Posit32).0.num2_66_67_73\) < signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_67_73\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.9\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.10\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.9\ = \Quire Posit32::op_Explicit(Posit32).0.num_66_67_73\;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Quire Posit32::op_Explicit(Posit32).0._State_11\ => 
                        -- State after the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_7\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_66_67_73 = b_66_67_73;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.b_66_67_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- num_67_73 = 32 - ((int)(return_66_67_73) + 2 + 2);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.15\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return_66_67_73\), 32)) + to_signed(2, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.16\ := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.15\ + to_signed(2, 32), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.17\ := to_signed(32, 32) - (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.16\);
                        \Quire Posit32::op_Explicit(Posit32).0.num_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.17\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional21_67_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num_67_73 > 0)) {
                        -- 	conditional21_67_73 = ((uint)num_67_73);
                        -- } else {
                        -- 	conditional21_67_73 = 0u;
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Quire Posit32::op_Explicit(Posit32).0._State_12\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.11\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.8\ and \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.10\;
                        if (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.11\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_66_67_73 = bits_66_67_73 << 1;
                            -- 	b_66_67_73 = (byte)((int)(b_66_67_73) + 1);
                            -- 	num2_66_67_73 = num2_66_67_73 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_66_67_73 = bits_66_67_73 << 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.12\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Quire Posit32::op_Explicit(Posit32).0.bits_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.12\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_66_67_73 = (byte)((int)(b_66_67_73) + 1);
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.13\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_66_67_73\), 32)) + to_signed(1, 32)), 8);
                            \Quire Posit32::op_Explicit(Posit32).0.b_66_67_73\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.13\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2_66_67_73 = num2_66_67_73 + 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.14\ := \Quire Posit32::op_Explicit(Posit32).0.num2_66_67_73\ + to_signed(1, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.num2_66_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.14\;
                            -- Returning to the repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_7\ if the loop wasn't exited with a state change.
                            if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_12\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_10\;
                            end if;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \Quire Posit32::op_Explicit(Posit32).0._State_13\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.18\ := \Quire Posit32::op_Explicit(Posit32).0.num_67_73\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_15\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_15\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_16\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_16\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_14\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.18\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_15\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Posit32::op_Explicit(Posit32).0._State_14\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_67_73 = conditional21_67_73;
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_67_73\ := \Quire Posit32::op_Explicit(Posit32).0.conditional21_67_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- num_73 = return_67_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num_73\ := \Quire Posit32::op_Explicit(Posit32).0.return_67_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional22_73;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_68_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_68_73 = this_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_68_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_68_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_68_73 = (long)((this_68_73.PositBits & 0x80000000u)) == 0L;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.19\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_68_73\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.20\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.19\)), 64)) = to_signed(0, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.return_68_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.20\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_68_73) {
                        -- 	conditional22_73 = this_73.PositBits;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_69_73;
                        -- 	bits_69_73 = this_73.PositBits;
                        -- 	uint return_69_73;
                        -- 	return_69_73 = (uint)((long)(~bits_69_73) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional22_73 = return_69_73;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_18\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_18\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_19\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_19\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_17\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_68_73\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_18\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_15\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21_67_73 = ((uint)num_67_73);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21_67_73 = ((uint)num_67_73);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional21_67_73\ := (unsigned(\Quire Posit32::op_Explicit(Posit32).0.num_67_73\));
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_13\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_15\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_16\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_13\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21_67_73 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21_67_73 = 0u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional21_67_73\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_13\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_16\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_17\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2_73 = (conditional22_73);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num2_73\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional22_73\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_73 = num2_73 << (int)(32L - (long)(num_73)) >> (int)(32L - (long)(num_73));
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.22\ := SmartResize(to_signed(32, 64) - signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.num_73\), 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.23\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.num2_73\, to_integer(unsigned(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.22\), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.9142
                    when \Quire Posit32::op_Explicit(Posit32).0._State_18\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional22_73 = this_73.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional22_73 = this_73.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional22_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_73\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_14\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_18\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_19\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_69_73;
                        -- 	bits_69_73 = this_73.PositBits;
                        -- 	uint return_69_73;
                        -- 	return_69_73 = (uint)((long)(~bits_69_73) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional22_73 = return_69_73;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_69_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_69_73 = this_73.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_69_73\ := \Quire Posit32::op_Explicit(Posit32).0.this_73\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_69_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_69_73 = (uint)((long)(~bits_69_73) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.1\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_69_73\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.21\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.1\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_69_73\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.21\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional22_73 = return_69_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional22_73\ := \Quire Posit32::op_Explicit(Posit32).0.return_69_73\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_14\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_19\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.24\ := SmartResize(to_signed(32, 64) - signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.num_73\), 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0.3898
                    when \Quire Posit32::op_Explicit(Posit32).0._State_21\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.25\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.23\, to_integer(unsigned(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.24\), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.25\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional23_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((long)(num_73) == 0L)) {
                        -- 	conditional23_73 = 1u;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).
                        -- 	uint bits_70_73;
                        -- 	bits_70_73 = bits_73;
                        -- 	ushort index_70_73;
                        -- 	index_70_73 = (ushort)num_73;
                        -- 	uint return_70_73;
                        -- 	return_70_73 = bits_70_73 | (uint)(1 << (int)index_70_73);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).
                        -- 	conditional23_73 = return_70_73;
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.26\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.num_73\), 64)) = to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_23\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_23\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_24\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_24\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_22\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.26\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_23\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9328
                    when \Quire Posit32::op_Explicit(Posit32).0._State_22\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_21\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_73 = conditional23_73;
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionWithHiddenBit().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_73\ := \Quire Posit32::op_Explicit(Posit32).0.conditional23_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [0] = return_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.array\(to_integer(to_signed(0, 32))) := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.return_73\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- Quire quire;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- quire = new Quire (array, 0);
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Posit32::op_Explicit(Posit32).0.quire\.\IsNull\ := false;
                        \Quire Posit32::op_Explicit(Posit32).0.quire\.\Size\ := to_unsigned(0, 16);
                        \Quire Posit32::op_Explicit(Posit32).0.quire\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Posit32::op_Explicit(Posit32).0.quire\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.array\;
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_23\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_21\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional23_73 = 1u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional23_73 = 1u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional23_73\ := to_unsigned(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_21\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_23\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_24\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_21\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).
                        -- 	uint bits_70_73;
                        -- 	bits_70_73 = bits_73;
                        -- 	ushort index_70_73;
                        -- 	index_70_73 = (ushort)num_73;
                        -- 	uint return_70_73;
                        -- 	return_70_73 = bits_70_73 | (uint)(1 << (int)index_70_73);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).
                        -- 	conditional23_73 = return_70_73;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_70_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_70_73 = bits_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_70_73\ := \Quire Posit32::op_Explicit(Posit32).0.bits_73\;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort index_70_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- index_70_73 = (ushort)num_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.index_70_73\ := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.num_73\, 16);
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_70_73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_70_73 = bits_70_73 | (uint)(1 << (int)index_70_73);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::SetOne(System.UInt32,System.UInt16).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.27\ := unsigned(shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.index_70_73\, 32)), 5)))));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.28\ := \Quire Posit32::op_Explicit(Posit32).0.bits_70_73\ or (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.27\);
                        \Quire Posit32::op_Explicit(Posit32).0.return_70_73\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.28\;
                        -- The following section was transformed from the .NET statement below:
                        -- conditional23_73 = return_70_73;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional23_73\ := \Quire Posit32::op_Explicit(Posit32).0.return_70_73\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_21\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_24\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_22\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.663
                    when \Quire Posit32::op_Explicit(Posit32).0._State_25\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.array\ := \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- Lombiq.Arithmetics.Posit32 this_74;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- this_74 = x;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.this_74\ := \Quire Posit32::op_Explicit(Posit32).0.x\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint return_74;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint bits_74;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- uint conditional20_74;
                            -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- Lombiq.Arithmetics.Posit32 this_64_74;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- this_64_74 = this_74;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.this_64_74\ := \Quire Posit32::op_Explicit(Posit32).0.this_74\;
                            -- The following section was transformed from the .NET statement below:
                            -- bool return_64_74;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- return_64_74 = (long)((this_64_74.PositBits & 0x80000000u)) == 0L;
                            -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                            -- 
                            -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.29\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_64_74\.\PositBits\ and "10000000000000000000000000000000", 64));
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.30\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.29\)), 64)) = to_signed(0, 64);
                            \Quire Posit32::op_Explicit(Posit32).0.return_64_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.30\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (return_64_74) {
                            -- 	conditional20_74 = this_74.PositBits;
                            -- } else {
                            -- 	;
                            -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                            -- 	uint bits_65_74;
                            -- 	bits_65_74 = this_74.PositBits;
                            -- 	uint return_65_74;
                            -- 	return_65_74 = (uint)((long)(~bits_65_74) + 1L);
                            -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                            -- 	conditional20_74 = return_65_74;
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_27\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_27\.
                            --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_28\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_28\.
                            --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_26\.

                            if (\Quire Posit32::op_Explicit(Posit32).0.return_64_74\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_27\;
                            else 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_28\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_26\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_25\.
                        -- The following section was transformed from the .NET statement below:
                        -- bits_74 = (conditional20_74);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_74\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional20_74\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num_74;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_66_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_74 = bits_74;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.bits_74\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte startingPosition_66_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- startingPosition_66_74 = 31;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_74\ := SmartResize(unsigned(to_signed(31, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_66_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_66_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_66_74 = 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_66_74\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_74 = bits_66_74 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.32\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_74\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.32\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_66_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_66_74 = (bits_66_74 >> 31) & 1u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.33\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_66_74\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.34\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.33\) and to_unsigned(1, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.num_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.34\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_74 = bits_66_74 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.35\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_74\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.35\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2_66_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_66_74 = 0;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num2_66_74\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2_66_74) < (int)(startingPosition_66_74) && bits_66_74 >> 31 == num_66_74) {
                        -- 	bits_66_74 = bits_66_74 << 1;
                        -- 	b_66_74 = (byte)((int)(b_66_74) + 1);
                        -- 	num2_66_74 = num2_66_74 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_29\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Quire Posit32::op_Explicit(Posit32).0._State_27\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_25\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional20_74 = this_74.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20_74 = this_74.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional20_74\ := \Quire Posit32::op_Explicit(Posit32).0.this_74\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_25\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_27\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_28\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_25\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_65_74;
                        -- 	bits_65_74 = this_74.PositBits;
                        -- 	uint return_65_74;
                        -- 	return_65_74 = (uint)((long)(~bits_65_74) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional20_74 = return_65_74;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_65_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_65_74 = this_74.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_65_74\ := \Quire Posit32::op_Explicit(Posit32).0.this_74\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_65_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_65_74 = (uint)((long)(~bits_65_74) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.2\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_65_74\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.31\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.2\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_65_74\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.31\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20_74 = return_65_74;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional20_74\ := \Quire Posit32::op_Explicit(Posit32).0.return_65_74\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_25\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_28\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_26\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_29\ => 
                        -- Repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_26\.
                        -- The while loop's condition:
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.36\ := (\Quire Posit32::op_Explicit(Posit32).0.num2_66_74\) < signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_74\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.37\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_66_74\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.38\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.37\ = \Quire Posit32::op_Explicit(Posit32).0.num_66_74\;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Quire Posit32::op_Explicit(Posit32).0._State_30\ => 
                        -- State after the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_26\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_66_74 = b_66_74;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.b_66_74\;
                        -- The following section was transformed from the .NET statement below:
                        -- num_74 = 32 - ((int)(return_66_74) + 2 + 2);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.43\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return_66_74\), 32)) + to_signed(2, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.44\ := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.43\ + to_signed(2, 32), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.45\ := to_signed(32, 32) - (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.44\);
                        \Quire Posit32::op_Explicit(Posit32).0.num_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.45\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional21_74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num_74 > 0)) {
                        -- 	conditional21_74 = ((uint)num_74);
                        -- } else {
                        -- 	conditional21_74 = 0u;
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Quire Posit32::op_Explicit(Posit32).0._State_31\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.39\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.36\ and \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.38\;
                        if (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.39\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_66_74 = bits_66_74 << 1;
                            -- 	b_66_74 = (byte)((int)(b_66_74) + 1);
                            -- 	num2_66_74 = num2_66_74 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_66_74 = bits_66_74 << 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.40\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_74\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Quire Posit32::op_Explicit(Posit32).0.bits_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.40\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_66_74 = (byte)((int)(b_66_74) + 1);
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.41\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_66_74\), 32)) + to_signed(1, 32)), 8);
                            \Quire Posit32::op_Explicit(Posit32).0.b_66_74\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.41\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2_66_74 = num2_66_74 + 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.42\ := \Quire Posit32::op_Explicit(Posit32).0.num2_66_74\ + to_signed(1, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.num2_66_74\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.42\;
                            -- Returning to the repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_26\ if the loop wasn't exited with a state change.
                            if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_31\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_29\;
                            end if;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_30\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \Quire Posit32::op_Explicit(Posit32).0._State_32\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.46\ := \Quire Posit32::op_Explicit(Posit32).0.num_74\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_34\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_34\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_35\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_35\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_33\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.46\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_34\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_35\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Posit32::op_Explicit(Posit32).0._State_33\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_32\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_74 = conditional21_74;
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- // Starting inlined block of the method System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_74\ := \Quire Posit32::op_Explicit(Posit32).0.conditional21_74\;
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_75 = x;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_75\ := \Quire Posit32::op_Explicit(Posit32).0.x\;
                        -- The following section was transformed from the .NET statement below:
                        -- short return_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte regimeKValue_75;
                        -- // Starting inlined block of the method System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_55_75 = this_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.this_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte return_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional13_55_75;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_52_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_52_55_75 = this_55_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_52_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.this_55_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_52_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_52_55_75 = (long)((this_52_55_75.PositBits & 0x80000000u)) == 0L;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.47\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_52_55_75\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.48\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.47\)), 64)) = to_signed(0, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.return_52_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.48\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_52_55_75) {
                        -- 	conditional13_55_75 = this_55_75.PositBits;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_53_55_75;
                        -- 	bits_53_55_75 = this_55_75.PositBits;
                        -- 	uint return_53_55_75;
                        -- 	return_53_55_75 = (uint)((long)(~bits_53_55_75) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional13_55_75 = return_53_55_75;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_37\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_37\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_38\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_38\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_36\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_52_55_75\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_37\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_38\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_34\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_32\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21_74 = ((uint)num_74);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21_74 = ((uint)num_74);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional21_74\ := (unsigned(\Quire Posit32::op_Explicit(Posit32).0.num_74\));
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_32\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_34\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_35\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_32\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21_74 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21_74 = 0u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional21_74\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_32\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_35\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_33\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_36\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_33\.
                        -- The following section was transformed from the .NET statement below:
                        -- num_55_75 = (conditional13_55_75);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num_55_75\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional13_55_75\);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_55_75;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_54_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_54_55_75 = num_55_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.num_55_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte startingPosition_54_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- startingPosition_54_55_75 = 31;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.startingPosition_54_55_75\ := SmartResize(unsigned(to_signed(31, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_54_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_54_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_54_55_75 = 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_54_55_75\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits_54_55_75 = bits_54_55_75 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.50\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.50\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_54_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_54_55_75 = (bits_54_55_75 >> 31) & 1u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.51\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.52\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.51\) and to_unsigned(1, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.num_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.52\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits_54_55_75 = bits_54_55_75 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.53\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.53\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2_54_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_54_55_75 = 0;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num2_54_55_75\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2_54_55_75) < (int)(startingPosition_54_55_75) && bits_54_55_75 >> 31 == num_54_55_75) {
                        -- 	bits_54_55_75 = bits_54_55_75 << 1;
                        -- 	b_54_55_75 = (byte)((int)(b_54_55_75) + 1);
                        -- 	num2_54_55_75 = num2_54_55_75 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Quire Posit32::op_Explicit(Posit32).0._State_37\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_33\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional13_55_75 = this_55_75.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional13_55_75 = this_55_75.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional13_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.this_55_75\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_33\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_37\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_36\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_38\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_33\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_53_55_75;
                        -- 	bits_53_55_75 = this_55_75.PositBits;
                        -- 	uint return_53_55_75;
                        -- 	return_53_55_75 = (uint)((long)(~bits_53_55_75) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional13_55_75 = return_53_55_75;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_53_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_53_55_75 = this_55_75.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_53_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.this_55_75\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_53_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_53_55_75 = (uint)((long)(~bits_53_55_75) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.3\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_53_55_75\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.49\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.3\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_53_55_75\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.49\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional13_55_75 = return_53_55_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional13_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.return_53_55_75\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_33\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_38\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_36\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_39\ => 
                        -- Repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_36\.
                        -- The while loop's condition:
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.54\ := (\Quire Posit32::op_Explicit(Posit32).0.num2_54_55_75\) < signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.startingPosition_54_55_75\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.55\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.56\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.55\ = \Quire Posit32::op_Explicit(Posit32).0.num_54_55_75\;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_41\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Quire Posit32::op_Explicit(Posit32).0._State_40\ => 
                        -- State after the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_36\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_54_55_75 = b_54_55_75;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.b_54_55_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- b_55_75 = return_54_55_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.return_54_55_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte conditional14_55_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((((long)(num_55_75) & 1073741824L) == 0L)) {
                        -- 	conditional14_55_75 = ((sbyte)(-(int)(b_55_75)));
                        -- } else {
                        -- 	conditional14_55_75 = ((sbyte)((int)(b_55_75) - 1));
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.61\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.num_55_75\), 64)) and to_signed(1073741824, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.62\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.61\) = to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_43\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_43\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_44\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_44\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_42\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.62\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_43\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_44\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4551
                    when \Quire Posit32::op_Explicit(Posit32).0._State_41\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.57\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.54\ and \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.56\;
                        if (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.57\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_54_55_75 = bits_54_55_75 << 1;
                            -- 	b_54_55_75 = (byte)((int)(b_54_55_75) + 1);
                            -- 	num2_54_55_75 = num2_54_55_75 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_54_55_75 = bits_54_55_75 << 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.58\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Quire Posit32::op_Explicit(Posit32).0.bits_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.58\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_54_55_75 = (byte)((int)(b_54_55_75) + 1);
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.59\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_54_55_75\), 32)) + to_signed(1, 32)), 8);
                            \Quire Posit32::op_Explicit(Posit32).0.b_54_55_75\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.59\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2_54_55_75 = num2_54_55_75 + 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.60\ := \Quire Posit32::op_Explicit(Posit32).0.num2_54_55_75\ + to_signed(1, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.num2_54_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.60\;
                            -- Returning to the repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_36\ if the loop wasn't exited with a state change.
                            if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_41\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_39\;
                            end if;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_40\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \Quire Posit32::op_Explicit(Posit32).0._State_42\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_40\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_55_75 = conditional14_55_75;
                        -- // Ending inlined block of the method System.SByte Lombiq.Arithmetics.Posit32::GetRegimeKValue().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_55_75\ := \Quire Posit32::op_Explicit(Posit32).0.conditional14_55_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- regimeKValue_75 = return_55_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.regimeKValue_75\ := \Quire Posit32::op_Explicit(Posit32).0.return_55_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional15_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((int)(regimeKValue_75) != -31)) {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().
                        -- 	Lombiq.Arithmetics.Posit32 this_56_75;
                        -- 	this_56_75 = this_75;
                        -- 	uint return_56_75;
                        -- 	uint num_56_75;
                        -- 	uint conditional18_56_75;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	Lombiq.Arithmetics.Posit32 this_84;
                        -- 	this_84 = this_56_75;
                        -- 	bool return_84;
                        -- 	return_84 = (long)((this_84.PositBits & 0x80000000u)) == 0L;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	if (return_84) {
                        -- 		conditional18_56_75 = this_56_75.PositBits;
                        -- 	} else {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_85;
                        -- 		bits_85 = this_56_75.PositBits;
                        -- 		uint return_85;
                        -- 		return_85 = (uint)((long)(~bits_85) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional18_56_75 = return_85;
                        -- 	}
                        -- 	num_56_75 = (conditional18_56_75);
                        -- 	byte b_56_75;
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().
                        -- 	Lombiq.Arithmetics.Posit32 this_86;
                        -- 	this_86 = this_56_75;
                        -- 	byte return_86;
                        -- 	uint bits_86;
                        -- 	uint conditional16_86;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	Lombiq.Arithmetics.Posit32 this_57_86;
                        -- 	this_57_86 = this_86;
                        -- 	bool return_57_86;
                        -- 	return_57_86 = (long)((this_57_86.PositBits & 0x80000000u)) == 0L;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	if (return_57_86) {
                        -- 		conditional16_86 = this_86.PositBits;
                        -- 	} else {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_58_86;
                        -- 		bits_58_86 = this_86.PositBits;
                        -- 		uint return_58_86;
                        -- 		return_58_86 = (uint)((long)(~bits_58_86) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional16_86 = return_58_86;
                        -- 	}
                        -- 	bits_86 = (conditional16_86);
                        -- 	byte b_86;
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	uint bits_59_86;
                        -- 	bits_59_86 = bits_86;
                        -- 	byte startingPosition_59_86;
                        -- 	startingPosition_59_86 = 31;
                        -- 	byte return_59_86;
                        -- 	byte b_59_86;
                        -- 	b_59_86 = 1;
                        -- 	bits_59_86 = bits_59_86 << 1;
                        -- 	uint num_59_86;
                        -- 	num_59_86 = (bits_59_86 >> 31) & 1u;
                        -- 	bits_59_86 = bits_59_86 << 1;
                        -- 	int num2_59_86;
                        -- 	num2_59_86 = 0;
                        -- 	while ((int)(num2_59_86) < (int)(startingPosition_59_86) && bits_59_86 >> 31 == num_59_86) {
                        -- 		bits_59_86 = bits_59_86 << 1;
                        -- 		b_59_86 = (byte)((int)(b_59_86) + 1);
                        -- 		num2_59_86 = num2_59_86 + 1;
                        -- 	}
                        -- 	return_59_86 = b_59_86;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	b_86 = return_59_86;
                        -- 	byte result_86;
                        -- 	result_86 = (byte)(32 - (int)(b_86) - 1);
                        -- 	if ((int)(b_86) + 2 <= 32) {
                        -- 		int conditional17_86;
                        -- 		if ((32 - ((int)(b_86) + 2) > 2)) {
                        -- 			conditional17_86 = 2;
                        -- 		} else {
                        -- 			conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- 		}
                        -- 		result_86 = (byte)(conditional17_86);
                        -- 	}
                        -- 	return_86 = result_86;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().
                        -- 	b_56_75 = return_86;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 	Lombiq.Arithmetics.Posit32 this_87;
                        -- 	this_87 = this_56_75;
                        -- 	uint return_87;
                        -- 	uint bits_87;
                        -- 	uint conditional20_87;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	Lombiq.Arithmetics.Posit32 this_64_87;
                        -- 	this_64_87 = this_87;
                        -- 	bool return_64_87;
                        -- 	return_64_87 = (long)((this_64_87.PositBits & 0x80000000u)) == 0L;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	if (return_64_87) {
                        -- 		conditional20_87 = this_87.PositBits;
                        -- 	} else {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_65_87;
                        -- 		bits_65_87 = this_87.PositBits;
                        -- 		uint return_65_87;
                        -- 		return_65_87 = (uint)((long)(~bits_65_87) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional20_87 = return_65_87;
                        -- 	}
                        -- 	bits_87 = (conditional20_87);
                        -- 	int num_87;
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	uint bits_66_87;
                        -- 	bits_66_87 = bits_87;
                        -- 	byte startingPosition_66_87;
                        -- 	startingPosition_66_87 = 31;
                        -- 	byte return_66_87;
                        -- 	byte b_66_87;
                        -- 	b_66_87 = 1;
                        -- 	bits_66_87 = bits_66_87 << 1;
                        -- 	uint num_66_87;
                        -- 	num_66_87 = (bits_66_87 >> 31) & 1u;
                        -- 	bits_66_87 = bits_66_87 << 1;
                        -- 	int num2_66_87;
                        -- 	num2_66_87 = 0;
                        -- 	while ((int)(num2_66_87) < (int)(startingPosition_66_87) && bits_66_87 >> 31 == num_66_87) {
                        -- 		bits_66_87 = bits_66_87 << 1;
                        -- 		b_66_87 = (byte)((int)(b_66_87) + 1);
                        -- 		num2_66_87 = num2_66_87 + 1;
                        -- 	}
                        -- 	return_66_87 = b_66_87;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	num_87 = 32 - ((int)(return_66_87) + 2 + 2);
                        -- 	uint conditional21_87;
                        -- 	if ((num_87 > 0)) {
                        -- 		conditional21_87 = ((uint)num_87);
                        -- 	} else {
                        -- 		conditional21_87 = 0u;
                        -- 	}
                        -- 	return_87 = conditional21_87;
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 	num_56_75 = num_56_75 >> (int)return_87 << 32 - (int)(b_56_75) >> 30;
                        -- 	uint conditional19_56_75;
                        -- 	if (((int)(b_56_75) != 0)) {
                        -- 		conditional19_56_75 = num_56_75;
                        -- 	} else {
                        -- 		conditional19_56_75 = 0u;
                        -- 	}
                        -- 	return_56_75 = conditional19_56_75;
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().
                        -- 	conditional15_75 = ((short)((long)((int)(regimeKValue_75) * 4) + (long)(return_56_75)));
                        -- } else {
                        -- 	conditional15_75 = 0;
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.64\ := SmartResize((\Quire Posit32::op_Explicit(Posit32).0.regimeKValue_75\), 32) /= to_signed(-31, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_46\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_74\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_77\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_77\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_45\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.64\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_46\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_77\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Quire Posit32::op_Explicit(Posit32).0._State_43\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_40\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional14_55_75 = ((sbyte)(-(int)(b_55_75)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional14_55_75 = ((sbyte)(-(int)(b_55_75)));
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.4\ := -signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_55_75\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.conditional14_55_75\ := (SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.4\), 8));
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_40\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_43\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3119
                    when \Quire Posit32::op_Explicit(Posit32).0._State_44\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_40\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional14_55_75 = ((sbyte)((int)(b_55_75) - 1));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional14_55_75 = ((sbyte)((int)(b_55_75) - 1));
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.63\ := SmartResize(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_55_75\), 32)) - to_signed(1, 32), 8);
                        \Quire Posit32::op_Explicit(Posit32).0.conditional14_55_75\ := ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.63\));
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_40\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_44\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_42\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Posit32::op_Explicit(Posit32).0._State_45\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_42\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_75 = (short)(conditional15_75);
                        -- // Ending inlined block of the method System.Int16 Lombiq.Arithmetics.Posit32::CalculateScaleFactor().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_75\ := SmartResize((\Quire Posit32::op_Explicit(Posit32).0.conditional15_75\), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- quire = Quire.op_LeftShift (quire, (int)(240L - (long)(return_74) + (long)(return_75)));
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.116\ := to_signed(240, 64) - signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return_74\), 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.117\ := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.116\ + SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return_75\), 64), 32);
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                        \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\ <= (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.117\);
                        \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= true;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_78\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \Quire Posit32::op_Explicit(Posit32).0._State_46\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_42\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().
                        -- 	Lombiq.Arithmetics.Posit32 this_56_75;
                        -- 	this_56_75 = this_75;
                        -- 	uint return_56_75;
                        -- 	uint num_56_75;
                        -- 	uint conditional18_56_75;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	Lombiq.Arithmetics.Posit32 this_84;
                        -- 	this_84 = this_56_75;
                        -- 	bool return_84;
                        -- 	return_84 = (long)((this_84.PositBits & 0x80000000u)) == 0L;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	if (return_84) {
                        -- 		conditional18_56_75 = this_56_75.PositBits;
                        -- 	} else {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_85;
                        -- 		bits_85 = this_56_75.PositBits;
                        -- 		uint return_85;
                        -- 		return_85 = (uint)((long)(~bits_85) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional18_56_75 = return_85;
                        -- 	}
                        -- 	num_56_75 = (conditional18_56_75);
                        -- 	byte b_56_75;
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().
                        -- 	Lombiq.Arithmetics.Posit32 this_86;
                        -- 	this_86 = this_56_75;
                        -- 	byte return_86;
                        -- 	uint bits_86;
                        -- 	uint conditional16_86;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	Lombiq.Arithmetics.Posit32 this_57_86;
                        -- 	this_57_86 = this_86;
                        -- 	bool return_57_86;
                        -- 	return_57_86 = (long)((this_57_86.PositBits & 0x80000000u)) == 0L;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	if (return_57_86) {
                        -- 		conditional16_86 = this_86.PositBits;
                        -- 	} else {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_58_86;
                        -- 		bits_58_86 = this_86.PositBits;
                        -- 		uint return_58_86;
                        -- 		return_58_86 = (uint)((long)(~bits_58_86) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional16_86 = return_58_86;
                        -- 	}
                        -- 	bits_86 = (conditional16_86);
                        -- 	byte b_86;
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	uint bits_59_86;
                        -- 	bits_59_86 = bits_86;
                        -- 	byte startingPosition_59_86;
                        -- 	startingPosition_59_86 = 31;
                        -- 	byte return_59_86;
                        -- 	byte b_59_86;
                        -- 	b_59_86 = 1;
                        -- 	bits_59_86 = bits_59_86 << 1;
                        -- 	uint num_59_86;
                        -- 	num_59_86 = (bits_59_86 >> 31) & 1u;
                        -- 	bits_59_86 = bits_59_86 << 1;
                        -- 	int num2_59_86;
                        -- 	num2_59_86 = 0;
                        -- 	while ((int)(num2_59_86) < (int)(startingPosition_59_86) && bits_59_86 >> 31 == num_59_86) {
                        -- 		bits_59_86 = bits_59_86 << 1;
                        -- 		b_59_86 = (byte)((int)(b_59_86) + 1);
                        -- 		num2_59_86 = num2_59_86 + 1;
                        -- 	}
                        -- 	return_59_86 = b_59_86;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	b_86 = return_59_86;
                        -- 	byte result_86;
                        -- 	result_86 = (byte)(32 - (int)(b_86) - 1);
                        -- 	if ((int)(b_86) + 2 <= 32) {
                        -- 		int conditional17_86;
                        -- 		if ((32 - ((int)(b_86) + 2) > 2)) {
                        -- 			conditional17_86 = 2;
                        -- 		} else {
                        -- 			conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- 		}
                        -- 		result_86 = (byte)(conditional17_86);
                        -- 	}
                        -- 	return_86 = result_86;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().
                        -- 	b_56_75 = return_86;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 	Lombiq.Arithmetics.Posit32 this_87;
                        -- 	this_87 = this_56_75;
                        -- 	uint return_87;
                        -- 	uint bits_87;
                        -- 	uint conditional20_87;
                        -- 	// Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	Lombiq.Arithmetics.Posit32 this_64_87;
                        -- 	this_64_87 = this_87;
                        -- 	bool return_64_87;
                        -- 	return_64_87 = (long)((this_64_87.PositBits & 0x80000000u)) == 0L;
                        -- 	// Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 	if (return_64_87) {
                        -- 		conditional20_87 = this_87.PositBits;
                        -- 	} else {
                        -- 		;
                        -- 		// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		uint bits_65_87;
                        -- 		bits_65_87 = this_87.PositBits;
                        -- 		uint return_65_87;
                        -- 		return_65_87 = (uint)((long)(~bits_65_87) + 1L);
                        -- 		// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 		conditional20_87 = return_65_87;
                        -- 	}
                        -- 	bits_87 = (conditional20_87);
                        -- 	int num_87;
                        -- 	// Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	uint bits_66_87;
                        -- 	bits_66_87 = bits_87;
                        -- 	byte startingPosition_66_87;
                        -- 	startingPosition_66_87 = 31;
                        -- 	byte return_66_87;
                        -- 	byte b_66_87;
                        -- 	b_66_87 = 1;
                        -- 	bits_66_87 = bits_66_87 << 1;
                        -- 	uint num_66_87;
                        -- 	num_66_87 = (bits_66_87 >> 31) & 1u;
                        -- 	bits_66_87 = bits_66_87 << 1;
                        -- 	int num2_66_87;
                        -- 	num2_66_87 = 0;
                        -- 	while ((int)(num2_66_87) < (int)(startingPosition_66_87) && bits_66_87 >> 31 == num_66_87) {
                        -- 		bits_66_87 = bits_66_87 << 1;
                        -- 		b_66_87 = (byte)((int)(b_66_87) + 1);
                        -- 		num2_66_87 = num2_66_87 + 1;
                        -- 	}
                        -- 	return_66_87 = b_66_87;
                        -- 	// Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 	num_87 = 32 - ((int)(return_66_87) + 2 + 2);
                        -- 	uint conditional21_87;
                        -- 	if ((num_87 > 0)) {
                        -- 		conditional21_87 = ((uint)num_87);
                        -- 	} else {
                        -- 		conditional21_87 = 0u;
                        -- 	}
                        -- 	return_87 = conditional21_87;
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 	num_56_75 = num_56_75 >> (int)return_87 << 32 - (int)(b_56_75) >> 30;
                        -- 	uint conditional19_56_75;
                        -- 	if (((int)(b_56_75) != 0)) {
                        -- 		conditional19_56_75 = num_56_75;
                        -- 	} else {
                        -- 		conditional19_56_75 = 0u;
                        -- 	}
                        -- 	return_56_75 = conditional19_56_75;
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().
                        -- 	conditional15_75 = ((short)((long)((int)(regimeKValue_75) * 4) + (long)(return_56_75)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_56_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_56_75 = this_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.this_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_56_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_56_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional18_56_75;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_84;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_84 = this_56_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_84\ := \Quire Posit32::op_Explicit(Posit32).0.this_56_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_84;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_84 = (long)((this_84.PositBits & 0x80000000u)) == 0L;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.65\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_84\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.66\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.65\)), 64)) = to_signed(0, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.return_84\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.66\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_84) {
                        -- 	conditional18_56_75 = this_56_75.PositBits;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_85;
                        -- 	bits_85 = this_56_75.PositBits;
                        -- 	uint return_85;
                        -- 	return_85 = (uint)((long)(~bits_85) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional18_56_75 = return_85;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_48\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_48\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_49\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_49\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_47\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_84\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_48\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_49\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_47\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_46\.
                        -- The following section was transformed from the .NET statement below:
                        -- num_56_75 = (conditional18_56_75);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num_56_75\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional18_56_75\);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_56_75;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_86 = this_56_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_86\ := \Quire Posit32::op_Explicit(Posit32).0.this_56_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional16_86;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_57_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_57_86 = this_86;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_57_86\ := \Quire Posit32::op_Explicit(Posit32).0.this_86\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_57_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_57_86 = (long)((this_57_86.PositBits & 0x80000000u)) == 0L;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.68\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_57_86\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.69\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.68\)), 64)) = to_signed(0, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.return_57_86\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.69\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_57_86) {
                        -- 	conditional16_86 = this_86.PositBits;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_58_86;
                        -- 	bits_58_86 = this_86.PositBits;
                        -- 	uint return_58_86;
                        -- 	return_58_86 = (uint)((long)(~bits_58_86) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional16_86 = return_58_86;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_51\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_51\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_52\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_52\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_50\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_57_86\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_51\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_52\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_48\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_46\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional18_56_75 = this_56_75.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional18_56_75 = this_56_75.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional18_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.this_56_75\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_46\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_48\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_47\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_49\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_46\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_85;
                        -- 	bits_85 = this_56_75.PositBits;
                        -- 	uint return_85;
                        -- 	return_85 = (uint)((long)(~bits_85) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional18_56_75 = return_85;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_85;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_85 = this_56_75.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_85\ := \Quire Posit32::op_Explicit(Posit32).0.this_56_75\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_85;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_85 = (uint)((long)(~bits_85) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.5\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_85\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.67\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.5\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_85\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.67\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional18_56_75 = return_85;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional18_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.return_85\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_46\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_49\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_47\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_50\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_47\.
                        -- The following section was transformed from the .NET statement below:
                        -- bits_86 = (conditional16_86);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_86\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional16_86\);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_86;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_59_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_59_86 = bits_86;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.bits_86\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte startingPosition_59_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- startingPosition_59_86 = 31;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.startingPosition_59_86\ := SmartResize(unsigned(to_signed(31, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_59_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_59_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_59_86 = 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_59_86\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits_59_86 = bits_59_86 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.71\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_59_86\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.71\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_59_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_59_86 = (bits_59_86 >> 31) & 1u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.72\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_59_86\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.73\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.72\) and to_unsigned(1, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.num_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.73\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits_59_86 = bits_59_86 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.74\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_59_86\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.74\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2_59_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_59_86 = 0;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num2_59_86\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2_59_86) < (int)(startingPosition_59_86) && bits_59_86 >> 31 == num_59_86) {
                        -- 	bits_59_86 = bits_59_86 << 1;
                        -- 	b_59_86 = (byte)((int)(b_59_86) + 1);
                        -- 	num2_59_86 = num2_59_86 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Quire Posit32::op_Explicit(Posit32).0._State_51\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_47\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional16_86 = this_86.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional16_86 = this_86.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional16_86\ := \Quire Posit32::op_Explicit(Posit32).0.this_86\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_47\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_51\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_50\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_52\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_47\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_58_86;
                        -- 	bits_58_86 = this_86.PositBits;
                        -- 	uint return_58_86;
                        -- 	return_58_86 = (uint)((long)(~bits_58_86) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional16_86 = return_58_86;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_58_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_58_86 = this_86.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_58_86\ := \Quire Posit32::op_Explicit(Posit32).0.this_86\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_58_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_58_86 = (uint)((long)(~bits_58_86) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.6\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_58_86\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.70\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.6\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_58_86\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.70\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional16_86 = return_58_86;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional16_86\ := \Quire Posit32::op_Explicit(Posit32).0.return_58_86\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_47\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_52\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_50\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_53\ => 
                        -- Repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_50\.
                        -- The while loop's condition:
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.75\ := (\Quire Posit32::op_Explicit(Posit32).0.num2_59_86\) < signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.startingPosition_59_86\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.76\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_59_86\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.77\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.76\ = \Quire Posit32::op_Explicit(Posit32).0.num_59_86\;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Quire Posit32::op_Explicit(Posit32).0._State_54\ => 
                        -- State after the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_50\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_59_86 = b_59_86;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.b_59_86\;
                        -- The following section was transformed from the .NET statement below:
                        -- b_86 = return_59_86;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_86\ := \Quire Posit32::op_Explicit(Posit32).0.return_59_86\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte result_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- result_86 = (byte)(32 - (int)(b_86) - 1);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.82\ := to_signed(32, 32) - signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_86\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.83\ := SmartResize(unsigned(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.82\ - to_signed(1, 32)), 8);
                        \Quire Posit32::op_Explicit(Posit32).0.result_86\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.83\);
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(b_86) + 2 <= 32) {
                        -- 	int conditional17_86;
                        -- 	if ((32 - ((int)(b_86) + 2) > 2)) {
                        -- 		conditional17_86 = 2;
                        -- 	} else {
                        -- 		conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- 	}
                        -- 	result_86 = (byte)(conditional17_86);
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.84\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_86\), 32)) + to_signed(2, 32);
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_56\;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Quire Posit32::op_Explicit(Posit32).0._State_55\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.78\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.75\ and \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.77\;
                        if (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.78\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_59_86 = bits_59_86 << 1;
                            -- 	b_59_86 = (byte)((int)(b_59_86) + 1);
                            -- 	num2_59_86 = num2_59_86 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_59_86 = bits_59_86 << 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.79\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_59_86\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Quire Posit32::op_Explicit(Posit32).0.bits_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.79\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_59_86 = (byte)((int)(b_59_86) + 1);
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.80\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_59_86\), 32)) + to_signed(1, 32)), 8);
                            \Quire Posit32::op_Explicit(Posit32).0.b_59_86\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.80\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2_59_86 = num2_59_86 + 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.81\ := \Quire Posit32::op_Explicit(Posit32).0.num2_59_86\ + to_signed(1, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.num2_59_86\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.81\;
                            -- Returning to the repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_50\ if the loop wasn't exited with a state change.
                            if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_55\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_53\;
                            end if;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_54\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \Quire Posit32::op_Explicit(Posit32).0._State_56\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.85\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.84\ <= to_signed(32, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_58\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_59\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_57\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.85\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_58\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_57\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Posit32::op_Explicit(Posit32).0._State_57\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_56\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_86 = result_86;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::ExponentSize().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_86\ := \Quire Posit32::op_Explicit(Posit32).0.result_86\;
                        -- The following section was transformed from the .NET statement below:
                        -- b_56_75 = return_86;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.return_86\;
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_87 = this_56_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_87\ := \Quire Posit32::op_Explicit(Posit32).0.this_56_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional20_87;
                        -- // Starting inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- Lombiq.Arithmetics.Posit32 this_64_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- this_64_87 = this_87;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.this_64_87\ := \Quire Posit32::op_Explicit(Posit32).0.this_87\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool return_64_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_64_87 = (long)((this_64_87.PositBits & 0x80000000u)) == 0L;
                        -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                        -- 
                        -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.91\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_64_87\.\PositBits\ and "10000000000000000000000000000000", 64));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.92\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.91\)), 64)) = to_signed(0, 64);
                        \Quire Posit32::op_Explicit(Posit32).0.return_64_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.92\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (return_64_87) {
                        -- 	conditional20_87 = this_87.PositBits;
                        -- } else {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_65_87;
                        -- 	bits_65_87 = this_87.PositBits;
                        -- 	uint return_65_87;
                        -- 	return_65_87 = (uint)((long)(~bits_65_87) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional20_87 = return_65_87;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_63\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_63\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_64\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_64\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_62\.

                        if (\Quire Posit32::op_Explicit(Posit32).0.return_64_87\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_63\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_64\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_58\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_56\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int conditional17_86;
                        -- 	if ((32 - ((int)(b_86) + 2) > 2)) {
                        -- 		conditional17_86 = 2;
                        -- 	} else {
                        -- 		conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- 	}
                        -- 	result_86 = (byte)(conditional17_86);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional17_86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((32 - ((int)(b_86) + 2) > 2)) {
                        -- 	conditional17_86 = 2;
                        -- } else {
                        -- 	conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.86\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_86\), 32)) + to_signed(2, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.87\ := to_signed(32, 32) - (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.86\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.88\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.87\ > to_signed(2, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_60\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_60\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_61\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_61\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_59\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.88\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_60\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_61\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9279
                    when \Quire Posit32::op_Explicit(Posit32).0._State_59\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_58\.
                        -- The following section was transformed from the .NET statement below:
                        -- result_86 = (byte)(conditional17_86);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.result_86\ := SmartResize(unsigned((\Quire Posit32::op_Explicit(Posit32).0.conditional17_86\)), 8);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_56\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_59\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_57\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_60\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_58\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional17_86 = 2;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional17_86 = 2;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional17_86\ := to_signed(2, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_58\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_60\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_61\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_58\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional17_86 = ((byte)(32 - ((int)(b_86) + 2)));
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.89\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_86\), 32)) + to_signed(2, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.90\ := SmartResize(unsigned(to_signed(32, 32) - (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.89\)), 8);
                        \Quire Posit32::op_Explicit(Posit32).0.conditional17_86\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.90\)), 32));
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_58\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_61\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_59\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                    when \Quire Posit32::op_Explicit(Posit32).0._State_62\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_57\.
                        -- The following section was transformed from the .NET statement below:
                        -- bits_87 = (conditional20_87);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_87\ := (\Quire Posit32::op_Explicit(Posit32).0.conditional20_87\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num_87;
                        -- // Starting inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_66_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_87 = bits_87;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.bits_87\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte startingPosition_66_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- startingPosition_66_87 = 31;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_87\ := SmartResize(unsigned(to_signed(31, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte return_66_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- byte b_66_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b_66_87 = 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.b_66_87\ := SmartResize(unsigned(to_signed(1, 32)), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_87 = bits_66_87 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.94\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_87\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.94\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num_66_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num_66_87 = (bits_66_87 >> 31) & 1u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.95\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_66_87\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.96\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.95\) and to_unsigned(1, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.num_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.96\;
                        -- The following section was transformed from the .NET statement below:
                        -- bits_66_87 = bits_66_87 << 1;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.97\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_87\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.bits_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.97\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2_66_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2_66_87 = 0;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.num2_66_87\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num2_66_87) < (int)(startingPosition_66_87) && bits_66_87 >> 31 == num_66_87) {
                        -- 	bits_66_87 = bits_66_87 << 1;
                        -- 	b_66_87 = (byte)((int)(b_66_87) + 1);
                        -- 	num2_66_87 = num2_66_87 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_65\;
                        -- Clock cycles needed to complete this state (approximation): 0.8332
                    when \Quire Posit32::op_Explicit(Posit32).0._State_63\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_57\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional20_87 = this_87.PositBits;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20_87 = this_87.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional20_87\ := \Quire Posit32::op_Explicit(Posit32).0.this_87\.\PositBits\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_57\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_63\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_62\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_64\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_57\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	;
                        -- 	// Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	uint bits_65_87;
                        -- 	bits_65_87 = this_87.PositBits;
                        -- 	uint return_65_87;
                        -- 	return_65_87 = (uint)((long)(~bits_65_87) + 1L);
                        -- 	// Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 	conditional20_87 = return_65_87;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ;
                        -- // Starting inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint bits_65_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- bits_65_87 = this_87.PositBits;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.bits_65_87\ := \Quire Posit32::op_Explicit(Posit32).0.this_87\.\PositBits\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint return_65_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return_65_87 = (uint)((long)(~bits_65_87) + 1L);
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetTwosComplement(System.UInt32).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.7\ := not(\Quire Posit32::op_Explicit(Posit32).0.bits_65_87\);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.93\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.unaryOperationResult.7\), 64)) + to_signed(1, 64)), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.return_65_87\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.93\);
                        -- The following section was transformed from the .NET statement below:
                        -- conditional20_87 = return_65_87;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional20_87\ := \Quire Posit32::op_Explicit(Posit32).0.return_65_87\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_57\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_64\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_62\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5346
                    when \Quire Posit32::op_Explicit(Posit32).0._State_65\ => 
                        -- Repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_62\.
                        -- The while loop's condition:
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.98\ := (\Quire Posit32::op_Explicit(Posit32).0.num2_66_87\) < signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.startingPosition_66_87\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.99\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.bits_66_87\, to_integer(unsigned(SmartResize(to_signed(31, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.100\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.99\ = \Quire Posit32::op_Explicit(Posit32).0.num_66_87\;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_67\;
                        -- Clock cycles needed to complete this state (approximation): 0.9897
                    when \Quire Posit32::op_Explicit(Posit32).0._State_66\ => 
                        -- State after the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_62\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_66_87 = b_66_87;
                        -- // Ending inlined block of the method System.Byte Lombiq.Arithmetics.Posit32::LengthOfRunOfBits(System.UInt32,System.Byte).
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.b_66_87\;
                        -- The following section was transformed from the .NET statement below:
                        -- num_87 = 32 - ((int)(return_66_87) + 2 + 2);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.105\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return_66_87\), 32)) + to_signed(2, 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.106\ := SmartResize(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.105\ + to_signed(2, 32), 32);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.107\ := to_signed(32, 32) - (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.106\);
                        \Quire Posit32::op_Explicit(Posit32).0.num_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.107\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional21_87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if ((num_87 > 0)) {
                        -- 	conditional21_87 = ((uint)num_87);
                        -- } else {
                        -- 	conditional21_87 = 0u;
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_68\;
                        -- Clock cycles needed to complete this state (approximation): 0.9789
                    when \Quire Posit32::op_Explicit(Posit32).0._State_67\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.101\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.98\ and \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.100\;
                        if (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.101\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bits_66_87 = bits_66_87 << 1;
                            -- 	b_66_87 = (byte)((int)(b_66_87) + 1);
                            -- 	num2_66_87 = num2_66_87 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bits_66_87 = bits_66_87 << 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.102\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.bits_66_87\, to_integer(unsigned(SmartResize(to_signed(1, 32), 5))));
                            \Quire Posit32::op_Explicit(Posit32).0.bits_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.102\;
                            -- The following section was transformed from the .NET statement below:
                            -- b_66_87 = (byte)((int)(b_66_87) + 1);
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.103\ := SmartResize(unsigned(signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_66_87\), 32)) + to_signed(1, 32)), 8);
                            \Quire Posit32::op_Explicit(Posit32).0.b_66_87\ := (\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.103\);
                            -- The following section was transformed from the .NET statement below:
                            -- num2_66_87 = num2_66_87 + 1;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.104\ := \Quire Posit32::op_Explicit(Posit32).0.num2_66_87\ + to_signed(1, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.num2_66_87\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.104\;
                            -- Returning to the repeated state of the while loop which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_62\ if the loop wasn't exited with a state change.
                            if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_67\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_65\;
                            end if;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_66\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \Quire Posit32::op_Explicit(Posit32).0._State_68\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.108\ := \Quire Posit32::op_Explicit(Posit32).0.num_87\ > to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_70\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_70\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_71\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_71\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_69\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.108\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_70\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_71\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Posit32::op_Explicit(Posit32).0._State_69\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_68\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_87 = conditional21_87;
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::FractionSize().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_87\ := \Quire Posit32::op_Explicit(Posit32).0.conditional21_87\;
                        -- The following section was transformed from the .NET statement below:
                        -- num_56_75 = num_56_75 >> (int)return_87 << 32 - (int)(b_56_75) >> 30;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.109\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.num_56_75\, to_integer(unsigned(SmartResize(signed(\Quire Posit32::op_Explicit(Posit32).0.return_87\), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.110\ := to_signed(32, 32) - signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_56_75\), 32));
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \Quire Posit32::op_Explicit(Posit32).0._State_70\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_68\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21_87 = ((uint)num_87);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21_87 = ((uint)num_87);
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional21_87\ := (unsigned(\Quire Posit32::op_Explicit(Posit32).0.num_87\));
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_68\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_70\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_69\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_71\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_68\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional21_87 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional21_87 = 0u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional21_87\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_68\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_71\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_69\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_72\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.111\ := shift_left(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.109\, to_integer(unsigned(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.110\, 5))));
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.112\ := shift_right(\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.111\, to_integer(unsigned(SmartResize(to_signed(30, 32), 5) and "11111")));
                        \Quire Posit32::op_Explicit(Posit32).0.num_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.112\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint conditional19_56_75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((int)(b_56_75) != 0)) {
                        -- 	conditional19_56_75 = num_56_75;
                        -- } else {
                        -- 	conditional19_56_75 = 0u;
                        -- }
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_73\;
                        -- Clock cycles needed to complete this state (approximation): 0.9522
                    when \Quire Posit32::op_Explicit(Posit32).0._State_73\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.113\ := signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.b_56_75\), 32)) /= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_75\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_75\.
                        --     * The false branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_76\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_76\.
                        --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_74\.

                        if ((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.113\)) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_75\;
                        else 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_76\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Quire Posit32::op_Explicit(Posit32).0._State_74\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_73\.
                        -- The following section was transformed from the .NET statement below:
                        -- return_56_75 = conditional19_56_75;
                        -- // Ending inlined block of the method System.UInt32 Lombiq.Arithmetics.Posit32::GetExponentValue().
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.conditional19_56_75\;
                        -- The following section was transformed from the .NET statement below:
                        -- conditional15_75 = ((short)((long)((int)(regimeKValue_75) * 4) + (long)(return_56_75)));
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.114\ := SmartResize(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.regimeKValue_75\), 32) * to_signed(4, 32), 64);
                        \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.115\ := SmartResize((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.114\) + signed(SmartResize((\Quire Posit32::op_Explicit(Posit32).0.return_56_75\), 64)), 16);
                        \Quire Posit32::op_Explicit(Posit32).0.conditional15_75\ := SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.115\)), 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_42\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_74\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_45\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5119
                    when \Quire Posit32::op_Explicit(Posit32).0._State_75\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_73\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional19_56_75 = num_56_75;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional19_56_75 = num_56_75;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional19_56_75\ := \Quire Posit32::op_Explicit(Posit32).0.num_56_75\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_73\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_75\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_76\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_73\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional19_56_75 = 0u;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional19_56_75 = 0u;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional19_56_75\ := to_unsigned(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_73\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_76\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_74\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_77\ => 
                        -- False branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_42\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional15_75 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional15_75 = 0;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.conditional15_75\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_42\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_77\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_45\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_78\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.1\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.return.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- Lombiq.Arithmetics.Posit32 this_76;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- this_76 = x;
                            -- 
                            \Quire Posit32::op_Explicit(Posit32).0.this_76\ := \Quire Posit32::op_Explicit(Posit32).0.x\;
                            -- The following section was transformed from the .NET statement below:
                            -- bool return_76;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- return_76 = (long)((this_76.PositBits & 0x80000000u)) == 0L;
                            -- // Ending inlined block of the method System.Boolean Lombiq.Arithmetics.Posit32::IsPositive().
                            -- 
                            -- Since the integer literal 2147483648 was out of the VHDL integer range it was substituted with a binary literal (10000000000000000000000000000000).
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.118\ := signed(SmartResize(\Quire Posit32::op_Explicit(Posit32).0.this_76\.\PositBits\ and "10000000000000000000000000000000", 64));
                            \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.119\ := signed(SmartResize(((\Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.118\)), 64)) = to_signed(0, 64);
                            \Quire Posit32::op_Explicit(Posit32).0.return_76\ := \Quire Posit32::op_Explicit(Posit32).0.binaryOperationResult.119\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (return_76) {
                            -- 	return quire;
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Quire Posit32::op_Explicit(Posit32).0._State_80\ and ends in state \Quire Posit32::op_Explicit(Posit32).0._State_80\.
                            --     * Execution after either branch will continue in the following state: \Quire Posit32::op_Explicit(Posit32).0._State_79\.

                            if (\Quire Posit32::op_Explicit(Posit32).0.return_76\) then 
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_80\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_79\;
                            end if;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4203
                    when \Quire Posit32::op_Explicit(Posit32).0._State_79\ => 
                        -- State after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_78\.
                        -- The following section was transformed from the .NET statement below:
                        -- return Quire.op_Addition (Quire.op_OnesComplement (quire), 1u);
                        -- 
                        -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire)
                        \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                        \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= true;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_81\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_80\ => 
                        -- True branch of the if-else started in state \Quire Posit32::op_Explicit(Posit32).0._State_78\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return quire;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return quire;
                        -- 
                        \Quire Posit32::op_Explicit(Posit32).0.return\ <= \Quire Posit32::op_Explicit(Posit32).0.quire\;
                        \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Quire Posit32::op_Explicit(Posit32).0._State_78\.
                        if (\Quire Posit32::op_Explicit(Posit32).0._State\ = \Quire Posit32::op_Explicit(Posit32).0._State_80\) then 
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_79\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_81\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.2\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.quire\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\;
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32)
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\ <= \Quire Posit32::op_Explicit(Posit32).0.return.2\;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\ <= to_unsigned(1, 32);
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_82\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Posit32::op_Explicit(Posit32).0._State_82\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32)
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ = \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ <= false;
                            \Quire Posit32::op_Explicit(Posit32).0.return.3\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).return.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.return.2\ := \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\;
                            \Quire Posit32::op_Explicit(Posit32).0.return\ <= \Quire Posit32::op_Explicit(Posit32).0.return.3\;
                            \Quire Posit32::op_Explicit(Posit32).0._State\ := \Quire Posit32::op_Explicit(Posit32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0 state machine end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 state machine start
    \Quire::.ctor(UInt64[],UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Quire::.ctor(UInt64[],UInt16).0._State\: \Quire::.ctor(UInt64[],UInt16).0._States\ := \Quire::.ctor(UInt64[],UInt16).0._State_0\;
        Variable \Quire::.ctor(UInt64[],UInt16).0.this\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire::.ctor(UInt64[],UInt16).0.segments\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire::.ctor(UInt64[],UInt16).0.size\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire::.ctor(UInt64[],UInt16).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire::.ctor(UInt64[],UInt16).0._Finished\ <= false;
                \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\ <= (others => to_unsigned(0, 64));
                \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_0\;
                \Quire::.ctor(UInt64[],UInt16).0.segments\ := (others => to_unsigned(0, 64));
                \Quire::.ctor(UInt64[],UInt16).0.size\ := to_unsigned(0, 16);
                \Quire::.ctor(UInt64[],UInt16).0.num\ := to_signed(0, 32);
                \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\ := false;
                \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \Quire::.ctor(UInt64[],UInt16).0._State\ is 
                    when \Quire::.ctor(UInt64[],UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire::.ctor(UInt64[],UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt64[],UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire::.ctor(UInt64[],UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt64[],UInt16).0._Finished\ <= true;
                        else 
                            \Quire::.ctor(UInt64[],UInt16).0._Finished\ <= false;
                            \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\ <= \Quire::.ctor(UInt64[],UInt16).0.this\;
                        \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\ <= \Quire::.ctor(UInt64[],UInt16).0.segments\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt64[],UInt16).0._State_2\ => 
                        \Quire::.ctor(UInt64[],UInt16).0.this\ := \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\;
                        \Quire::.ctor(UInt64[],UInt16).0.segments\ := \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\;
                        \Quire::.ctor(UInt64[],UInt16).0.size\ := \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.SegmentCount = 8;
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\SegmentCount\ := to_unsigned(8, 16);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Size = 0;
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\Size\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Segments = new ulong[8];
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\Segments\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Array.Copy (segments, @this.Segments, 8);
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.this\.\Segments\ := \Quire::.ctor(UInt64[],UInt16).0.segments\(0 to 7);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 8;
                        -- 
                        \Quire::.ctor(UInt64[],UInt16).0.num\ := to_signed(8, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < 8) {
                        -- 	@this.Segments [num] = 0uL;
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt64[],UInt16).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Quire::.ctor(UInt64[],UInt16).0._State_2\.
                        -- The while loop's condition:
                        \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\ := (\Quire::.ctor(UInt64[],UInt16).0.num\) < to_signed(8, 32);
                        if (\Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	@this.Segments [num] = 0uL;
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Segments [num] = 0uL;
                            -- 
                            \Quire::.ctor(UInt64[],UInt16).0.this\.\Segments\(to_integer(\Quire::.ctor(UInt64[],UInt16).0.num\)) := to_unsigned(0, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\ := \Quire::.ctor(UInt64[],UInt16).0.num\ + to_signed(1, 32);
                            \Quire::.ctor(UInt64[],UInt16).0.num\ := \Quire::.ctor(UInt64[],UInt16).0.binaryOperationResult.1\;
                        else 
                            \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Quire::.ctor(UInt64[],UInt16).0._State_4\ => 
                        -- State after the while loop which was started in state \Quire::.ctor(UInt64[],UInt16).0._State_2\.
                        \Quire::.ctor(UInt64[],UInt16).0._State\ := \Quire::.ctor(UInt64[],UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16).0 state machine end


    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 state machine start
    \Quire::.ctor(UInt32,UInt16).0._StateMachine\: process (\Clock\) 
        Variable \Quire::.ctor(UInt32,UInt16).0._State\: \Quire::.ctor(UInt32,UInt16).0._States\ := \Quire::.ctor(UInt32,UInt16).0._State_0\;
        Variable \Quire::.ctor(UInt32,UInt16).0.this\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire::.ctor(UInt32,UInt16).0.firstSegment\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.size\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire::.ctor(UInt32,UInt16).0.conditional25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\: boolean := false;
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire::.ctor(UInt32,UInt16).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\: boolean := false;
        Variable \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire::.ctor(UInt32,UInt16).0._Finished\ <= false;
                \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_0\;
                \Quire::.ctor(UInt32,UInt16).0.firstSegment\ := to_unsigned(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.size\ := to_unsigned(0, 16);
                \Quire::.ctor(UInt32,UInt16).0.conditional25\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\ := false;
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\ := to_unsigned(0, 16);
                \Quire::.ctor(UInt32,UInt16).0.num\ := to_signed(0, 32);
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\ := false;
                \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\ := to_signed(0, 32);
            else 
                case \Quire::.ctor(UInt32,UInt16).0._State\ is 
                    when \Quire::.ctor(UInt32,UInt16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire::.ctor(UInt32,UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire::.ctor(UInt32,UInt16).0._Started\ = true) then 
                            \Quire::.ctor(UInt32,UInt16).0._Finished\ <= true;
                        else 
                            \Quire::.ctor(UInt32,UInt16).0._Finished\ <= false;
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\ <= \Quire::.ctor(UInt32,UInt16).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_2\ => 
                        \Quire::.ctor(UInt32,UInt16).0.this\ := \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\;
                        \Quire::.ctor(UInt32,UInt16).0.firstSegment\ := \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\;
                        \Quire::.ctor(UInt32,UInt16).0.size\ := \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Size = size;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.this\.\Size\ := \Quire::.ctor(UInt32,UInt16).0.size\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional25;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand40;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand40 = (int)size;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ := signed(SmartResize(\Quire::.ctor(UInt32,UInt16).0.size\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- if ((remainderOperand40 - remainderOperand40 / 32 * 32 != 0)) {
                        -- 	conditional25 = 1;
                        -- } else {
                        -- 	conditional25 = 0;
                        -- }
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\ := \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ / to_signed(32, 32);
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\ := SmartResize(\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.0\ * to_signed(32, 32), 32);
                        \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.861
                    when \Quire::.ctor(UInt32,UInt16).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\ := \Quire::.ctor(UInt32,UInt16).0.remainderOperand40\ - \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.1\;
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\ := \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.2\ /= to_signed(0, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire::.ctor(UInt32,UInt16).0._State_5\ and ends in state \Quire::.ctor(UInt32,UInt16).0._State_5\.
                        --     * The false branch starts in state \Quire::.ctor(UInt32,UInt16).0._State_6\ and ends in state \Quire::.ctor(UInt32,UInt16).0._State_6\.
                        --     * Execution after either branch will continue in the following state: \Quire::.ctor(UInt32,UInt16).0._State_4\.

                        if ((\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.3\)) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_5\;
                        else 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5903
                    when \Quire::.ctor(UInt32,UInt16).0._State_4\ => 
                        -- State after the if-else which was started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this.SegmentCount = (ushort)(((int)(size) >> 6) + (conditional25));
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\ := shift_right(signed(SmartResize((\Quire::.ctor(UInt32,UInt16).0.size\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5) and "11111")));
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\ := SmartResize(unsigned((\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.4\) + (\Quire::.ctor(UInt32,UInt16).0.conditional25\)), 16);
                        \Quire::.ctor(UInt32,UInt16).0.this\.\SegmentCount\ := (\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.5\);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Segments = new ulong[8];
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.this\.\Segments\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Segments [0] = 1u;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.this\.\Segments\(to_integer(to_signed(0, 32))) := SmartResize(to_unsigned(1, 32), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.num\ := to_signed(1, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(@this.SegmentCount)) {
                        -- 	@this.Segments [num] = 0uL;
                        -- 	num = num + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0.64
                    when \Quire::.ctor(UInt32,UInt16).0._State_5\ => 
                        -- True branch of the if-else started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional25 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional25 = 1;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.conditional25\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        if (\Quire::.ctor(UInt32,UInt16).0._State\ = \Quire::.ctor(UInt32,UInt16).0._State_5\) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_6\ => 
                        -- False branch of the if-else started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional25 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional25 = 0;
                        -- 
                        \Quire::.ctor(UInt32,UInt16).0.conditional25\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire::.ctor(UInt32,UInt16).0._State_3\.
                        if (\Quire::.ctor(UInt32,UInt16).0._State\ = \Quire::.ctor(UInt32,UInt16).0._State_6\) then 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire::.ctor(UInt32,UInt16).0._State_7\ => 
                        -- Repeated state of the while loop which was started in state \Quire::.ctor(UInt32,UInt16).0._State_4\.
                        -- The while loop's condition:
                        \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\ := (\Quire::.ctor(UInt32,UInt16).0.num\) < signed(SmartResize((\Quire::.ctor(UInt32,UInt16).0.this\.\SegmentCount\), 32));
                        if (\Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.6\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	@this.Segments [num] = 0uL;
                            -- 	num = num + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- @this.Segments [num] = 0uL;
                            -- 
                            \Quire::.ctor(UInt32,UInt16).0.this\.\Segments\(to_integer(\Quire::.ctor(UInt32,UInt16).0.num\)) := to_unsigned(0, 64);
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + 1;
                            -- 
                            \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\ := \Quire::.ctor(UInt32,UInt16).0.num\ + to_signed(1, 32);
                            \Quire::.ctor(UInt32,UInt16).0.num\ := \Quire::.ctor(UInt32,UInt16).0.binaryOperationResult.7\;
                        else 
                            \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \Quire::.ctor(UInt32,UInt16).0._State_8\ => 
                        -- State after the while loop which was started in state \Quire::.ctor(UInt32,UInt16).0._State_4\.
                        \Quire::.ctor(UInt32,UInt16).0._State\ := \Quire::.ctor(UInt32,UInt16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine start
    \Quire Quire::op_Addition(Quire,Quire).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_Addition(Quire,Quire).0._State\: \Quire Quire::op_Addition(Quire,Quire).0._States\ := \Quire Quire::op_Addition(Quire,Quire).0._State_0\;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.right\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Quire::op_Addition(Quire,Quire).0.flag\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.flag2\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.flag3\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.conditional26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.conditional27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.conditional28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\: boolean := false;
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,Quire).0.object36\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_Addition(Quire,Quire).0._Finished\ <= false;
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_0\;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.array\ := (others => to_unsigned(0, 64));
                \Quire Quire::op_Addition(Quire,Quire).0.flag\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.num2\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.num3\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.flag2\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.flag3\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.b\ := to_unsigned(0, 8);
                \Quire Quire::op_Addition(Quire,Quire).0.conditional26\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.conditional27\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.conditional28\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\ := to_unsigned(0, 8);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\ := to_unsigned(0, 64);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\ := to_signed(0, 32);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\ := false;
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\ := to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_Addition(Quire,Quire).0._State\ is 
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._Finished\ <= false;
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\ <= \Quire Quire::op_Addition(Quire,Quire).0.left\;
                        \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\ <= \Quire Quire::op_Addition(Quire,Quire).0.right\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_2\ => 
                        \Quire Quire::op_Addition(Quire,Quire).0.left\ := \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\;
                        \Quire Quire::op_Addition(Quire,Quire).0.right\ := \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(left.SegmentCount) == 0 || (int)(right.SegmentCount) == 0) {
                        -- 	return left;
                        -- }
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.left\.\SegmentCount\), 32)) = to_signed(0, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.right\.\SegmentCount\), 32)) = to_signed(0, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.0\ or \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.1\;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_4\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_4\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_3\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.2\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6518
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_3\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- bool flag;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- flag = false;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.flag\ := false;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num2\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num3\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num3) < (int)((int)(left.SegmentCount) << 6)) {
                        -- 	bool flag2;
                        -- 	flag2 = ((left.Segments [num] >> (int)num2) & 1uL) == 1uL;
                        -- 	bool flag3;
                        -- 	flag3 = ((right.Segments [num] >> (int)num2) & 1uL) == 1uL;
                        -- 	byte b;
                        -- 	int conditional26;
                        -- 	if (flag2) {
                        -- 		conditional26 = 1;
                        -- 	} else {
                        -- 		conditional26 = 0;
                        -- 	}
                        -- 	int conditional27;
                        -- 	if (flag3) {
                        -- 		conditional27 = 1;
                        -- 	} else {
                        -- 		conditional27 = 0;
                        -- 	}
                        -- 	int conditional28;
                        -- 	if (flag) {
                        -- 		conditional28 = 1;
                        -- 	} else {
                        -- 		conditional28 = 0;
                        -- 	}
                        -- 	b = (byte)((conditional26) + (conditional27) + (conditional28));
                        -- 	if (((int)(b) & 1) == 1) {
                        -- 		array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- 	}
                        -- 	flag = (int)(b) >> 1 == 1;
                        -- 	num2 = (ushort)((int)(num2) + 1);
                        -- 	if ((int)(num2) >> 6 == 1) {
                        -- 		num2 = 0;
                        -- 		num = (ushort)((int)(num) + 1);
                        -- 	}
                        -- 	num3 = (ushort)((int)(num3) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_4\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return left;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return left;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.return\ <= \Quire Quire::op_Addition(Quire,Quire).0.left\;
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_2\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_4\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_3\.
                        -- The while loop's condition:
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\ := shift_left(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.left\.\SegmentCount\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5))));
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num3\), 32)) < (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.3\);
                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.4\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag2;
                            -- 	flag2 = ((left.Segments [num] >> (int)num2) & 1uL) == 1uL;
                            -- 	bool flag3;
                            -- 	flag3 = ((right.Segments [num] >> (int)num2) & 1uL) == 1uL;
                            -- 	byte b;
                            -- 	int conditional26;
                            -- 	if (flag2) {
                            -- 		conditional26 = 1;
                            -- 	} else {
                            -- 		conditional26 = 0;
                            -- 	}
                            -- 	int conditional27;
                            -- 	if (flag3) {
                            -- 		conditional27 = 1;
                            -- 	} else {
                            -- 		conditional27 = 0;
                            -- 	}
                            -- 	int conditional28;
                            -- 	if (flag) {
                            -- 		conditional28 = 1;
                            -- 	} else {
                            -- 		conditional28 = 0;
                            -- 	}
                            -- 	b = (byte)((conditional26) + (conditional27) + (conditional28));
                            -- 	if (((int)(b) & 1) == 1) {
                            -- 		array [num] = array [num] + (ulong)(1L << (int)num2);
                            -- 	}
                            -- 	flag = (int)(b) >> 1 == 1;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- 	if ((int)(num2) >> 6 == 1) {
                            -- 		num2 = 0;
                            -- 		num = (ushort)((int)(num) + 1);
                            -- 	}
                            -- 	num3 = (ushort)((int)(num3) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag2 = ((left.Segments [num] >> (int)num2) & 1uL) == 1uL;
                            -- 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_7\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.4003
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_6\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object36;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object36 = new Quire (array, 0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\IsNull\ := false;
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.object36\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.object36\;
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.array\;
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_7\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\ := SmartResize(shift_right(\Quire Quire::op_Addition(Quire,Quire).0.left\.\Segments\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Quire::op_Addition(Quire,Quire).0.num2\, 32)), 6) and "111111"))), 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.5\) and to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_8\;
                        -- Clock cycles needed to complete this state (approximation): 0.9145
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.6\) = to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.flag2\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.7\;
                        -- The following section was transformed from the .NET statement below:
                        -- bool flag3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- flag3 = ((right.Segments [num] >> (int)num2) & 1uL) == 1uL;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\ := SmartResize(shift_right(\Quire Quire::op_Addition(Quire,Quire).0.right\.\Segments\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Quire::op_Addition(Quire,Quire).0.num2\, 32)), 6) and "111111"))), 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.8\) and to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.9145
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.9\) = to_unsigned(1, 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.flag3\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.10\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional26;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag2) {
                        -- 	conditional26 = 1;
                        -- } else {
                        -- 	conditional26 = 0;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_12\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_12\.
                        --     * The false branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_13\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_13\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_11\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.flag2\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_12\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_13\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_11\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional27;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag3) {
                        -- 	conditional27 = 1;
                        -- } else {
                        -- 	conditional27 = 0;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_15\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_15\.
                        --     * The false branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_16\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_16\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_14\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.flag3\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_15\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_12\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional26 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional26 = 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional26\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_12\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_13\ => 
                        -- False branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional26 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional26 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional26\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_10\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_13\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_14\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional28;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag) {
                        -- 	conditional28 = 1;
                        -- } else {
                        -- 	conditional28 = 0;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_18\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_18\.
                        --     * The false branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_19\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_19\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_17\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.flag\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_18\;
                        else 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_19\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_15\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional27 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional27 = 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional27\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_15\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_16\ => 
                        -- False branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional27 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional27 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional27\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_11\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_16\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_17\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- b = (byte)((conditional26) + (conditional27) + (conditional28));
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\ := (\Quire Quire::op_Addition(Quire,Quire).0.conditional26\) + (\Quire Quire::op_Addition(Quire,Quire).0.conditional27\);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\ := SmartResize(unsigned(\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.11\ + (\Quire Quire::op_Addition(Quire,Quire).0.conditional28\)), 8);
                        \Quire Quire::op_Addition(Quire,Quire).0.b\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.12\);
                        -- The following section was transformed from the .NET statement below:
                        -- if (((int)(b) & 1) == 1) {
                        -- 	array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- }
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\ := signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.b\), 32)) and to_signed(1, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_20\;
                        -- Clock cycles needed to complete this state (approximation): 0.7912
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_18\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional28 = 1;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional28 = 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional28\ := to_signed(1, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_18\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_19\ => 
                        -- False branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional28 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional28 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.conditional28\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_14\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_19\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_17\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_20\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.13\) = to_signed(1, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_22\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_22\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_21\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.14\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_22\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_21\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- flag = (int)(b) >> 1 == 1;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\ := shift_right(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.b\), 32)), to_integer(unsigned(SmartResize(to_signed(1, 32), 5) and "11111")));
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.17\ = to_signed(1, 32);
                        \Quire Quire::op_Addition(Quire,Quire).0.flag\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.18\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (ushort)((int)(num2) + 1);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num2\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.num2\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.19\);
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(num2) >> 6 == 1) {
                        -- 	num2 = 0;
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0.8515
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_22\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_20\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array [num] = array [num] + (ulong)(1L << (int)num2);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\ := SmartResize(unsigned(shift_left(to_signed(1, 64), to_integer(unsigned(SmartResize(signed(SmartResize(\Quire Quire::op_Addition(Quire,Quire).0.num2\, 32)), 6))))), 64);
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\ := \Quire Quire::op_Addition(Quire,Quire).0.array\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)) + (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.15\);
                        \Quire Quire::op_Addition(Quire,Quire).0.array\(to_integer(\Quire Quire::op_Addition(Quire,Quire).0.num\)) := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.16\;
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_20\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_22\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_21\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.9498
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_23\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\ := shift_right(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num2\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5) and "11111")));
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\ := \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.20\ = to_signed(1, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_Addition(Quire,Quire).0._State_25\ and ends in state \Quire Quire::op_Addition(Quire,Quire).0._State_25\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_Addition(Quire,Quire).0._State_24\.

                        if (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.21\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_25\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5777
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_24\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (ushort)((int)(num3) + 1);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num3\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.num3\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.23\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_24\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_25\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_Addition(Quire,Quire).0._State_23\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num2 = 0;
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.num2\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_Addition(Quire,Quire).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_Addition(Quire,Quire).0.num\ := (\Quire Quire::op_Addition(Quire,Quire).0.binaryOperationResult.22\);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_Addition(Quire,Quire).0._State_23\.
                        if (\Quire Quire::op_Addition(Quire,Quire).0._State\ = \Quire Quire::op_Addition(Quire,Quire).0._State_25\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_24\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_Addition(Quire,Quire).0._State_26\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Quire::op_Addition(Quire,Quire).0.object36\ := \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Quire::op_Addition(Quire,Quire).0.array\ := \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object36;
                            -- 
                            \Quire Quire::op_Addition(Quire,Quire).0.return\ <= \Quire Quire::op_Addition(Quire,Quire).0.object36\;
                            \Quire Quire::op_Addition(Quire,Quire).0._State\ := \Quire Quire::op_Addition(Quire,Quire).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 state machine start
    \Quire Quire::op_Addition(Quire,UInt32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_Addition(Quire,UInt32).0._State\: \Quire Quire::op_Addition(Quire,UInt32).0._States\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_0\;
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.right\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.object37\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_Addition(Quire,UInt32).0.return.0\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_Addition(Quire,UInt32).0._Finished\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(0, 32);
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_0\;
                \Quire Quire::op_Addition(Quire,UInt32).0.right\ := to_unsigned(0, 32);
                \Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_Addition(Quire,UInt32).0._State\ is 
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0._Started\ = true) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_Addition(Quire,UInt32).0._Finished\ <= false;
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_2\ => 
                        \Quire Quire::op_Addition(Quire,UInt32).0.left\ := \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\;
                        \Quire Quire::op_Addition(Quire,UInt32).0.right\ := \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object37;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object37 = new Quire (1u, (ushort)((int)(left.SegmentCount) << 6));
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\IsNull\ := false;
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_Addition(Quire,UInt32).0.object37\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        \Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\ := SmartResize(unsigned(shift_left(signed(SmartResize((\Quire Quire::op_Addition(Quire,UInt32).0.left\.\SegmentCount\), 32)), to_integer(unsigned(SmartResize(to_signed(6, 32), 5))))), 16);
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.object37\;
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\ <= to_unsigned(1, 32);
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\ <= (\Quire Quire::op_Addition(Quire,UInt32).0.binaryOperationResult.0\);
                        \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= true;
                        \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.125
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16)
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ <= false;
                            \Quire Quire::op_Addition(Quire,UInt32).0.object37\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return Quire.op_Addition (left, object37);
                            -- 
                            -- Starting state machine invocation for the following method: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.object37\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= true;
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_Addition(Quire,UInt32).0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire)
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ <= false;
                            \Quire Quire::op_Addition(Quire,UInt32).0.return.0\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).return.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.left\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.object37\ := \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.return\ <= \Quire Quire::op_Addition(Quire,UInt32).0.return.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0._State\ := \Quire Quire::op_Addition(Quire,UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 state machine start
    \Quire Quire::op_OnesComplement(Quire).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_OnesComplement(Quire).0._State\: \Quire Quire::op_OnesComplement(Quire).0._States\ := \Quire Quire::op_OnesComplement(Quire).0._State_0\;
        Variable \Quire Quire::op_OnesComplement(Quire).0.q\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_OnesComplement(Quire).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\: unsigned(15 downto 0) := to_unsigned(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_OnesComplement(Quire).0._Finished\ <= false;
                \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_0\;
                \Quire Quire::op_OnesComplement(Quire).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\ := false;
                \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\ := to_unsigned(0, 64);
                \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_OnesComplement(Quire).0._State\ is 
                    when \Quire Quire::op_OnesComplement(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_OnesComplement(Quire).0._Started\ = true) then 
                            \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_OnesComplement(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_OnesComplement(Quire).0._Started\ = true) then 
                            \Quire Quire::op_OnesComplement(Quire).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_OnesComplement(Quire).0._Finished\ <= false;
                            \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\ <= \Quire Quire::op_OnesComplement(Quire).0.q\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_OnesComplement(Quire).0._State_2\ => 
                        \Quire Quire::op_OnesComplement(Quire).0.q\ := \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_OnesComplement(Quire).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(q.SegmentCount)) {
                        -- 	q.Segments [num] = ~q.Segments [num];
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_OnesComplement(Quire).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_OnesComplement(Quire).0._State_2\.
                        -- The while loop's condition:
                        \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\ := signed(SmartResize((\Quire Quire::op_OnesComplement(Quire).0.num\), 32)) < signed(SmartResize((\Quire Quire::op_OnesComplement(Quire).0.q\.\SegmentCount\), 32));
                        if (\Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	q.Segments [num] = ~q.Segments [num];
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- q.Segments [num] = ~q.Segments [num];
                            -- 
                            \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\ := not(\Quire Quire::op_OnesComplement(Quire).0.q\.\Segments\(to_integer(\Quire Quire::op_OnesComplement(Quire).0.num\)));
                            \Quire Quire::op_OnesComplement(Quire).0.q\.\Segments\(to_integer(\Quire Quire::op_OnesComplement(Quire).0.num\)) := \Quire Quire::op_OnesComplement(Quire).0.unaryOperationResult.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- num = (ushort)((int)(num) + 1);
                            -- 
                            \Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_OnesComplement(Quire).0.num\), 32)) + to_signed(1, 32)), 16);
                            \Quire Quire::op_OnesComplement(Quire).0.num\ := (\Quire Quire::op_OnesComplement(Quire).0.binaryOperationResult.1\);
                        else 
                            \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.7457
                    when \Quire Quire::op_OnesComplement(Quire).0._State_4\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_OnesComplement(Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- return q;
                        -- 
                        \Quire Quire::op_OnesComplement(Quire).0.return\ <= \Quire Quire::op_OnesComplement(Quire).0.q\;
                        \Quire Quire::op_OnesComplement(Quire).0._State\ := \Quire Quire::op_OnesComplement(Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine start
    \Boolean Quire::op_Equality(Quire,Quire).0._StateMachine\: process (\Clock\) 
        Variable \Boolean Quire::op_Equality(Quire,Quire).0._State\: \Boolean Quire::op_Equality(Quire,Quire).0._States\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_0\;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.right\: \Lombiq.Arithmetics.Quire\;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\: boolean := false;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\: boolean := false;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\: boolean := false;
        Variable \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\: unsigned(15 downto 0) := to_unsigned(0, 16);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Boolean Quire::op_Equality(Quire,Quire).0._Finished\ <= false;
                \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= false;
                \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_0\;
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\ := false;
                \Boolean Quire::op_Equality(Quire,Quire).0.num\ := to_unsigned(0, 16);
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\ := false;
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\ := false;
                \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\ := to_unsigned(0, 16);
            else 
                case \Boolean Quire::op_Equality(Quire,Quire).0._State\ is 
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._Started\ = true) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._Started\ = true) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._Finished\ <= true;
                        else 
                            \Boolean Quire::op_Equality(Quire,Quire).0._Finished\ <= false;
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.Out\ <= \Boolean Quire::op_Equality(Quire,Quire).0.left\;
                        \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.Out\ <= \Boolean Quire::op_Equality(Quire,Quire).0.right\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_2\ => 
                        \Boolean Quire::op_Equality(Quire,Quire).0.left\ := \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.In\;
                        \Boolean Quire::op_Equality(Quire,Quire).0.right\ := \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if ((int)(left.SegmentCount) != (int)(right.SegmentCount)) {
                        -- 	return false;
                        -- }
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\ := signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.left\.\SegmentCount\), 32)) /= signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.right\.\SegmentCount\), 32));

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Boolean Quire::op_Equality(Quire,Quire).0._State_4\ and ends in state \Boolean Quire::op_Equality(Quire,Quire).0._State_4\.
                        --     * Execution after either branch will continue in the following state: \Boolean Quire::op_Equality(Quire,Quire).0._State_3\.

                        if (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.0\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.264
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_3\ => 
                        -- State after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(left.SegmentCount)) {
                        -- 	if (left.Segments [num] != right.Segments [num]) {
                        -- 		return false;
                        -- 	}
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_4\ => 
                        -- True branch of the if-else started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return false;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return false;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= false;
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_2\.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._State\ = \Boolean Quire::op_Equality(Quire,Quire).0._State_4\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_3\.
                        -- The while loop's condition:
                        \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\ := signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.num\), 32)) < signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.left\.\SegmentCount\), 32));
                        if (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	if (left.Segments [num] != right.Segments [num]) {
                            -- 		return false;
                            -- 	}
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- if (left.Segments [num] != right.Segments [num]) {
                            -- 	return false;
                            -- }
                            -- 
                            \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\ := \Boolean Quire::op_Equality(Quire,Quire).0.left\.\Segments\(to_integer(\Boolean Quire::op_Equality(Quire,Quire).0.num\)) /= \Boolean Quire::op_Equality(Quire,Quire).0.right\.\Segments\(to_integer(\Boolean Quire::op_Equality(Quire,Quire).0.num\));

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Boolean Quire::op_Equality(Quire,Quire).0._State_8\ and ends in state \Boolean Quire::op_Equality(Quire,Quire).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \Boolean Quire::op_Equality(Quire,Quire).0._State_7\.

                            if (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.2\) then 
                                \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_8\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_7\;
                            end if;
                        else 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.557
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_6\ => 
                        -- State after the while loop which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- return true;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= true;
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_7\ => 
                        -- State after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\ := SmartResize(unsigned(signed(SmartResize((\Boolean Quire::op_Equality(Quire,Quire).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Boolean Quire::op_Equality(Quire,Quire).0.num\ := (\Boolean Quire::op_Equality(Quire,Quire).0.binaryOperationResult.3\);
                        -- Returning to the repeated state of the while loop which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._State\ = \Boolean Quire::op_Equality(Quire,Quire).0._State_7\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Boolean Quire::op_Equality(Quire,Quire).0._State_8\ => 
                        -- True branch of the if-else started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return false;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return false;
                        -- 
                        \Boolean Quire::op_Equality(Quire,Quire).0.return\ <= false;
                        \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_1\;
                        -- Going to the state after the if-else which was started in state \Boolean Quire::op_Equality(Quire,Quire).0._State_5\.
                        if (\Boolean Quire::op_Equality(Quire,Quire).0._State\ = \Boolean Quire::op_Equality(Quire,Quire).0._State_8\) then 
                            \Boolean Quire::op_Equality(Quire,Quire).0._State\ := \Boolean Quire::op_Equality(Quire,Quire).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine start
    \Quire Quire::op_RightShift(Quire,Int32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_RightShift(Quire,Int32).0._State\: \Quire Quire::op_RightShift(Quire,Int32).0._States\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_0\;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.right\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.flag\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.flag2\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\: boolean := false;
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_RightShift(Quire,Int32).0.object38\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_RightShift(Quire,Int32).0._Finished\ <= false;
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_0\;
                \Quire Quire::op_RightShift(Quire,Int32).0.right\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\ := to_signed(0, 32);
                \Quire Quire::op_RightShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                \Quire Quire::op_RightShift(Quire,Int32).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.flag\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.num2\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.num3\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.flag2\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\ := to_unsigned(0, 64);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\ := false;
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\ := to_unsigned(0, 64);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\ := to_unsigned(0, 64);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\ := to_unsigned(0, 16);
                \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_RightShift(Quire,Int32).0._State\ is 
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_RightShift(Quire,Int32).0._Finished\ <= false;
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.Out\ <= \Quire Quire::op_RightShift(Quire,Int32).0.left\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_2\ => 
                        \Quire Quire::op_RightShift(Quire,Int32).0.left\ := \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.In\;
                        \Quire Quire::op_RightShift(Quire,Int32).0.right\ := \Quire Quire::op_RightShift(Quire,Int32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- right = right & ((1 << (int)(left.SegmentCount) * 6) - 1);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\ := SmartResize(signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.left\.\SegmentCount\), 32)) * to_signed(6, 32), 32);
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\ := shift_left(to_signed(1, 32), to_integer(unsigned(SmartResize(\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.0\, 5))));
                        \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9452
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.1\) - to_signed(1, 32);
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\ := \Quire Quire::op_RightShift(Quire,Int32).0.right\ and (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.2\);
                        \Quire Quire::op_RightShift(Quire,Int32).0.right\ := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.3\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Array.Copy (left.Segments, array, 8);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\ := \Quire Quire::op_RightShift(Quire,Int32).0.left\.\Segments\(0 to 7);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(right)) {
                        -- 	bool flag;
                        -- 	flag = false;
                        -- 	ushort num2;
                        -- 	num2 = 1;
                        -- 	while ((int)(num2) <= 8) {
                        -- 		ushort num3;
                        -- 		num3 = (ushort)(8 - (int)(num2));
                        -- 		bool flag2;
                        -- 		flag2 = (array [num3] & 1uL) == 1uL;
                        -- 		array [num3] = array [num3] >> 1;
                        -- 		if (flag) {
                        -- 			array [num3] = array [num3] | 0x8000000000000000uL;
                        -- 		}
                        -- 		flag = flag2;
                        -- 		num2 = (ushort)((int)(num2) + 1);
                        -- 	}
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.4649
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_4\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_3\.
                        -- The while loop's condition:
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\ := signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num\), 32)) < (\Quire Quire::op_RightShift(Quire,Int32).0.right\);
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.4\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag;
                            -- 	flag = false;
                            -- 	ushort num2;
                            -- 	num2 = 1;
                            -- 	while ((int)(num2) <= 8) {
                            -- 		ushort num3;
                            -- 		num3 = (ushort)(8 - (int)(num2));
                            -- 		bool flag2;
                            -- 		flag2 = (array [num3] & 1uL) == 1uL;
                            -- 		array [num3] = array [num3] >> 1;
                            -- 		if (flag) {
                            -- 			array [num3] = array [num3] | 0x8000000000000000uL;
                            -- 		}
                            -- 		flag = flag2;
                            -- 		num2 = (ushort)((int)(num2) + 1);
                            -- 	}
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag = false;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.flag\ := false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 1;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.num2\ := SmartResize(unsigned(to_signed(1, 32)), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((int)(num2) <= 8) {
                            -- 	ushort num3;
                            -- 	num3 = (ushort)(8 - (int)(num2));
                            -- 	bool flag2;
                            -- 	flag2 = (array [num3] & 1uL) == 1uL;
                            -- 	array [num3] = array [num3] >> 1;
                            -- 	if (flag) {
                            -- 		array [num3] = array [num3] | 0x8000000000000000uL;
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_6\;
                        else 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_5\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object38;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object38 = new Quire (array, 0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\IsNull\ := false;
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.object38\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.object38\;
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.array\;
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_6\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_4\.
                        -- The while loop's condition:
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\ := signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num2\), 32)) <= to_signed(8, 32);
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.5\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	ushort num3;
                            -- 	num3 = (ushort)(8 - (int)(num2));
                            -- 	bool flag2;
                            -- 	flag2 = (array [num3] & 1uL) == 1uL;
                            -- 	array [num3] = array [num3] >> 1;
                            -- 	if (flag) {
                            -- 		array [num3] = array [num3] | 0x8000000000000000uL;
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = (ushort)(8 - (int)(num2));
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\ := SmartResize(unsigned(to_signed(8, 32) - signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num2\), 32))), 16);
                            \Quire Quire::op_RightShift(Quire,Int32).0.num3\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.6\);
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag2 = (array [num3] & 1uL) == 1uL;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\ := \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) and to_unsigned(1, 64);
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_8\;
                        else 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.775
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_7\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.num\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.12\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._State\ = \Quire Quire::op_RightShift(Quire,Int32).0._State_7\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_8\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.7\) = to_unsigned(1, 64);
                        \Quire Quire::op_RightShift(Quire,Int32).0.flag2\ := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num3] = array [num3] >> 1;
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\ := SmartResize(shift_right(\Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)), to_integer(unsigned(SmartResize(to_signed(1, 32), 6) and "111111"))), 64);
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.9\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (flag) {
                        -- 	array [num3] = array [num3] | 0x8000000000000000uL;
                        -- }
                        -- 

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \Quire Quire::op_RightShift(Quire,Int32).0._State_10\ and ends in state \Quire Quire::op_RightShift(Quire,Int32).0._State_10\.
                        --     * Execution after either branch will continue in the following state: \Quire Quire::op_RightShift(Quire,Int32).0._State_9\.

                        if (\Quire Quire::op_RightShift(Quire,Int32).0.flag\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_10\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.5588
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_9\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- flag = flag2;
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.flag\ := \Quire Quire::op_RightShift(Quire,Int32).0.flag2\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (ushort)((int)(num2) + 1);
                        -- 
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_RightShift(Quire,Int32).0.num2\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_RightShift(Quire,Int32).0.num2\ := (\Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.11\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_4\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._State\ = \Quire Quire::op_RightShift(Quire,Int32).0._State_9\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_10\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_8\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	array [num3] = array [num3] | 0x8000000000000000uL;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array [num3] = array [num3] | 0x8000000000000000uL;
                        -- 
                        -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                        \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\ := \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) or "1000000000000000000000000000000000000000000000000000000000000000";
                        \Quire Quire::op_RightShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_RightShift(Quire,Int32).0.num3\)) := \Quire Quire::op_RightShift(Quire,Int32).0.binaryOperationResult.10\;
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_RightShift(Quire,Int32).0._State_8\.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0._State\ = \Quire Quire::op_RightShift(Quire,Int32).0._State_10\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_9\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Quire Quire::op_RightShift(Quire,Int32).0._State_11\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Quire::op_RightShift(Quire,Int32).0.object38\ := \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Quire::op_RightShift(Quire,Int32).0.array\ := \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object38;
                            -- 
                            \Quire Quire::op_RightShift(Quire,Int32).0.return\ <= \Quire Quire::op_RightShift(Quire,Int32).0.object38\;
                            \Quire Quire::op_RightShift(Quire,Int32).0._State\ := \Quire Quire::op_RightShift(Quire,Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine end


    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine start
    \Quire Quire::op_LeftShift(Quire,Int32).0._StateMachine\: process (\Clock\) 
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0._State\: \Quire Quire::op_LeftShift(Quire,Int32).0._States\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.left\: \Lombiq.Arithmetics.Quire\;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.right\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.array\: \unsigned64_Array\(0 to 7) := (others => to_unsigned(0, 64));
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.num\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.flag\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.num2\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\: boolean := false;
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \Quire Quire::op_LeftShift(Quire,Int32).0.object39\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\ <= false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= (others => to_unsigned(0, 64));
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\;
                \Quire Quire::op_LeftShift(Quire,Int32).0.right\ := to_signed(0, 32);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                \Quire Quire::op_LeftShift(Quire,Int32).0.num\ := to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.flag\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.num2\ := to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\ := to_unsigned(0, 64);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\ := false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\ := to_unsigned(0, 64);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\ := to_unsigned(0, 64);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\ := to_unsigned(0, 16);
                \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\ := to_unsigned(0, 16);
            else 
                case \Quire Quire::op_LeftShift(Quire,Int32).0._State\ is 
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._Started\ = true) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\ <= true;
                        else 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Finished\ <= false;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\ => 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.left\ := \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.right\ := \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- right = right & 65535;
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\ := \Quire Quire::op_LeftShift(Quire,Int32).0.right\ and to_signed(65535, 32);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.right\ := \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new ulong[8];
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := (others => to_unsigned(0, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- Array.Copy (left.Segments, array, 8);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := \Quire Quire::op_LeftShift(Quire,Int32).0.left\.\Segments\(0 to 7);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0;
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.num\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((int)(num) < (int)(right)) {
                        -- 	bool flag;
                        -- 	flag = false;
                        -- 	ushort num2;
                        -- 	num2 = 0;
                        -- 	while ((int)(num2) < 8) {
                        -- 		bool flag2;
                        -- 		flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                        -- 		array [num2] = array [num2] << 1;
                        -- 		if (flag) {
                        -- 			array [num2] = (ulong)(array [num2] | 1uL);
                        -- 		}
                        -- 		flag = flag2;
                        -- 		num2 = (ushort)((int)(num2) + 1);
                        -- 	}
                        -- 	num = (ushort)((int)(num) + 1);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.1386
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\.
                        -- The while loop's condition:
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\ := signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num\), 32)) < (\Quire Quire::op_LeftShift(Quire,Int32).0.right\);
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag;
                            -- 	flag = false;
                            -- 	ushort num2;
                            -- 	num2 = 0;
                            -- 	while ((int)(num2) < 8) {
                            -- 		bool flag2;
                            -- 		flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 		array [num2] = array [num2] << 1;
                            -- 		if (flag) {
                            -- 			array [num2] = (ulong)(array [num2] | 1uL);
                            -- 		}
                            -- 		flag = flag2;
                            -- 		num2 = (ushort)((int)(num2) + 1);
                            -- 	}
                            -- 	num = (ushort)((int)(num) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag = false;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.flag\ := false;
                            -- The following section was transformed from the .NET statement below:
                            -- ushort num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 0;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.num2\ := SmartResize(unsigned(to_signed(0, 32)), 16);
                            -- The following section was transformed from the .NET statement below:
                            -- while ((int)(num2) < 8) {
                            -- 	bool flag2;
                            -- 	flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 	array [num2] = array [num2] << 1;
                            -- 	if (flag) {
                            -- 		array [num2] = (ulong)(array [num2] | 1uL);
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- Starting a while loop.
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\;
                        else 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_4\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Quire object39;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- object39 = new Quire (array, 0);
                        -- 
                        -- Initializing record fields to their defaults.
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\IsNull\ := false;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\Size\ := to_unsigned(0, 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\SegmentCount\ := to_unsigned(0, 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.object39\.\Segments\ := (others => to_unsigned(0, 64));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.object39\;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.array\;
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\ <= SmartResize(unsigned(to_signed(0, 32)), 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= true;
                        \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\.
                        -- The while loop's condition:
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\ := signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num2\), 32)) < to_signed(8, 32);
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.2\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	bool flag2;
                            -- 	flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 	array [num2] = array [num2] << 1;
                            -- 	if (flag) {
                            -- 		array [num2] = (ulong)(array [num2] | 1uL);
                            -- 	}
                            -- 	flag = flag2;
                            -- 	num2 = (ushort)((int)(num2) + 1);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag2 = (array [num2] & 0x8000000000000000uL) == 9223372036854775808uL;
                            -- 
                            -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                            \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\ := \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) and "1000000000000000000000000000000000000000000000000000000000000000";
                            -- Since the integer literal 9223372036854775808 was out of the VHDL integer range it was substituted with a binary literal (1000000000000000000000000000000000000000000000000000000000000000).
                            \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\ := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.3\) = "1000000000000000000000000000000000000000000000000000000000000000";
                            \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\ := \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.4\;
                            -- The following section was transformed from the .NET statement below:
                            -- array [num2] = array [num2] << 1;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\ := SmartResize(shift_left(\Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)), to_integer(unsigned(SmartResize(to_signed(1, 32), 6)))), 64);
                            \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) := \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.5\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (flag) {
                            -- 	array [num2] = (ulong)(array [num2] | 1uL);
                            -- }
                            -- 

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\ and ends in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\.

                            if (\Quire Quire::op_LeftShift(Quire,Int32).0.flag\) then 
                                \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\;
                            end if;
                        else 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8351
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\ => 
                        -- State after the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num = (ushort)((int)(num) + 1);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.num\ := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.8\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_2\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._State\ = \Quire Quire::op_LeftShift(Quire,Int32).0._State_6\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\ => 
                        -- State after the if-else which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- flag = flag2;
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.flag\ := \Quire Quire::op_LeftShift(Quire,Int32).0.flag2\;
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (ushort)((int)(num2) + 1);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\ := SmartResize(unsigned(signed(SmartResize((\Quire Quire::op_LeftShift(Quire,Int32).0.num2\), 32)) + to_signed(1, 32)), 16);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.num2\ := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.7\);
                        -- Returning to the repeated state of the while loop which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_3\ if the loop wasn't exited with a state change.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._State\ = \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\ => 
                        -- True branch of the if-else started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	array [num2] = (ulong)(array [num2] | 1uL);
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array [num2] = (ulong)(array [num2] | 1uL);
                        -- 
                        \Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\ := \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) or to_unsigned(1, 64);
                        \Quire Quire::op_LeftShift(Quire,Int32).0.array\(to_integer(\Quire Quire::op_LeftShift(Quire,Int32).0.num2\)) := (\Quire Quire::op_LeftShift(Quire,Int32).0.binaryOperationResult.6\);
                        -- Going to the state after the if-else which was started in state \Quire Quire::op_LeftShift(Quire,Int32).0._State_5\.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0._State\ = \Quire Quire::op_LeftShift(Quire,Int32).0._State_8\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1734
                    when \Quire Quire::op_LeftShift(Quire,Int32).0._State_9\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16)
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ <= false;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.object39\ := \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.array\ := \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- return object39;
                            -- 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.return\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.object39\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._State\ := \Quire Quire::op_LeftShift(Quire,Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0 state machine end


    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine start
    \UInt64 Quire::op_Explicit(Quire).0._StateMachine\: process (\Clock\) 
        Variable \UInt64 Quire::op_Explicit(Quire).0._State\: \UInt64 Quire::op_Explicit(Quire).0._States\ := \UInt64 Quire::op_Explicit(Quire).0._State_0\;
        Variable \UInt64 Quire::op_Explicit(Quire).0.x\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UInt64 Quire::op_Explicit(Quire).0._Finished\ <= false;
                \UInt64 Quire::op_Explicit(Quire).0.return\ <= to_unsigned(0, 64);
                \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_0\;
            else 
                case \UInt64 Quire::op_Explicit(Quire).0._State\ is 
                    when \UInt64 Quire::op_Explicit(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UInt64 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt64 Quire::op_Explicit(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UInt64 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt64 Quire::op_Explicit(Quire).0._Finished\ <= true;
                        else 
                            \UInt64 Quire::op_Explicit(Quire).0._Finished\ <= false;
                            \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \UInt64 Quire::op_Explicit(Quire).0.x.parameter.Out\ <= \UInt64 Quire::op_Explicit(Quire).0.x\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt64 Quire::op_Explicit(Quire).0._State_2\ => 
                        \UInt64 Quire::op_Explicit(Quire).0.x\ := \UInt64 Quire::op_Explicit(Quire).0.x.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return x.Segments [0];
                        -- 
                        \UInt64 Quire::op_Explicit(Quire).0.return\ <= \UInt64 Quire::op_Explicit(Quire).0.x\.\Segments\(to_integer(to_signed(0, 32)));
                        \UInt64 Quire::op_Explicit(Quire).0._State\ := \UInt64 Quire::op_Explicit(Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine start
    \UInt32 Quire::op_Explicit(Quire).0._StateMachine\: process (\Clock\) 
        Variable \UInt32 Quire::op_Explicit(Quire).0._State\: \UInt32 Quire::op_Explicit(Quire).0._States\ := \UInt32 Quire::op_Explicit(Quire).0._State_0\;
        Variable \UInt32 Quire::op_Explicit(Quire).0.x\: \Lombiq.Arithmetics.Quire\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UInt32 Quire::op_Explicit(Quire).0._Finished\ <= false;
                \UInt32 Quire::op_Explicit(Quire).0.return\ <= to_unsigned(0, 32);
                \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_0\;
            else 
                case \UInt32 Quire::op_Explicit(Quire).0._State\ is 
                    when \UInt32 Quire::op_Explicit(Quire).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UInt32 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt32 Quire::op_Explicit(Quire).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UInt32 Quire::op_Explicit(Quire).0._Started\ = true) then 
                            \UInt32 Quire::op_Explicit(Quire).0._Finished\ <= true;
                        else 
                            \UInt32 Quire::op_Explicit(Quire).0._Finished\ <= false;
                            \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \UInt32 Quire::op_Explicit(Quire).0.x.parameter.Out\ <= \UInt32 Quire::op_Explicit(Quire).0.x\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UInt32 Quire::op_Explicit(Quire).0._State_2\ => 
                        \UInt32 Quire::op_Explicit(Quire).0.x\ := \UInt32 Quire::op_Explicit(Quire).0.x.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (uint)x.Segments [0];
                        -- 
                        \UInt32 Quire::op_Explicit(Quire).0.return\ <= SmartResize(\UInt32 Quire::op_Explicit(Quire).0.x\.\Segments\(to_integer(to_signed(0, 32))), 32);
                        \UInt32 Quire::op_Explicit(Quire).0._State\ := \UInt32 Quire::op_Explicit(Quire).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire).0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ = \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::.ctor(Int32).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Started.0\;
    \Posit32::.ctor(Int32).0.this.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.Out.0\;
    \Posit32::.ctor(Int32).0.value.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).value.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32)._Finished.0\ <= \Posit32::.ctor(Int32).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Int32).this.parameter.In.0\ <= \Posit32::.ctor(Int32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32) start
    \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0
                case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\) then 
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\ := 0;
                            \Quire Posit32::op_Explicit(Posit32).0._Started\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Posit32::op_Explicit(Posit32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := AfterFinished;
                                    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= true;
                                    \Quire Posit32::op_Explicit(Posit32).0._Started\ <= false;
                                    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32).return.0\ <= \Quire Posit32::op_Explicit(Posit32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.runningState.0\ := WaitingForStarted;
                            \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire Posit32::op_Explicit(Posit32).0._Started\ <= true;
                            \Quire Posit32::op_Explicit(Posit32).0.x.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).x.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Posit32::op_Explicit(Posit32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= true;
                                    \Quire Posit32::op_Explicit(Posit32).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32).return.0\ <= \Quire Posit32::op_Explicit(Posit32).0.return\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Posit32::op_Explicit(Posit32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Posit32::op_Explicit(Posit32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::.ctor(UInt32,Boolean).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Started.0\;
    \Posit32::.ctor(UInt32,Boolean).0.this.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.Out.0\;
    \Posit32::.ctor(UInt32,Boolean).0.bits.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).bits.parameter.Out.0\;
    \Posit32::.ctor(UInt32,Boolean).0.fromBitMask.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).fromBitMask.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean)._Finished.0\ <= \Posit32::.ctor(UInt32,Boolean).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(UInt32,Boolean).this.parameter.In.0\ <= \Posit32::.ctor(UInt32,Boolean).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32,System.Boolean) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::FusedSum(Posit32[],Quire).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Started.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.Out.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire)._Finished.0\ <= \Posit32::FusedSum(Posit32[],Quire).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).return.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.return\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).posits.parameter.In.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.posits.parameter.Out\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::FusedSum(Posit32[],Quire).startingValue.parameter.In.0\ <= \Posit32::FusedSum(Posit32[],Quire).0.startingValue.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory).0 (#0):
    \Posit32::.ctor(Quire).0._Started\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Started.0\;
    \Posit32::.ctor(Quire).0.this.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.q.parameter.In\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.Out.0\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire)._Finished.0\ <= \Posit32::.ctor(Quire).0._Finished\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).this.parameter.In.0\ <= \Posit32::.ctor(Quire).0.this.parameter.Out\;
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.Posit32::.ctor(Quire).q.parameter.In.0\ <= \Posit32::.ctor(Quire).0.q.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \Quire Quire::op_RightShift(Quire,Int32).0._Started\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Started.0\;
    \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.Out.0\;
    \Quire Quire::op_RightShift(Quire,Int32).0.right.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).right.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32)._Finished.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0._Finished\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).return.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.return\;
    \Posit32::.ctor(Quire).0.Quire Quire::op_RightShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_RightShift(Quire,Int32).0.left.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \UInt64 Quire::op_Explicit(Quire).0._Started\ <= \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Started.0\;
    \UInt64 Quire::op_Explicit(Quire).0.x.parameter.In\ <= \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire)._Finished.0\ <= \UInt64 Quire::op_Explicit(Quire).0._Finished\;
    \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).return.0\ <= \UInt64 Quire::op_Explicit(Quire).0.return\;
    \Posit32::.ctor(Quire).0.UInt64 Quire::op_Explicit(Quire).x.parameter.In.0\ <= \UInt64 Quire::op_Explicit(Quire).0.x.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt64 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire) start
    \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_OnesComplement(Quire).0._Started\ <= true;
                            \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_OnesComplement(Quire).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= true;
                                    \Quire Quire::op_OnesComplement(Quire).0._Started\ <= false;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).return.0\ <= \Quire Quire::op_OnesComplement(Quire).0.return\;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\ <= \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire Quire::op_OnesComplement(Quire).0._Started\ <= true;
                            \Quire Quire::op_OnesComplement(Quire).0.q.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).q.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_OnesComplement(Quire).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= true;
                                    \Quire Quire::op_OnesComplement(Quire).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).return.0\ <= \Quire Quire::op_OnesComplement(Quire).0.return\;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire).q.parameter.In.0\ <= \Quire Quire::op_OnesComplement(Quire).0.q.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_OnesComplement(Quire).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_OnesComplement(Quire)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_OnesComplement(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32) start
    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_Addition(Quire,UInt32).0._Started\ <= true;
                            \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_Addition(Quire,UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= true;
                                    \Quire Quire::op_Addition(Quire,UInt32).0._Started\ <= false;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).return.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.return\;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire Quire::op_Addition(Quire,UInt32).0._Started\ <= true;
                            \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.Out.0\;
                            \Quire Quire::op_Addition(Quire,UInt32).0.right.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_Addition(Quire,UInt32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= true;
                                    \Quire Quire::op_Addition(Quire,UInt32).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).return.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.return\;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,UInt32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,UInt32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_Addition(Quire,UInt32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32) start
    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\) then 
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= true;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\ <= \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_LeftShift(Quire,Int32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= true;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= false;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.return\;
                                    \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::.ctor(Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::.ctor(Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= true;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_LeftShift(Quire,Int32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= true;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.return\;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= true;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.Out.0\;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.right.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_LeftShift(Quire,Int32).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= true;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).return.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.return\;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32).left.parameter.In.0\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.left.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_LeftShift(Quire,Int32).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire Quire::op_LeftShift(Quire,Int32)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \UInt32 Quire::op_Explicit(Quire).0._Started\ <= \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Started.0\;
    \UInt32 Quire::op_Explicit(Quire).0.x.parameter.In\ <= \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire)._Finished.0\ <= \UInt32 Quire::op_Explicit(Quire).0._Finished\;
    \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).return.0\ <= \UInt32 Quire::op_Explicit(Quire).0.return\;
    \Posit32::.ctor(Quire).0.UInt32 Quire::op_Explicit(Quire).x.parameter.In.0\ <= \UInt32 Quire::op_Explicit(Quire).0.x.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Quire::op_Explicit(Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(Lombiq.Arithmetics.Quire).0 (#0):
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Started\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Started.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.signBit.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).signBit.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.regimeKValue.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).regimeKValue.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.exponentBits.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).exponentBits.parameter.Out.0\;
    \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.fractionBits.parameter.In\ <= \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).fractionBits.parameter.Out.0\;
    \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32)._Finished.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0._Finished\;
    \Posit32::.ctor(Quire).0.Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).return.0\ <= \Posit32::AssemblePositBitsWithRounding(Boolean,Int32,UInt32,UInt32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.UInt32 Lombiq.Arithmetics.Posit32::AssemblePositBitsWithRounding(System.Boolean,System.Int32,System.UInt32,System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32) start
    -- Signal connections for System.Void Lombiq.Arithmetics.Posit32::.ctor(System.Int32).0 (#0):
    \Posit32::.ctor(UInt32).0._Started\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Started.0\;
    \Posit32::.ctor(UInt32).0.this.parameter.In\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.Out.0\;
    \Posit32::.ctor(UInt32).0.value.parameter.In\ <= \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).value.parameter.Out.0\;
    \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32)._Finished.0\ <= \Posit32::.ctor(UInt32).0._Finished\;
    \Posit32::.ctor(Int32).0.Posit32::.ctor(UInt32).this.parameter.In.0\ <= \Posit32::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Posit32::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16) start
    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt32,UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt32,UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt32,UInt16).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt32,UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt32,UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt32,UInt16).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt32,UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt32,UInt16).0.this.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.firstSegment.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).firstSegment.parameter.Out.0\;
                            \Quire::.ctor(UInt32,UInt16).0.size.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt32,UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt32,UInt16).0._Started\ <= false;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt32,UInt16).0.this.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt32,UInt16).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire::.ctor(UInt32,UInt16)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt32,System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) start
    -- Signal connections for Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0 (#0):
    \Boolean Quire::op_Equality(Quire,Quire).0._Started\ <= \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Started.0\;
    \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.Out.0\;
    \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.Out.0\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire)._Finished.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0._Finished\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).return.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0.return\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).left.parameter.In.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0.left.parameter.Out\;
    \Posit32::FusedSum(Posit32[],Quire).0.Boolean Quire::op_Equality(Quire,Quire).right.parameter.In.0\ <= \Boolean Quire::op_Equality(Quire,Quire).0.right.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Lombiq.Arithmetics.Quire::op_Equality(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) start
    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::FusedSum(Lombiq.Arithmetics.Posit32[],Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\) then 
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ := 0;
                            \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= true;
                            \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\;
                            \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\ <= \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_Addition(Quire,Quire).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := AfterFinished;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= true;
                                    \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= false;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).return.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.return\;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\;
                                    \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Posit32::FusedSum(Posit32[],Quire).0.runningState.0\ := WaitingForStarted;
                            \Posit32::FusedSum(Posit32[],Quire).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,System.UInt32).0
                case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\) then 
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ := 0;
                            \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= true;
                            \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.Out.0\;
                            \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.In\ <= \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire Quire::op_Addition(Quire,Quire).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= true;
                                    \Quire Quire::op_Addition(Quire,Quire).0._Started\ <= false;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).return.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.return\;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).left.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.left.parameter.Out\;
                                    \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire).right.parameter.In.0\ <= \Quire Quire::op_Addition(Quire,Quire).0.right.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire Quire::op_Addition(Quire,Quire).Quire Quire::op_Addition(Quire,UInt32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_Addition(Quire,UInt32).0.Quire Quire::op_Addition(Quire,Quire)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16) start
    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16)\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Posit32::op_Explicit(Lombiq.Arithmetics.Posit32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := AfterFinished;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Posit32::op_Explicit(Posit32).0.runningState.0\ := WaitingForStarted;
                            \Quire Posit32::op_Explicit(Posit32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_Addition(Lombiq.Arithmetics.Quire,Lombiq.Arithmetics.Quire).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_Addition(Quire,Quire).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_Addition(Quire,Quire).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_RightShift(Lombiq.Arithmetics.Quire,System.Int32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_RightShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_RightShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to Lombiq.Arithmetics.Quire Lombiq.Arithmetics.Quire::op_LeftShift(Lombiq.Arithmetics.Quire,System.Int32).0
                case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\) then 
                            \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\ := 0;
                            \Quire::.ctor(UInt64[],UInt16).0._Started\ <= true;
                            \Quire::.ctor(UInt64[],UInt16).0.this.parameter.In\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.In\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.Out.0\;
                            \Quire::.ctor(UInt64[],UInt16).0.size.parameter.In\ <= \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).size.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningIndex.0\ is 
                            when 0 => 
                                if (\Quire::.ctor(UInt64[],UInt16).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := AfterFinished;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= true;
                                    \Quire::.ctor(UInt64[],UInt16).0._Started\ <= false;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).this.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.this.parameter.Out\;
                                    \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16).segments.parameter.In.0\ <= \Quire::.ctor(UInt64[],UInt16).0.segments.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().Quire::.ctor(UInt64[],UInt16).Quire Quire::op_LeftShift(Quire,Int32).0.runningState.0\ := WaitingForStarted;
                            \Quire Quire::op_LeftShift(Quire,Int32).0.Quire::.ctor(UInt64[],UInt16)._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Lombiq.Arithmetics.Quire::.ctor(System.UInt64[],System.UInt16) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Started\ <= \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Started.0\;
    \Hast::ExternalInvocationProxy().Posit32FusedCalculator::CalculateFusedSum(SimpleMemory)._Finished.0\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.Samples.SampleAssembly.Posit32FusedCalculator::CalculateFusedSum(Hast.Transformer.SimpleMemory.SimpleMemory) end


    -- System.Void Hast::SimpleMemoryOperationProxy() start
    \CellIndex\ <= to_integer(\Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.CellIndex\) when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\ or \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ else 0;
    \DataOut\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.DataOut\ when \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\ else (others => '0');
    \ReadEnable\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.ReadEnable\;
    \WriteEnable\ <= \Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.SimpleMemory.WriteEnable\;
    -- System.Void Hast::SimpleMemoryOperationProxy() end

end Imp;
set_multicycle_path 9 -setup -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0*}]
set_multicycle_path 8 -hold -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.0*}]
set_multicycle_path 9 -setup -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1*}]
set_multicycle_path 8 -hold -to [get_cells -hierarchical {*Posit32FusedCalculator::CalculateFusedSum(SimpleMemory).0.binaryOperationResult.1*}]